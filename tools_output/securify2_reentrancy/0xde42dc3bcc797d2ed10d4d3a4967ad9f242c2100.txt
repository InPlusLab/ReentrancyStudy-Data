Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        110
Source: 
> 
>     int256 public ONE = 100000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public TRUE = bytes32("TRUE");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        111
Source: 
>     int256 public ONE = 100000000000000;
>     bytes32 public TRUE = bytes32("TRUE");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public FALSE = bytes32("FALSE");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        112
Source: 
>     bytes32 public TRUE = bytes32("TRUE");
>     bytes32 public FALSE = bytes32("FALSE");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        142
Source: 
> 
>     function setTabulariumAddress(address _tabulariumAddress) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tab = ITabularium(_tabulariumAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        237
Source: 
> 
>     function defineArbiter(address _arbiter) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         arbiter = _arbiter;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        241
Source: 
> 
>     function defineContractorTechnician(address _contractorTechnician) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractorTechnician = _contractorTechnician;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        245
Source: 
> 
>     function defineHiredTechnician(address _hiredTechnician) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hiredTechnician = _hiredTechnician;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        249
Source: 
> 
>     function defineContractorCommercial(address _contractorCommercial) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractorCommercial = _contractorCommercial;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        253
Source: 
> 
>     function defineHiredCommercial(address _hiredCommercial) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hiredCommercial = _hiredCommercial;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        257
Source: 
> 
>     function registerTechnicalMeasurement(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        301
Source: 
> 
>     function approveTechnicalMeasurement(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        325
Source: 
> 
>     function registerCommercialMeasurement(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        377
Source: 
> 
>     function approveCommercialMeasurement(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        400
Source: 
> 
>     function callArbiter(string memory _label) public userCanCallArbiter(_label) measurementIsOpen(_label) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        413
Source: 
> 
>     function addFinancialMeasurement(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _id,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        431
Source: 
> 
>     function defineBaseAdjustment() public isOwner {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         int256 averageSpecificValueRatio = tab

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        237
Source: 
> 
>     function defineArbiter(address _arbiter) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         arbiter = _arbiter;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        241
Source: 
> 
>     function defineContractorTechnician(address _contractorTechnician) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractorTechnician = _contractorTechnician;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        245
Source: 
> 
>     function defineHiredTechnician(address _hiredTechnician) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hiredTechnician = _hiredTechnician;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        249
Source: 
> 
>     function defineContractorCommercial(address _contractorCommercial) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractorCommercial = _contractorCommercial;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        253
Source: 
> 
>     function defineHiredCommercial(address _hiredCommercial) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hiredCommercial = _hiredCommercial;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        400
Source: 
> 
>     function callArbiter(string memory _label) public userCanCallArbiter(_label) measurementIsOpen(_label) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        142
Source: 
> 
>     function setTabulariumAddress(address _tabulariumAddress) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tab = ITabularium(_tabulariumAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        146
Source: 
> 
>     function getMeasurementId(string memory _label) public pure returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint256(keccak256(abi.encodePacked(_label)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        257
Source: 
> 
>     function registerTechnicalMeasurement(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        301
Source: 
> 
>     function approveTechnicalMeasurement(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        325
Source: 
> 
>     function registerCommercialMeasurement(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        377
Source: 
> 
>     function approveCommercialMeasurement(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _label,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        413
Source: 
> 
>     function addFinancialMeasurement(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _id,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        432
Source: 
>     function defineBaseAdjustment() public isOwner {
>         int256 averageSpecificValueRatio = tab
>                                             ^^
>             .defineAverageSpecificValueRatio();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        435
Source: 
> 
>         contractedValueRatio = tab.defineBaseAdjustment(
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>             averageSpecificValueRatio,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        110
Source: 
> 
>     int256 public ONE = 100000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public TRUE = bytes32("TRUE");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        111
Source: 
>     int256 public ONE = 100000000000000;
>     bytes32 public TRUE = bytes32("TRUE");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public FALSE = bytes32("FALSE");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        112
Source: 
>     bytes32 public TRUE = bytes32("TRUE");
>     bytes32 public FALSE = bytes32("FALSE");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity >=0.4.21 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        49
Source: 
> 
> pragma solidity >=0.4.21 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        136
Source: 
> 
>     ITabularium tab;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        155
Source: 
>     
>     modifier measurementIsOpen(string memory _label) {
>                                ^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        156
Source: 
>     modifier measurementIsOpen(string memory _label) {
>         uint256 measurementId = getMeasurementId(_label);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        161
Source: 
>     }
>     modifier canBeTechnicallyMeasured(string memory _label, bytes32 _startDate, bytes32 _endDate) {
>                                       ^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        161
Source: 
>     }
>     modifier canBeTechnicallyMeasured(string memory _label, bytes32 _startDate, bytes32 _endDate) {
>                                                             ^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        161
Source: 
>     }
>     modifier canBeTechnicallyMeasured(string memory _label, bytes32 _startDate, bytes32 _endDate) {
>                                                                                 ^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        162
Source: 
>     modifier canBeTechnicallyMeasured(string memory _label, bytes32 _startDate, bytes32 _endDate) {
>         uint256 measurementId = getMeasurementId(_label);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        180
Source: 
>     }
>     modifier canBeTechnicallyApproved(string memory _label, bool _decision) {
>                                       ^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        180
Source: 
>     }
>     modifier canBeTechnicallyApproved(string memory _label, bool _decision) {
>                                                             ^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        181
Source: 
>     modifier canBeTechnicallyApproved(string memory _label, bool _decision) {
>         uint256 measurementId = getMeasurementId(_label);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        195
Source: 
>     }
>     modifier canBeCommerciallyMeasured(string memory _label) {
>                                        ^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        196
Source: 
>     modifier canBeCommerciallyMeasured(string memory _label) {
>         uint256 measurementId = getMeasurementId(_label);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        209
Source: 
>     }
>     modifier canBeCommerciallyApproved(string memory _label, bool _decision) {
>                                        ^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        209
Source: 
>     }
>     modifier canBeCommerciallyApproved(string memory _label, bool _decision) {
>                                                              ^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        210
Source: 
>     modifier canBeCommerciallyApproved(string memory _label, bool _decision) {
>         uint256 measurementId = getMeasurementId(_label);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        224
Source: 
>     }
>     modifier userCanCallArbiter(string memory _label) {
>                                 ^^^^^^^^^^^^^^^^^^^^
>         uint256 measurementId = getMeasurementId(_label);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        225
Source: 
>     modifier userCanCallArbiter(string memory _label) {
>         uint256 measurementId = getMeasurementId(_label);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        110
Source: 
> 
>     int256 public ONE = 100000000000000;
>                         ^^^^^^^^^^^^^^^
>     bytes32 public TRUE = bytes32("TRUE");

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        114
Source: 
>     
>     int256 public stopLimit = 1228800000000000;
>                               ^^^^^^^^^^^^^^^^
>     int256 public contractedValueRatio = 1019900000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        115
Source: 
>     int256 public stopLimit = 1228800000000000;
>     int256 public contractedValueRatio = 1019900000000000;
>                                          ^^^^^^^^^^^^^^^^
>     int256 public coefficient = 70000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        116
Source: 
>     int256 public contractedValueRatio = 1019900000000000;
>     int256 public coefficient = 70000000000000;
>                                 ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        432
Source: 
>     function defineBaseAdjustment() public isOwner {
>         int256 averageSpecificValueRatio = tab
>                                             ^^
>             .defineAverageSpecificValueRatio();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        435
Source: 
> 
>         contractedValueRatio = tab.defineBaseAdjustment(
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>             averageSpecificValueRatio,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        448
Source: 
>             int256 status
>         ) = tab.calculationPipeline(
>              ^^^^^^^^^^^^^^^^^^^^^^^
>             financialVariables[_measurementId][uint256(Variables.TOTAL_INVOICED_MATERIAL)],

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        460
Source: 
> 
>         tab.addMeasurement(
>          ^^^^^^^^^^^^^^^^^^
>             _measurementId,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        421
Source: 
>     ) public isOwner {
>         tab.addMeasurement(
>          ^^^^^^^^^^^^^^^^^^
>             _id,

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        130
Source: 
>     address public owner;
>     address public arbiter;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address public contractorTechnician;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        131
Source: 
>     address public arbiter;
>     address public contractorTechnician;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public hiredTechnician;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        132
Source: 
>     address public contractorTechnician;
>     address public hiredTechnician;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public contractorCommercial;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        133
Source: 
>     address public hiredTechnician;
>     address public contractorCommercial;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public hiredCommercial;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        134
Source: 
>     address public contractorCommercial;
>     address public hiredCommercial;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        136
Source: 
> 
>     ITabularium tab;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        455
Source: 
> 
>         financialVariables[_measurementId][uint256(Variables.RECEIVABLE)] = specificPayment;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         financialVariables[_measurementId][uint256(Variables.CREDIT_DEBIT)] = creditDebit;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        456
Source: 
>         financialVariables[_measurementId][uint256(Variables.RECEIVABLE)] = specificPayment;
>         financialVariables[_measurementId][uint256(Variables.CREDIT_DEBIT)] = creditDebit;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         financialVariables[_measurementId][uint256(Variables.SPECIFIC_VALUE_RATIO)] = specificValueRatio;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        457
Source: 
>         financialVariables[_measurementId][uint256(Variables.CREDIT_DEBIT)] = creditDebit;
>         financialVariables[_measurementId][uint256(Variables.SPECIFIC_VALUE_RATIO)] = specificValueRatio;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         financialVariables[_measurementId][uint256(Variables.STATUS)] = status;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SMCRHIMagnesita
Line:        458
Source: 
>         financialVariables[_measurementId][uint256(Variables.SPECIFIC_VALUE_RATIO)] = specificValueRatio;
>         financialVariables[_measurementId][uint256(Variables.STATUS)] = status;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SMCRHIMagnesita
Line:        110
Source: 
> 
>     int256 public ONE = 100000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public TRUE = bytes32("TRUE");

[0m
