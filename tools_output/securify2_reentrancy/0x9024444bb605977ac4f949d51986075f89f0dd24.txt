Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PopcornToken
Line:        240
Source: 
>     
>        function machineries(address _power, address _operators) public onlyAdministrator returns (bool success) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PopcornToken
Line:        258
Source: 
>     
>     function whitelist(address _address) public onlyAdministrator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        Whitelisted[_address] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PopcornToken
Line:        263
Source: 
>     
>     function unwhitelist(address _address) public onlyAdministrator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       Whitelisted[_address] = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PopcornToken
Line:        269
Source: 
>     
>     function Burn(uint _amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PopcornToken
Line:        282
Source: 
>     // ERC20 Transfer function
>     function transfer(address to, uint value) public override returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PopcornToken
Line:        289
Source: 
>     // ERC20 Approve function
>     function approve(address spender, uint value) public override returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][spender] = value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PopcornToken
Line:        297
Source: 
>     // ERC20 TransferFrom function
>     function transferFrom(address from, address to, uint value) public override returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(value <= allowance[from][msg.sender], 'Must not send more than allowance');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PopcornToken
Line:        282
Source: 
>     // ERC20 Transfer function
>     function transfer(address to, uint value) public override returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PopcornToken
Line:        297
Source: 
>     // ERC20 TransferFrom function
>     function transferFrom(address from, address to, uint value) public override returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(value <= allowance[from][msg.sender], 'Must not send more than allowance');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PopcornToken
Line:        240
Source: 
>     
>        function machineries(address _power, address _operators) public onlyAdministrator returns (bool success) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PopcornToken
Line:        258
Source: 
>     
>     function whitelist(address _address) public onlyAdministrator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        Whitelisted[_address] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PopcornToken
Line:        263
Source: 
>     
>     function unwhitelist(address _address) public onlyAdministrator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       Whitelisted[_address] = false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PopcornToken
Line:        289
Source: 
>     // ERC20 Approve function
>     function approve(address spender, uint value) public override returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][spender] = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        403
Source: 
>           l /= pow2;
>           l += h * ((-pow2) / pow2 + 1);
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>           uint r = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        405
Source: 
>           uint r = 1;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        405
Source: 
>           uint r = 1;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        406
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        406
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        407
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        407
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        408
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        408
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        409
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        409
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        410
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        410
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        411
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        411
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        412
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        412
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        413
Source: 
>           r *= 2 - z * r;
>           return l * r;
>                  ^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PopcornToken
Line:        418
Source: 
>           uint mm = mulmod (x, y, uint (-1));
>           l = x * y;
>               ^^^^^
>           h = mm - l;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PopcornToken
Line:        329
Source: 
>                     
>                 POWER(pool1).scaledPower(power);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balanceOf[pool1] += power;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PopcornToken
Line:        348
Source: 
>                     
>                 OPERATORS(pool2).scaledOperators(operators);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balanceOf[pool2] += operators;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PopcornToken
Line:        215
Source: 
>     // Public Mappings
>     mapping(address=>bool) public Whitelisted;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PopcornToken
Line:        269
Source: 
>     
>     function Burn(uint _amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PopcornToken
Line:        386
Source: 
>     
>     function OperatorsTotalPopping() public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PopcornToken
Line:        395
Source: 
>      function mulDiv (uint x, uint y, uint z) public pure returns (uint) {
>           (uint l, uint h) = fullMul (x, y);
>            ^^^^^^
>           assert (h < z);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PopcornToken
Line:        416
Source: 
>     
>      function fullMul (uint x, uint y) private pure returns (uint l, uint h) {
>                                                              ^^^^^^
>           uint mm = mulmod (x, y, uint (-1));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PopcornToken
Line:        197
Source: 
>     uint256 public operators;
>     uint256 operatorstotalpopping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 powertotalpopping;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PopcornToken
Line:        198
Source: 
>     uint256 operatorstotalpopping;
>     uint256 powertotalpopping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PopcornToken
Line:        206
Source: 
>     // Public Parameters
>     uint corns; 
>     ^^^^^^^^^^
>     uint  bValue;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PopcornToken
Line:        207
Source: 
>     uint corns; 
>     uint  bValue;
>     ^^^^^^^^^^^^
>     uint  actualValue;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PopcornToken
Line:        208
Source: 
>     uint  bValue;
>     uint  actualValue;
>     ^^^^^^^^^^^^^^^^^
>     uint  burnAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PopcornToken
Line:        209
Source: 
>     uint  actualValue;
>     uint  burnAmount;
>     ^^^^^^^^^^^^^^^^
>     address administrator;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PopcornToken
Line:        210
Source: 
>     uint  burnAmount;
>     address administrator;
>     ^^^^^^^^^^^^^^^^^^^^^
>  

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PopcornToken
Line:        225
Source: 
>         corns = 1*10**decimals; 
>         totalSupply = 2000000*corns;                                 
>                       ^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PopcornToken
Line:        329
Source: 
>                     
>                 POWER(pool1).scaledPower(power);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balanceOf[pool1] += power;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PopcornToken
Line:        348
Source: 
>                     
>                 OPERATORS(pool2).scaledOperators(operators);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balanceOf[pool2] += operators;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PopcornToken
Line:        388
Source: 
>         
>         return OPERATORS(pool2).totalPopping();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PopcornToken
Line:        382
Source: 
>         
>         return POWER(pool1).totalPopping();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        192
Source: 
>      //======================================POPPING POOLS=========================================//
>     address public pool1;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public pool2;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        193
Source: 
>     address public pool1;
>     address public pool2;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        195
Source: 
> 
>     uint256 public power;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public operators;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        196
Source: 
>     uint256 public power;
>     uint256 public operators;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 operatorstotalpopping;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        197
Source: 
>     uint256 public operators;
>     uint256 operatorstotalpopping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 powertotalpopping;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        198
Source: 
>     uint256 operatorstotalpopping;
>     uint256 powertotalpopping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        207
Source: 
>     uint corns; 
>     uint  bValue;
>     ^^^^^^^^^^^^
>     uint  actualValue;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        208
Source: 
>     uint  bValue;
>     uint  actualValue;
>     ^^^^^^^^^^^^^^^^^
>     uint  burnAmount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PopcornToken
Line:        209
Source: 
>     uint  actualValue;
>     uint  burnAmount;
>     ^^^^^^^^^^^^^^^^
>     address administrator;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PopcornToken
Line:        312
Source: 
>         
>         balanceOf[_from] -= _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(Whitelisted[msg.sender]){ 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PopcornToken
Line:        370
Source: 
>        
>        balanceOf[_to] += actualValue;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        emit Transfer(_from, _to, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PopcornToken
Line:        290
Source: 
>     function approve(address spender, uint value) public override returns (bool success) {
>         allowance[msg.sender][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PopcornToken
Line:        329
Source: 
>                     
>                 POWER(pool1).scaledPower(power);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balanceOf[pool1] += power;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PopcornToken
Line:        348
Source: 
>                     
>                 OPERATORS(pool2).scaledOperators(operators);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balanceOf[pool2] += operators;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PopcornToken
Line:        185
Source: 
>    // ERC-20 Parameters
>     string public name; 
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PopcornToken
Line:        186
Source: 
>     string public name; 
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public decimals; 

[0m
