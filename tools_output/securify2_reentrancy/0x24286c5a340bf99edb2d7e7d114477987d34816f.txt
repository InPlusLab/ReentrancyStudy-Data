Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        117
Source: 
> 
>     function setAdmin(address newAdmin) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newAdmin != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        123
Source: 
> 
>     function setPaymentMethod(address payer, address tokenAddr) public onlySupportedToken(tokenAddr) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paymentMethods[payer] = tokenAddr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        127
Source: 
> 
>     function setServiceFee(address tokenAddr, uint serviceType, uint fee) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddr != address(0x0), "not-valid-token-addr");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        132
Source: 
> 
>     function setGuardianFee(address tokenAddr, uint fee) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddr != address(0x0), "not-valid-token-addr");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        137
Source: 
> 
>     function setFeeDividend(address tokenAddr, uint submitterCut) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddr != address(0x0), "not-valid-token-addr");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        142
Source: 
> 
>     function setGuardianFunds(address fundsAddr, address tokenAddr) public onlyAdmin onlySupportedToken(tokenAddr) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         guardianFundsAddr = fundsAddr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        147
Source: 
> 
>     function hasServiceFee(address payer, uint serviceType) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (payer == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress()) return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        155
Source: 
> 
>     function chargeServiceFee(address payer, uint requestID, uint serviceType) public onlyFromProxy {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address tokenAddr = paymentMethods[payer];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        164
Source: 
> 
>     function refundServiceFee(uint requestID) public onlyAdmin hasPayment(requestID) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint fee = payments[requestID].amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        174
Source: 
> 
>     function recordServiceFee(uint requestID, address submitter, address[] memory workers) public onlyFromProxy hasPayment(requestID) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address tokenAddr = payments[requestID].tokenAddr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        193
Source: 
> 
>     function claimGuardianReward(address guardianAddr) public onlyFromProxy {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(guardianFundsAddr != address(0x0), "not-valid-guardian-fund-addr");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        207
Source: 
>     // @dev: node runners call to withdraw recorded service fees to specified address.
>     function nodeClaim(address to) public returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nodeClaim(msg.sender, defaultTokenAddr, to);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        224
Source: 
> 
>     function nodeFeeBalance(address nodeAddr, address tokenAddr) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[nodeAddr][tokenAddr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DOSPayment
Line:        228
Source: 
> 
>     function paymentInfo(uint requestID) public view returns (address, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Payment storage payment = payments[requestID];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DOSPayment
Line:        148
Source: 
>     function hasServiceFee(address payer, uint serviceType) public view returns (bool) {
>         if (payer == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress()) return true;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address tokenAddr = paymentMethods[payer];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DOSPayment
Line:        152
Source: 
>         uint fee = feeLists[tokenAddr].serviceFee[serviceType];
>         return ERC20I(tokenAddr).balanceOf(payer) >= fee;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DOSPayment
Line:        67
Source: 
>     modifier onlyFromProxy {
>         require(msg.sender == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress(), "not-from-dos-proxy");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DOSPayment
Line:        161
Source: 
>         emit LogChargeServiceFee(payer, tokenAddr, requestID, serviceType, fee);
>         ERC20I(tokenAddr).transferFrom(payer, address(this), fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DOSPayment
Line:        171
Source: 
>         emit LogRefundServiceFee(payer, tokenAddr, requestID, serviceType, fee);
>         ERC20I(tokenAddr).transfer(payer, fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DOSPayment
Line:        67
Source: 
>     modifier onlyFromProxy {
>         require(msg.sender == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress(), "not-from-dos-proxy");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DOSPayment
Line:        198
Source: 
>         emit LogClaimGuardianFee(guardianAddr, guardianFundsTokenAddr, fee, msg.sender);
>         ERC20I(guardianFundsTokenAddr).transferFrom(guardianFundsAddr, guardianAddr,fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DOSPayment
Line:        87
Source: 
> 
>     function initialize(address _bridgeAddr, address _guardianFundsAddr, address _tokenAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(bridgeAddr == address(0x0) && defaultTokenAddr == address(0x0), "already-initialized");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DOSPayment
Line:        142
Source: 
> 
>     function setGuardianFunds(address fundsAddr, address tokenAddr) public onlyAdmin onlySupportedToken(tokenAddr) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         guardianFundsAddr = fundsAddr;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DOSPayment
Line:        193
Source: 
> 
>     function claimGuardianReward(address guardianAddr) public onlyFromProxy {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(guardianFundsAddr != address(0x0), "not-valid-guardian-fund-addr");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        104
Source: 
> 
>     function isSupportedToken(address tokenAddr) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        if (tokenAddr == address(0x0)) return false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        123
Source: 
> 
>     function setPaymentMethod(address payer, address tokenAddr) public onlySupportedToken(tokenAddr) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paymentMethods[payer] = tokenAddr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        127
Source: 
> 
>     function setServiceFee(address tokenAddr, uint serviceType, uint fee) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddr != address(0x0), "not-valid-token-addr");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        132
Source: 
> 
>     function setGuardianFee(address tokenAddr, uint fee) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddr != address(0x0), "not-valid-token-addr");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        137
Source: 
> 
>     function setFeeDividend(address tokenAddr, uint submitterCut) public onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddr != address(0x0), "not-valid-token-addr");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        147
Source: 
> 
>     function hasServiceFee(address payer, uint serviceType) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (payer == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress()) return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        155
Source: 
> 
>     function chargeServiceFee(address payer, uint requestID, uint serviceType) public onlyFromProxy {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address tokenAddr = paymentMethods[payer];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        207
Source: 
>     // @dev: node runners call to withdraw recorded service fees to specified address.
>     function nodeClaim(address to) public returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nodeClaim(msg.sender, defaultTokenAddr, to);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        220
Source: 
> 
>     function nodeFeeBalance(address nodeAddr) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nodeFeeBalance(nodeAddr, defaultTokenAddr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        224
Source: 
> 
>     function nodeFeeBalance(address nodeAddr, address tokenAddr) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[nodeAddr][tokenAddr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DOSPayment
Line:        228
Source: 
> 
>     function paymentInfo(uint requestID) public view returns (address, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Payment storage payment = payments[requestID];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DOSPayment
Line:        181
Source: 
>         FeeList storage feeList = feeLists[tokenAddr];
>         uint feeForSubmitter = feeUnit * feeList.submitterCut;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[submitter][tokenAddr] += feeForSubmitter;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DOSPayment
Line:        184
Source: 
>         emit LogRecordServiceFee(submitter, tokenAddr, requestID, serviceType, feeForSubmitter, true);
>         uint feeForWorker = feeUnit * (10 - feeList.submitterCut) / (workers.length - 1);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < workers.length; i++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DOSPayment
Line:        67
Source: 
>     modifier onlyFromProxy {
>         require(msg.sender == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress(), "not-from-dos-proxy");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DOSPayment
Line:        161
Source: 
>         emit LogChargeServiceFee(payer, tokenAddr, requestID, serviceType, fee);
>         ERC20I(tokenAddr).transferFrom(payer, address(this), fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DOSPayment
Line:        49
Source: 
> 
>     uint constant public defaultSubmitterCut = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public defaultSystemRandomFee = 50 * 1e18;  // 50 tokens

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DOSPayment
Line:        50
Source: 
>     uint constant public defaultSubmitterCut = 4;
>     uint constant public defaultSystemRandomFee = 50 * 1e18;  // 50 tokens
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public defaultUserRandomFee = 50 * 1e18;    // 50 tokens

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DOSPayment
Line:        51
Source: 
>     uint constant public defaultSystemRandomFee = 50 * 1e18;  // 50 tokens
>     uint constant public defaultUserRandomFee = 50 * 1e18;    // 50 tokens
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public defaultUserQueryFee = 50 * 1e18;     // 50 tokens

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DOSPayment
Line:        52
Source: 
>     uint constant public defaultUserRandomFee = 50 * 1e18;    // 50 tokens
>     uint constant public defaultUserQueryFee = 50 * 1e18;     // 50 tokens
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public defaultGuardianFee = 50 * 1e18;      // 50 tokens

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DOSPayment
Line:        53
Source: 
>     uint constant public defaultUserQueryFee = 50 * 1e18;     // 50 tokens
>     uint constant public defaultGuardianFee = 50 * 1e18;      // 50 tokens
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DOSPayment
Line:        71
Source: 
> 
>     modifier onlySupportedToken(address tokenAddr) {
>                                 ^^^^^^^^^^^^^^^^^
>         require(isSupportedToken(tokenAddr), "not-supported-token-addr");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DOSPayment
Line:        76
Source: 
> 
>     modifier hasPayment(uint requestID) {
>                         ^^^^^^^^^^^^^^
>         require(payments[requestID].amount != 0, "no-fee-amount");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DOSPayment
Line:        148
Source: 
>     function hasServiceFee(address payer, uint serviceType) public view returns (bool) {
>         if (payer == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress()) return true;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address tokenAddr = paymentMethods[payer];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DOSPayment
Line:        67
Source: 
>     modifier onlyFromProxy {
>         require(msg.sender == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress(), "not-from-dos-proxy");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DOSPayment
Line:        152
Source: 
>         uint fee = feeLists[tokenAddr].serviceFee[serviceType];
>         return ERC20I(tokenAddr).balanceOf(payer) >= fee;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DOSPayment
Line:        161
Source: 
>         emit LogChargeServiceFee(payer, tokenAddr, requestID, serviceType, fee);
>         ERC20I(tokenAddr).transferFrom(payer, address(this), fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DOSPayment
Line:        171
Source: 
>         emit LogRefundServiceFee(payer, tokenAddr, requestID, serviceType, fee);
>         ERC20I(tokenAddr).transfer(payer, fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DOSPayment
Line:        198
Source: 
>         emit LogClaimGuardianFee(guardianAddr, guardianFundsTokenAddr, fee, msg.sender);
>         ERC20I(guardianFundsTokenAddr).transferFrom(guardianFundsAddr, guardianAddr,fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        90
Source: 
> 
>         admin = msg.sender;
>         ^^^^^^^^^^^^^^^^^^
>         bridgeAddr = _bridgeAddr;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        91
Source: 
>         admin = msg.sender;
>         bridgeAddr = _bridgeAddr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         guardianFundsAddr = _guardianFundsAddr;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        92
Source: 
>         bridgeAddr = _bridgeAddr;
>         guardianFundsAddr = _guardianFundsAddr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         guardianFundsTokenAddr = _tokenAddr;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        93
Source: 
>         guardianFundsAddr = _guardianFundsAddr;
>         guardianFundsTokenAddr = _tokenAddr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         defaultTokenAddr = _tokenAddr;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        94
Source: 
>         guardianFundsTokenAddr = _tokenAddr;
>         defaultTokenAddr = _tokenAddr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        97
Source: 
>         FeeList storage feeList = feeLists[_tokenAddr];
>         feeList.serviceFee[uint(ServiceType.SystemRandom)] = defaultSystemRandomFee;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feeList.serviceFee[uint(ServiceType.UserRandom)] = defaultUserRandomFee;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        98
Source: 
>         feeList.serviceFee[uint(ServiceType.SystemRandom)] = defaultSystemRandomFee;
>         feeList.serviceFee[uint(ServiceType.UserRandom)] = defaultUserRandomFee;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feeList.serviceFee[uint(ServiceType.UserQuery)] = defaultUserQueryFee;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        99
Source: 
>         feeList.serviceFee[uint(ServiceType.UserRandom)] = defaultUserRandomFee;
>         feeList.serviceFee[uint(ServiceType.UserQuery)] = defaultUserQueryFee;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feeList.submitterCut = defaultSubmitterCut;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        100
Source: 
>         feeList.serviceFee[uint(ServiceType.UserQuery)] = defaultUserQueryFee;
>         feeList.submitterCut = defaultSubmitterCut;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feeList.guardianFee = defaultGuardianFee;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DOSPayment
Line:        101
Source: 
>         feeList.submitterCut = defaultSubmitterCut;
>         feeList.guardianFee = defaultGuardianFee;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DOSPayment
Line:        124
Source: 
>     function setPaymentMethod(address payer, address tokenAddr) public onlySupportedToken(tokenAddr) {
>         paymentMethods[payer] = tokenAddr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DOSPayment
Line:        152
Source: 
>         uint fee = feeLists[tokenAddr].serviceFee[serviceType];
>         return ERC20I(tokenAddr).balanceOf(payer) >= fee;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DOSPayment
Line:        161
Source: 
>         emit LogChargeServiceFee(payer, tokenAddr, requestID, serviceType, fee);
>         ERC20I(tokenAddr).transferFrom(payer, address(this), fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DOSPayment
Line:        171
Source: 
>         emit LogRefundServiceFee(payer, tokenAddr, requestID, serviceType, fee);
>         ERC20I(tokenAddr).transfer(payer, fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DOSPayment
Line:        198
Source: 
>         emit LogClaimGuardianFee(guardianAddr, guardianFundsTokenAddr, fee, msg.sender);
>         ERC20I(guardianFundsTokenAddr).transferFrom(guardianFundsAddr, guardianAddr,fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DOSPayment
Line:        215
Source: 
>             delete _balances[nodeAddr][tokenAddr];
>             ERC20I(tokenAddr).transfer(to, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
