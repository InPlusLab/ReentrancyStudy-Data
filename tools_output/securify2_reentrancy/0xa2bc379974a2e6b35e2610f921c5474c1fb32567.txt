pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        233
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        86
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        91
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        331
Source: 
> 
>     function start(address stake_token, address reward_token) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!started, "already started");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        357
Source: 
> 
>     function stake(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(started, "Not start yet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        446
Source: 
> 
>     function getBack(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 left = stakeToken.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        457
Source: 
>     
>     function canHarvest(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return earned(account) > 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        360
Source: 
>         require(amount > 0, "Cannot stake 0");
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 beforeT = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        361
Source: 
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        367
Source: 
>         
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Staked(msg.sender, amount, beforeT, afterT);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        278
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        415
Source: 
> 
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        421
Source: 
> 
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardRate = totalSupply.mul(100).div(160 days);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        438
Source: 
>             rewards[msg.sender] = 0;
>             uint256 beforeT = rewardToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //rewardToken.mint(msg.sender, reward);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        441
Source: 
>             rewardToken.safeTransfer(msg.sender, reward);
>             uint256 afterT = rewardToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit RewardPaid(msg.sender, reward, beforeT, afterT);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        447
Source: 
>     function getBack(address account) public onlyOwner {
>         uint256 left = stakeToken.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (left > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        451
Source: 
>         }
>         left = rewardToken.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (left > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        278
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        446
Source: 
> 
>     function getBack(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 left = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        457
Source: 
>     
>     function canHarvest(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return earned(account) > 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        381
Source: 
> 
>     function calcReward(uint256 amount, uint256 startTime, uint256 endTime) public pure returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 day = endTime.sub(startTime).div(1 days);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        462
Source: 
>     // Add Lock Time Begin:
>     function canWithdraw(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return started && (balanceOf[account] > 0) && false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        360
Source: 
>         require(amount > 0, "Cannot stake 0");
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 beforeT = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        361
Source: 
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        367
Source: 
>         
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Staked(msg.sender, amount, beforeT, afterT);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        438
Source: 
>             rewards[msg.sender] = 0;
>             uint256 beforeT = rewardToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //rewardToken.mint(msg.sender, reward);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        441
Source: 
>             rewardToken.safeTransfer(msg.sender, reward);
>             uint256 afterT = rewardToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit RewardPaid(msg.sender, reward, beforeT, afterT);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        360
Source: 
>         require(amount > 0, "Cannot stake 0");
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 beforeT = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        447
Source: 
>     function getBack(address account) public onlyOwner {
>         uint256 left = stakeToken.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (left > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        451
Source: 
>         }
>         left = rewardToken.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (left > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        361
Source: 
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        367
Source: 
>         
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Staked(msg.sender, amount, beforeT, afterT);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        415
Source: 
> 
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        421
Source: 
> 
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardRate = totalSupply.mul(100).div(160 days);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        438
Source: 
>             rewards[msg.sender] = 0;
>             uint256 beforeT = rewardToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //rewardToken.mint(msg.sender, reward);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        441
Source: 
>             rewardToken.safeTransfer(msg.sender, reward);
>             uint256 afterT = rewardToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit RewardPaid(msg.sender, reward, beforeT, afterT);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        234
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        299
Source: 
> 
>     IERC20 public stakeToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public rewardToken;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        300
Source: 
>     IERC20 public stakeToken;
>     IERC20 public rewardToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        302
Source: 
>     
>     bool public started;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        303
Source: 
>     bool public started;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardFinishTime = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        364
Source: 
>         stakeToken.safeTransferFrom(msg.sender, address(this), amount);
>         totalSupply = totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        377
Source: 
>         stakeCount[msg.sender] = stakeCount[msg.sender].add(1);
>         rewardRate = totalSupply.mul(100).div(160 days);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit StakeItem(msg.sender, stakeIndex, block.timestamp, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        305
Source: 
>     uint256 public rewardFinishTime = 0;
>     uint256 public rewardRate = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public rewards;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        339
Source: 
>         rewardToken = IERC20(reward_token);
>         rewardFinishTime = block.timestamp.add(10 * 365.25 days);
>                            ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        343
Source: 
>     function lastTimeRewardApplicable() internal view returns (uint256) {
>         return block.timestamp < rewardFinishTime ? block.timestamp : rewardFinishTime;
>                ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        343
Source: 
>     function lastTimeRewardApplicable() internal view returns (uint256) {
>         return block.timestamp < rewardFinishTime ? block.timestamp : rewardFinishTime;
>                                                     ^^^^^^^^^^^^^^^
>     }

[0m
