pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        92
Source: 
>     event WhitelistAdminRemoved(address indexed account);
>     Roles.Role private _whitelistAdmins;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor () internal {

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WhitelistedRole
Line:        123
Source: 
>     event WhitelistedRemoved(address indexed account);
>     Roles.Role private _whitelisteds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier onlyWhitelisted() {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        103
Source: 
>     }
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        106
Source: 
>     }
>     function renounceWhitelistAdmin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        103
Source: 
>     }
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        106
Source: 
>     }
>     function renounceWhitelistAdmin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        128
Source: 
>     }
>     function isWhitelisted(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        131
Source: 
>     }
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        134
Source: 
>     }
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        137
Source: 
>     }
>     function renounceWhitelisted() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        103
Source: 
>     }
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        106
Source: 
>     }
>     function renounceWhitelistAdmin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        128
Source: 
>     }
>     function isWhitelisted(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        134
Source: 
>     }
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        137
Source: 
>     }
>     function renounceWhitelisted() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(_msgSender());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccessControls
Line:        166
Source: 
>     modifier onlyWhitelistAdmin() {
>         require(accessWhitelist.isWhitelistAdmin(msg.sender), "Caller not whitelist admin");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        211
Source: 
>             }
>             (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)("");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(feeSplitterSuccess, "Failed to transfer to the fee splitter");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccessControls
Line:        166
Source: 
>     modifier onlyWhitelistAdmin() {
>         require(accessWhitelist.isWhitelistAdmin(msg.sender), "Caller not whitelist admin");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        219
Source: 
>         uint256 contractBalance = address(this).balance;
>         _account.transfer(contractBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EtherMoved(msg.sender, _account, contractBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccessControls
Line:        166
Source: 
>     modifier onlyWhitelistAdmin() {
>         require(accessWhitelist.isWhitelistAdmin(msg.sender), "Caller not whitelist admin");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        224
Source: 
>     function moveTokens(address _token, address _account) external onlyWhitelistAdmin returns (bool) {
>         uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(_token).transfer(_account, contractTokenBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        225
Source: 
>         uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));
>         IERC20(_token).transfer(_account, contractTokenBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokensMoved(msg.sender, _account, contractTokenBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccessControls
Line:        162
Source: 
>     modifier onlyWhitelisted() {
>         require(accessWhitelist.isWhitelisted(msg.sender), "Caller not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccessControls
Line:        166
Source: 
>     modifier onlyWhitelistAdmin() {
>         require(accessWhitelist.isWhitelistAdmin(msg.sender), "Caller not whitelist admin");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        199
Source: 
>             require(_values[i] > 0, "Value invalid");
>             IERC20(_token).transferFrom(msg.sender, _addresses[i], _values[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalTokensSent = totalTokensSent.add(_values[i]);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        208
Source: 
>                 fee = fee.sub(referralPerTx);
>                 (bool feeSplitterSuccess,) = _referral.call.value(referralPerTx)("");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(feeSplitterSuccess, "Failed to transfer the referral");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        211
Source: 
>             }
>             (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)("");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(feeSplitterSuccess, "Failed to transfer to the fee splitter");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        100
Source: 
>     }
>     function isWhitelistAdmin(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        103
Source: 
>     }
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        100
Source: 
>     }
>     function isWhitelistAdmin(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        103
Source: 
>     }
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        128
Source: 
>     }
>     function isWhitelisted(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        131
Source: 
>     }
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        134
Source: 
>     }
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        100
Source: 
>     }
>     function isWhitelistAdmin(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        103
Source: 
>     }
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        128
Source: 
>     }
>     function isWhitelisted(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        131
Source: 
>     }
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        134
Source: 
>     }
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        229
Source: 
>     }
>     function addCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         credits[_to] = credits[_to].add(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        239
Source: 
>     }
>     function setPricePerTx(uint256 _pricePerTx) external onlyWhitelisted returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 oldPrice = pricePerTx;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccessControls
Line:        169
Source: 
>     }
>     function updateAccessWhitelist(AccessWhitelist _accessWhitelist) external onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accessWhitelist = _accessWhitelist;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        192
Source: 
>     function () external payable {}
>     function transfer(address _token, address payable _referral, address[] calldata _addresses, uint256[] calldata _values) payable external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_addresses.length == _values.length, "Address array and values array must be same length");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        217
Source: 
>     }
>     function moveEther(address payable _account) onlyWhitelistAdmin external returns (bool)  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 contractBalance = address(this).balance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        223
Source: 
>     }
>     function moveTokens(address _token, address _account) external onlyWhitelistAdmin returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        234
Source: 
>     }
>     function reduceCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         credits[_to] = credits[_to].sub(_amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        245
Source: 
>     }
>     function setReferralPerTx(uint256 _referralPerTx) external onlyWhitelisted returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 oldPrice = referralPerTx;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        251
Source: 
>     }
>     function creditsOfOwner(address _owner) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return credits[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        254
Source: 
>     }
>     function updateFeeSplitter(address payable _feeSplitter) external onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feeSplitter = _feeSplitter;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AccessControls
Line:        162
Source: 
>     modifier onlyWhitelisted() {
>         require(accessWhitelist.isWhitelisted(msg.sender), "Caller not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        208
Source: 
>                 fee = fee.sub(referralPerTx);
>                 (bool feeSplitterSuccess,) = _referral.call.value(referralPerTx)("");
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>                 require(feeSplitterSuccess, "Failed to transfer the referral");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        211
Source: 
>             }
>             (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)("");
>              ^^^^^^^^^^^^^^^^^^^^^^^
>             require(feeSplitterSuccess, "Failed to transfer to the fee splitter");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        211
Source: 
>             }
>             (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)("");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(feeSplitterSuccess, "Failed to transfer to the fee splitter");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        219
Source: 
>         uint256 contractBalance = address(this).balance;
>         _account.transfer(contractBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EtherMoved(msg.sender, _account, contractBalance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        208
Source: 
>                 fee = fee.sub(referralPerTx);
>                 (bool feeSplitterSuccess,) = _referral.call.value(referralPerTx)("");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(feeSplitterSuccess, "Failed to transfer the referral");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        211
Source: 
>             }
>             (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)("");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(feeSplitterSuccess, "Failed to transfer to the fee splitter");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        219
Source: 
>         uint256 contractBalance = address(this).balance;
>         _account.transfer(contractBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EtherMoved(msg.sender, _account, contractBalance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        208
Source: 
>                 fee = fee.sub(referralPerTx);
>                 (bool feeSplitterSuccess,) = _referral.call.value(referralPerTx)("");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(feeSplitterSuccess, "Failed to transfer the referral");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        211
Source: 
>             }
>             (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)("");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(feeSplitterSuccess, "Failed to transfer to the fee splitter");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        219
Source: 
>         uint256 contractBalance = address(this).balance;
>         _account.transfer(contractBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EtherMoved(msg.sender, _account, contractBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AccessControls
Line:        166
Source: 
>     modifier onlyWhitelistAdmin() {
>         require(accessWhitelist.isWhitelistAdmin(msg.sender), "Caller not whitelist admin");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SuperTokenMultiSender
Line:        224
Source: 
>     function moveTokens(address _token, address _account) external onlyWhitelistAdmin returns (bool) {
>         uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(_token).transfer(_account, contractTokenBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AccessControls
Line:        162
Source: 
>     modifier onlyWhitelisted() {
>         require(accessWhitelist.isWhitelisted(msg.sender), "Caller not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AccessControls
Line:        166
Source: 
>     modifier onlyWhitelistAdmin() {
>         require(accessWhitelist.isWhitelistAdmin(msg.sender), "Caller not whitelist admin");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        199
Source: 
>             require(_values[i] > 0, "Value invalid");
>             IERC20(_token).transferFrom(msg.sender, _addresses[i], _values[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalTokensSent = totalTokensSent.add(_values[i]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        225
Source: 
>         uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));
>         IERC20(_token).transfer(_account, contractTokenBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokensMoved(msg.sender, _account, contractTokenBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        92
Source: 
>     event WhitelistAdminRemoved(address indexed account);
>     Roles.Role private _whitelistAdmins;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor () internal {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistedRole
Line:        123
Source: 
>     event WhitelistedRemoved(address indexed account);
>     Roles.Role private _whitelisteds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier onlyWhitelisted() {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        92
Source: 
>     event WhitelistAdminRemoved(address indexed account);
>     Roles.Role private _whitelistAdmins;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor () internal {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistedRole
Line:        123
Source: 
>     event WhitelistedRemoved(address indexed account);
>     Roles.Role private _whitelisteds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier onlyWhitelisted() {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        219
Source: 
>         uint256 contractBalance = address(this).balance;
>         _account.transfer(contractBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EtherMoved(msg.sender, _account, contractBalance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        76
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        80
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        76
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        80
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        76
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        80
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccessControls
Line:        170
Source: 
>     function updateAccessWhitelist(AccessWhitelist _accessWhitelist) external onlyWhitelistAdmin {
>         accessWhitelist = _accessWhitelist;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        230
Source: 
>     function addCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {
>         credits[_to] = credits[_to].add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CreditsAdded(msg.sender, _to, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        235
Source: 
>     function reduceCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {
>         credits[_to] = credits[_to].sub(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CreditsRemoved(msg.sender, _to, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        241
Source: 
>         uint256 oldPrice = pricePerTx;
>         pricePerTx = _pricePerTx;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit PricePerTxChanged(msg.sender, oldPrice, pricePerTx);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        247
Source: 
>         uint256 oldPrice = referralPerTx;
>         referralPerTx = _referralPerTx;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ReferralPerTxChanged(msg.sender, oldPrice, referralPerTx);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        255
Source: 
>     function updateFeeSplitter(address payable _feeSplitter) external onlyWhitelistAdmin {
>         feeSplitter = _feeSplitter;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        199
Source: 
>             require(_values[i] > 0, "Value invalid");
>             IERC20(_token).transferFrom(msg.sender, _addresses[i], _values[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalTokensSent = totalTokensSent.add(_values[i]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SuperTokenMultiSender
Line:        225
Source: 
>         uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));
>         IERC20(_token).transfer(_account, contractTokenBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokensMoved(msg.sender, _account, contractTokenBalance);

[0m
