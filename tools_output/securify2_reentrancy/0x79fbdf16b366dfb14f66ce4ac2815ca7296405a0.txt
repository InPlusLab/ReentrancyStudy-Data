Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ClipperMom
Line:        109
Source: 
>     // Governance actions with delay
>     function setOwner(address owner_) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SetOwner(owner, owner_);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ClipperMom
Line:        114
Source: 
> 
>     function setAuthority(address authority_) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SetAuthority(authority, authority_);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ClipperMom
Line:        150
Source: 
>     */
>     function tripBreaker(address clip) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ClipLike(clip).stopped() < 2, "ClipperMom/clipper-already-stopped");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClipperMom
Line:        123
Source: 
>     // 0.6 * RAY = 600000000000000000000000000 => means acceptable drop from previous price is up to 40%
>     function setPriceTolerance(address clip, uint256 value) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(value <= 1 * RAY, "ClipperMom/tolerance-out-of-bounds");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClipperMom
Line:        129
Source: 
>     // Governance action without delay
>     function setBreaker(address clip, uint256 level, uint256 delay) external auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(level <= 3, "ClipperMom/nonexistent-level");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ClipperMom
Line:        131
Source: 
>         require(level <= 3, "ClipperMom/nonexistent-level");
>         ClipLike(clip).file("stopped", level);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // If governance changes the status of the breaker we want to lock for one hour

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ClipperMom
Line:        100
Source: 
>     function getPrices(address clip) internal view returns (uint256 cur, uint256 nxt) {
>         (OsmLike osm, ) = spotter.ilks(ClipLike(clip).ilk());
>          ^^^^^^^^^^^
>         bool has;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        24
Source: 
> 
> pragma solidity >=0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ClipperMom
Line:        74
Source: 
>     // --- Math ---
>     uint256 constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ClipperMom
Line:        75
Source: 
>     uint256 constant WAD = 10 ** 18;
>     uint256 constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ClipperMom
Line:        95
Source: 
>         } else {
>             return AuthorityLike(authority).canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ClipperMom
Line:        100
Source: 
>     function getPrices(address clip) internal view returns (uint256 cur, uint256 nxt) {
>         (OsmLike osm, ) = spotter.ilks(ClipLike(clip).ilk());
>                                        ^^^^^^^^^^^^^^^^^^^^
>         bool has;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ClipperMom
Line:        102
Source: 
>         bool has;
>         (cur, has) = osm.peek();
>                      ^^^^^^^^^^
>         require(has, "ClipperMom/invalid-cur-price");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ClipperMom
Line:        104
Source: 
>         require(has, "ClipperMom/invalid-cur-price");
>         (nxt, has) = osm.peep();
>                      ^^^^^^^^^^
>         require(has, "ClipperMom/invalid-nxt-price");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ClipperMom
Line:        151
Source: 
>     function tripBreaker(address clip) external {
>         require(ClipLike(clip).stopped() < 2, "ClipperMom/clipper-already-stopped");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp > locked[clip], "ClipperMom/temporary-locked");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ClipperMom
Line:        100
Source: 
>     function getPrices(address clip) internal view returns (uint256 cur, uint256 nxt) {
>         (OsmLike osm, ) = spotter.ilks(ClipLike(clip).ilk());
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool has;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ClipperMom
Line:        131
Source: 
>         require(level <= 3, "ClipperMom/nonexistent-level");
>         ClipLike(clip).file("stopped", level);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // If governance changes the status of the breaker we want to lock for one hour

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ClipperMom
Line:        158
Source: 
>         require(nxt < rmul(cur, tolerance[clip]), "ClipperMom/price-within-bounds");
>         ClipLike(clip).file("stopped", 2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SetBreaker(clip, 2);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ClipperMom
Line:        78
Source: 
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ClipperMom
Line:        81
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ClipperMom
Line:        47
Source: 
>     address public owner;
>     address public authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public locked;    // timestamp when becomes unlocked (per clipper)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ClipperMom
Line:        134
Source: 
>         // the permissionless function so the osm can pull new nxt price to compare
>         locked[clip] = add(block.timestamp, delay);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SetBreaker(clip, level);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ClipperMom
Line:        74
Source: 
>     // --- Math ---
>     uint256 constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ClipperMom
Line:        134
Source: 
>         // the permissionless function so the osm can pull new nxt price to compare
>         locked[clip] = add(block.timestamp, delay);
>                            ^^^^^^^^^^^^^^^
>         emit SetBreaker(clip, level);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ClipperMom
Line:        152
Source: 
>         require(ClipLike(clip).stopped() < 2, "ClipperMom/clipper-already-stopped");
>         require(block.timestamp > locked[clip], "ClipperMom/temporary-locked");
>                 ^^^^^^^^^^^^^^^
>       

[0m
