[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        251
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         address Token,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        416
Source: 
>      
>     function withdrawUSDT() public onlyOwner returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(total_received>0, 'BitmindMsg: Pair Token INSUFFICIENT');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        431
Source: 
>      
>     function withdrawBMD() public onlyOwner returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(token_available > 0, 'BitmindMsg: Distributed Token INSUFFICIENT');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        444
Source: 
>     
>     function openingTime() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return start_time;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        452
Source: 
>     
>     function closingTime() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return end_time;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        459
Source: 
>      */
>     function MIN_CONTRIBUTION() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return min_contribution;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        465
Source: 
>      */
>     function MAX_CONTRIBUTION() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return max_contribution;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        472
Source: 
>      */
>     function Rate() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        478
Source: 
>      */
>     function Pause() public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pause;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        488
Source: 
>     
>     function totalParticipant() public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return addressList.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        499
Source: 
>      
>     function changeOpeningTime(uint256 _time) public onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_time >= block.timestamp, "BitmindMsg: Opening Time must before current time");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        513
Source: 
>      */
>     function changeClosingTime(uint256 _time) public onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_time >= start_time, "BitmindMsg: Closing Time already set");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        528
Source: 
>     
>     function transferOwnership(address payable _owner) onlyOwner public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        542
Source: 
>     
>     function transferFreezer(address freezer) onlyFreezer public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         freezerAddress = freezer;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        556
Source: 
>     
>     function freeze() public onlyFreezer returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BitmindCrowdsale
Line:        570
Source: 
>     
>     function unfreeze() public onlyFreezer returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        310
Source: 
>     
>     function Purchase(uint256 amount) external onlyWhileOpen returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        528
Source: 
>     
>     function transferOwnership(address payable _owner) onlyOwner public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        542
Source: 
>     
>     function transferFreezer(address freezer) onlyFreezer public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         freezerAddress = freezer;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        251
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         address Token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        35
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BitmindCrowdsale
Line:        324
Source: 
>         
>         pairAddress.transferFrom(msg.sender, address(this), amount.div(1e12));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_received = total_received.add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BitmindCrowdsale
Line:        341
Source: 
>     
>         tokenAddress.transfer(msg.sender, tokenReached);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        124
Source: 
>      */
>     uint256 private start_time;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private end_time;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        125
Source: 
>     uint256 private start_time;
>     uint256 private end_time;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     bool private pause;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        131
Source: 
>      */
>     uint256 private min_contribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private max_contribution;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        132
Source: 
>     uint256 private min_contribution;
>     uint256 private max_contribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public cap;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        136
Source: 
>     uint256 private price;
>     uint256 public token_available;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_received;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        137
Source: 
>     uint256 public token_available;
>     uint256 public total_received;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public token_sold;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        138
Source: 
>     uint256 public total_received;
>     uint256 public token_sold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        161
Source: 
>      */
>     event setOpeningtime(address indexed owner, uint256 openingtime);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        168
Source: 
>      */
>     event setClosingtime(address indexed owner, uint256 closingtime);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        310
Source: 
>     
>     function Purchase(uint256 amount) external onlyWhileOpen returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        355
Source: 
>         
>         uint256 token_amount;
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 a;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        358
Source: 
>         uint256 b;
>         uint256 phase_1 = cap.mul(50).div(100);
>         ^^^^^^^^^^^^^^^
>         uint256 phase_2 = cap.mul(80).div(100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        359
Source: 
>         uint256 phase_1 = cap.mul(50).div(100);
>         uint256 phase_2 = cap.mul(80).div(100);
>         ^^^^^^^^^^^^^^^
>         uint256 phase_3 = cap.mul(100).div(100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        360
Source: 
>         uint256 phase_2 = cap.mul(80).div(100);
>         uint256 phase_3 = cap.mul(100).div(100);
>         ^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        459
Source: 
>      */
>     function MIN_CONTRIBUTION() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return min_contribution;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        465
Source: 
>      */
>     function MAX_CONTRIBUTION() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return max_contribution;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        472
Source: 
>      */
>     function Rate() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rate;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        478
Source: 
>      */
>     function Pause() public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pause;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        324
Source: 
>         
>         pairAddress.transferFrom(msg.sender, address(this), amount.div(1e12));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_received = total_received.add(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        341
Source: 
>     
>         tokenAddress.transfer(msg.sender, tokenReached);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        419
Source: 
>          
>          uint256 balance = pairAddress.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          pairAddress.transfer(msg.sender, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        420
Source: 
>          uint256 balance = pairAddress.balanceOf(address(this));
>          pairAddress.transfer(msg.sender, balance);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          emit WithdrawUSDT(msg.sender,balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        434
Source: 
>          
>          uint256 balance = tokenAddress.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          tokenAddress.transfer(owner, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        435
Source: 
>          uint256 balance = tokenAddress.balanceOf(address(this));
>          tokenAddress.transfer(owner, balance);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          emit WithdrawBMD(msg.sender, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        118
Source: 
>      */
>     IERC20 private tokenAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 private pairAddress;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        119
Source: 
>     IERC20 private tokenAddress;
>     IERC20 private pairAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        124
Source: 
>      */
>     uint256 private start_time;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private end_time;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        125
Source: 
>     uint256 private start_time;
>     uint256 private end_time;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     bool private pause;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        131
Source: 
>      */
>     uint256 private min_contribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private max_contribution;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        132
Source: 
>     uint256 private min_contribution;
>     uint256 private max_contribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public cap;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        133
Source: 
>     uint256 private max_contribution;
>     uint256 public cap;
>     ^^^^^^^^^^^^^^^^^^
>     uint256 private rate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        134
Source: 
>     uint256 public cap;
>     uint256 private rate;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 private price;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        135
Source: 
>     uint256 private rate;
>     uint256 private price;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public token_available;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        136
Source: 
>     uint256 private price;
>     uint256 public token_available;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_received;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        137
Source: 
>     uint256 public token_available;
>     uint256 public total_received;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public token_sold;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        138
Source: 
>     uint256 public total_received;
>     uint256 public token_sold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        325
Source: 
>         pairAddress.transferFrom(msg.sender, address(this), amount.div(1e12));
>         total_received = total_received.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        327
Source: 
>         
>         crowdsaleInfo[crowdsaleid.length].total_received = total_received;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         crowdsaleInfo[crowdsaleid.length].final_price = getPrice();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        328
Source: 
>         crowdsaleInfo[crowdsaleid.length].total_received = total_received;
>         crowdsaleInfo[crowdsaleid.length].final_price = getPrice();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        333
Source: 
>         }
>         userInfo[msg.sender].amount = userInfo[msg.sender].amount.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        335
Source: 
>         
>         token_available = token_available.sub(tokenReached);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token_sold = token_sold.add(tokenReached);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        336
Source: 
>         token_available = token_available.sub(tokenReached);
>         token_sold = token_sold.add(tokenReached);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        338
Source: 
>         
>         crowdsaleInfo[crowdsaleid.length].token_available = token_available;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         crowdsaleInfo[crowdsaleid.length].token_sold = token_sold;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BitmindCrowdsale
Line:        339
Source: 
>         crowdsaleInfo[crowdsaleid.length].token_available = token_available;
>         crowdsaleInfo[crowdsaleid.length].token_sold = token_sold;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BitmindCrowdsale
Line:        324
Source: 
>         
>         pairAddress.transferFrom(msg.sender, address(this), amount.div(1e12));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_received = total_received.add(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BitmindCrowdsale
Line:        341
Source: 
>     
>         tokenAddress.transfer(msg.sender, tokenReached);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BitmindCrowdsale
Line:        420
Source: 
>          uint256 balance = pairAddress.balanceOf(address(this));
>          pairAddress.transfer(msg.sender, balance);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          emit WithdrawUSDT(msg.sender,balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BitmindCrowdsale
Line:        435
Source: 
>          uint256 balance = tokenAddress.balanceOf(address(this));
>          tokenAddress.transfer(owner, balance);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          emit WithdrawBMD(msg.sender, balance);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    BitmindCrowdsale
Line:        500
Source: 
>     function changeOpeningTime(uint256 _time) public onlyOwner returns(bool) {
>         require(_time >= block.timestamp, "BitmindMsg: Opening Time must before current time");
>                          ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BitmindCrowdsale
Line:        100
Source: 
>         require(start_time > 0 && end_time > 0 , 'BitmindMsg: Crowdsale is not started yet');
>         require(block.timestamp > start_time && block.timestamp < end_time, 'BitmindMsg: Crowdsale is not started yet');
>                 ^^^^^^^^^^^^^^^
>         _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    BitmindCrowdsale
Line:        100
Source: 
>         require(start_time > 0 && end_time > 0 , 'BitmindMsg: Crowdsale is not started yet');
>         require(block.timestamp > start_time && block.timestamp < end_time, 'BitmindMsg: Crowdsale is not started yet');
>                                                 ^^^^^^^^^^^^^^^
>         _;

[0m
