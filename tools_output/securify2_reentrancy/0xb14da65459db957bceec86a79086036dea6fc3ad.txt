Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        379
Source: 
> 
>     function init(
>     ^^^^^^^^^^^^^^
>         address _creator,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        394
Source: 
> 
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 18;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        398
Source: 
> 
>     function transfer(address to, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        403
Source: 
> 
>     function balanceOf(address owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        407
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        423
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        429
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        394
Source: 
> 
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 18;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        398
Source: 
> 
>     function transfer(address to, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        403
Source: 
> 
>     function balanceOf(address owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        407
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        423
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InitializableFragERC20
Line:        429
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[owner][spender];

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        212
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InitializableFragERC20
Line:        398
Source: 
> 
>     function transfer(address to, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fragment
Line:        539
Source: 
> 
>     function buyout(address newVaultOwner) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_BUYOUT_TIMESTAMP_ != 0, "DODOFragment: NOT_SUPPORT_BUYOUT");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fragment
Line:        579
Source: 
> 
>     function redeem(address to, bytes calldata data) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_IS_BUYOUT_, "DODOFragment: NEED_BUYOUT");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        379
Source: 
> 
>     function init(
>     ^^^^^^^^^^^^^^
>         address _creator,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        403
Source: 
> 
>     function balanceOf(address owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        423
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        429
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        379
Source: 
> 
>     function init(
>     ^^^^^^^^^^^^^^
>         address _creator,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        403
Source: 
> 
>     function balanceOf(address owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        423
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InitializableFragERC20
Line:        429
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fragment
Line:        495
Source: 
> 
>     function init(
>     ^^^^^^^^^^^^^^
>       address dvm, 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        29
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "MUL_ERROR");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        42
Source: 
>         uint256 quotient = div(a, b);
>         uint256 remainder = a - quotient * b;
>                                 ^^^^^^^^^^^^
>         if (remainder > 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        512
Source: 
>         _DVM_ = dvm;
>         _QUOTE_ = IDVM(_DVM_)._QUOTE_TOKEN_();
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _VAULT_PRE_OWNER_ = vaultPreOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        535
Source: 
>         // init DVM liquidity
>         IDVM(_DVM_).buyShares(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        544
Source: 
> 
>         int buyoutFee = IBuyoutModel(_BUYOUT_MODEL_).getBuyoutStatus(address(this), newVaultOwner);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(buyoutFee != -1, "DODOFragment: USER_UNABLE_BUYOUT");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        549
Source: 
>       
>         _BUYOUT_PRICE_ = IDVM(_DVM_).getMidPrice();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 requireQuote = DecimalMath.mulCeil(_BUYOUT_PRICE_, totalSupply);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        551
Source: 
>         uint256 requireQuote = DecimalMath.mulCeil(_BUYOUT_PRICE_, totalSupply);
>         uint256 payQuote = IERC20(_QUOTE_).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(payQuote >= requireQuote, "DODOFragment: QUOTE_NOT_ENOUGH");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        555
Source: 
>         IDVM(_DVM_).sellShares(
>           IERC20(_DVM_).balanceOf(address(this)),
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           address(this),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        554
Source: 
> 
>         IDVM(_DVM_).sellShares(
>         ^^^^^^^^^^^^^^^^^^^^^^^
>           IERC20(_DVM_).balanceOf(address(this)),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        564
Source: 
>         uint256 redeemFrag = totalSupply.sub(balances[address(this)]).sub(balances[_VAULT_PRE_OWNER_]);
>         uint256 ownerQuoteWithoutFee = IERC20(_QUOTE_).balanceOf(address(this)).sub(DecimalMath.mulCeil(_BUYOUT_PRICE_, redeemFrag));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _clearBalance(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fragment
Line:        573
Source: 
> 
>         ICollateralVault(_COLLATERAL_VAULT_).directTransferOwnership(newVaultOwner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDVM
Line:        279
Source: 
> 
>     function _BASE_TOKEN_() external returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDVM
Line:        281
Source: 
> 
>     function _QUOTE_TOKEN_() external returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDVM
Line:        283
Source: 
> 
>     function _MT_FEE_RATE_MODEL_() external returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDODOCallee
Line:        312
Source: 
> interface IDODOCallee {
>     function DVMSellShareCall(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDODOCallee
Line:        320
Source: 
> 
>     function DVMFlashLoanCall(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDODOCallee
Line:        327
Source: 
> 
>     function DPPFlashLoanCall(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDODOCallee
Line:        334
Source: 
> 
>     function DSPFlashLoanCall(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDODOCallee
Line:        341
Source: 
> 
>     function CPCancelCall(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDODOCallee
Line:        347
Source: 
> 
> 	function CPClaimBidCall(
>  ^^^^^^^^^^^^^^^^^^^^^^^^
>         address sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDODOCallee
Line:        354
Source: 
> 
>     function NFTRedeemCall(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address payable assetTo,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICollateralVault
Line:        451
Source: 
> interface ICollateralVault {
>     function _OWNER_() external returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        472
Source: 
>     
>     bool public _IS_BUYOUT_;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _BUYOUT_TIMESTAMP_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        473
Source: 
>     bool public _IS_BUYOUT_;
>     uint256 public _BUYOUT_TIMESTAMP_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _BUYOUT_PRICE_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        474
Source: 
>     uint256 public _BUYOUT_TIMESTAMP_;
>     uint256 public _BUYOUT_PRICE_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _DISTRIBUTION_RATIO_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        475
Source: 
>     uint256 public _BUYOUT_PRICE_;
>     uint256 public _DISTRIBUTION_RATIO_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        477
Source: 
> 
>     address public _COLLATERAL_VAULT_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _VAULT_PRE_OWNER_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        478
Source: 
>     address public _COLLATERAL_VAULT_;
>     address public _VAULT_PRE_OWNER_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _QUOTE_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        479
Source: 
>     address public _VAULT_PRE_OWNER_;
>     address public _QUOTE_;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address public _DVM_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        480
Source: 
>     address public _QUOTE_;
>     address public _DVM_;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public _DEFAULT_MAINTAINER_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        481
Source: 
>     address public _DVM_;
>     address public _DEFAULT_MAINTAINER_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _BUYOUT_MODEL_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        482
Source: 
>     address public _DEFAULT_MAINTAINER_;
>     address public _BUYOUT_MODEL_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fragment
Line:        484
Source: 
> 
>     bool internal _FRAG_INITIALIZED_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fragment
Line:        512
Source: 
>         _DVM_ = dvm;
>         _QUOTE_ = IDVM(_DVM_)._QUOTE_TOKEN_();
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _VAULT_PRE_OWNER_ = vaultPreOwner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fragment
Line:        544
Source: 
> 
>         int buyoutFee = IBuyoutModel(_BUYOUT_MODEL_).getBuyoutStatus(address(this), newVaultOwner);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(buyoutFee != -1, "DODOFragment: USER_UNABLE_BUYOUT");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fragment
Line:        549
Source: 
>       
>         _BUYOUT_PRICE_ = IDVM(_DVM_).getMidPrice();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 requireQuote = DecimalMath.mulCeil(_BUYOUT_PRICE_, totalSupply);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fragment
Line:        551
Source: 
>         uint256 requireQuote = DecimalMath.mulCeil(_BUYOUT_PRICE_, totalSupply);
>         uint256 payQuote = IERC20(_QUOTE_).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(payQuote >= requireQuote, "DODOFragment: QUOTE_NOT_ENOUGH");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fragment
Line:        555
Source: 
>         IDVM(_DVM_).sellShares(
>           IERC20(_DVM_).balanceOf(address(this)),
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           address(this),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fragment
Line:        564
Source: 
>         uint256 redeemFrag = totalSupply.sub(balances[address(this)]).sub(balances[_VAULT_PRE_OWNER_]);
>         uint256 ownerQuoteWithoutFee = IERC20(_QUOTE_).balanceOf(address(this)).sub(DecimalMath.mulCeil(_BUYOUT_PRICE_, redeemFrag));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _clearBalance(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fragment
Line:        601
Source: 
>         require(!_IS_BUYOUT_, "ALREADY BUYOUT");
>         uint256 price = IDVM(_DVM_).getMidPrice();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         requireQuote = DecimalMath.mulCeil(price, totalSupply);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fragment
Line:        535
Source: 
>         // init DVM liquidity
>         IDVM(_DVM_).buyShares(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fragment
Line:        554
Source: 
> 
>         IDVM(_DVM_).sellShares(
>         ^^^^^^^^^^^^^^^^^^^^^^^
>           IERC20(_DVM_).balanceOf(address(this)),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fragment
Line:        573
Source: 
> 
>         ICollateralVault(_COLLATERAL_VAULT_).directTransferOwnership(newVaultOwner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fragment
Line:        588
Source: 
>         if (data.length > 0) {
>           IDODOCallee(to).NFTRedeemCall(
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        367
Source: 
> 
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        368
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        369
Source: 
>     string public symbol;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        371
Source: 
> 
>     bool public initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        367
Source: 
> 
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        368
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        369
Source: 
>     string public symbol;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InitializableFragERC20
Line:        371
Source: 
> 
>     bool public initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        472
Source: 
>     
>     bool public _IS_BUYOUT_;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _BUYOUT_TIMESTAMP_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        473
Source: 
>     bool public _IS_BUYOUT_;
>     uint256 public _BUYOUT_TIMESTAMP_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _BUYOUT_PRICE_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        474
Source: 
>     uint256 public _BUYOUT_TIMESTAMP_;
>     uint256 public _BUYOUT_PRICE_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _DISTRIBUTION_RATIO_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        475
Source: 
>     uint256 public _BUYOUT_PRICE_;
>     uint256 public _DISTRIBUTION_RATIO_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        477
Source: 
> 
>     address public _COLLATERAL_VAULT_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _VAULT_PRE_OWNER_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        478
Source: 
>     address public _COLLATERAL_VAULT_;
>     address public _VAULT_PRE_OWNER_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _QUOTE_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        479
Source: 
>     address public _VAULT_PRE_OWNER_;
>     address public _QUOTE_;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address public _DVM_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        480
Source: 
>     address public _QUOTE_;
>     address public _DVM_;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public _DEFAULT_MAINTAINER_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        481
Source: 
>     address public _DVM_;
>     address public _DEFAULT_MAINTAINER_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _BUYOUT_MODEL_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        482
Source: 
>     address public _DEFAULT_MAINTAINER_;
>     address public _BUYOUT_MODEL_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fragment
Line:        484
Source: 
> 
>     bool internal _FRAG_INITIALIZED_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DecimalMath
Line:        236
Source: 
> 
>     uint256 internal constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant ONE2 = 10**36;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DecimalMath
Line:        237
Source: 
>     uint256 internal constant ONE = 10**18;
>     uint256 internal constant ONE2 = 10**36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DecimalMath
Line:        236
Source: 
> 
>     uint256 internal constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant ONE2 = 10**36;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DecimalMath
Line:        237
Source: 
>     uint256 internal constant ONE = 10**18;
>     uint256 internal constant ONE2 = 10**36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    InitializableFragERC20
Line:        438
Source: 
> 
>         balances[sender] = balances[sender].sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[recipient] = balances[recipient].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    InitializableFragERC20
Line:        439
Source: 
>         balances[sender] = balances[sender].sub(amount);
>         balances[recipient] = balances[recipient].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fragment
Line:        547
Source: 
> 
>         _IS_BUYOUT_ = true;
>         ^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fragment
Line:        549
Source: 
>       
>         _BUYOUT_PRICE_ = IDVM(_DVM_).getMidPrice();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 requireQuote = DecimalMath.mulCeil(_BUYOUT_PRICE_, totalSupply);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fragment
Line:        607
Source: 
>         uint256 clearBalance = balances[account];
>         balances[account] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^
>         balances[address(0)] = balances[address(0)].add(clearBalance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fragment
Line:        608
Source: 
>         balances[account] = 0;
>         balances[address(0)] = balances[address(0)].add(clearBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), clearBalance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        386
Source: 
>         require(!initialized, "TOKEN_INITIALIZED");
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>         totalSupply = _totalSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        387
Source: 
>         initialized = true;
>         totalSupply = _totalSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_creator] = _totalSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        388
Source: 
>         totalSupply = _totalSupply;
>         balances[_creator] = _totalSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         name = _name;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        389
Source: 
>         balances[_creator] = _totalSupply;
>         name = _name;
>         ^^^^^^^^^^^^
>         symbol = _symbol;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        390
Source: 
>         name = _name;
>         symbol = _symbol;
>         ^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), _creator, _totalSupply);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        424
Source: 
>     function approve(address spender, uint256 amount) public returns (bool) {
>         allowed[msg.sender][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        386
Source: 
>         require(!initialized, "TOKEN_INITIALIZED");
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>         totalSupply = _totalSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        387
Source: 
>         initialized = true;
>         totalSupply = _totalSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_creator] = _totalSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        388
Source: 
>         totalSupply = _totalSupply;
>         balances[_creator] = _totalSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         name = _name;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        389
Source: 
>         balances[_creator] = _totalSupply;
>         name = _name;
>         ^^^^^^^^^^^^
>         symbol = _symbol;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        390
Source: 
>         name = _name;
>         symbol = _symbol;
>         ^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), _creator, _totalSupply);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        438
Source: 
> 
>         balances[sender] = balances[sender].sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[recipient] = balances[recipient].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        439
Source: 
>         balances[sender] = balances[sender].sub(amount);
>         balances[recipient] = balances[recipient].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InitializableFragERC20
Line:        424
Source: 
>     function approve(address spender, uint256 amount) public returns (bool) {
>         allowed[msg.sender][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        508
Source: 
>         require(!_FRAG_INITIALIZED_, "DODOFragment: ALREADY_INITIALIZED");
>         _FRAG_INITIALIZED_ = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        511
Source: 
>         // init local variables
>         _DVM_ = dvm;
>         ^^^^^^^^^^^
>         _QUOTE_ = IDVM(_DVM_)._QUOTE_TOKEN_();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        512
Source: 
>         _DVM_ = dvm;
>         _QUOTE_ = IDVM(_DVM_)._QUOTE_TOKEN_();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _VAULT_PRE_OWNER_ = vaultPreOwner;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        513
Source: 
>         _QUOTE_ = IDVM(_DVM_)._QUOTE_TOKEN_();
>         _VAULT_PRE_OWNER_ = vaultPreOwner;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _COLLATERAL_VAULT_ = collateralVault;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        514
Source: 
>         _VAULT_PRE_OWNER_ = vaultPreOwner;
>         _COLLATERAL_VAULT_ = collateralVault;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _BUYOUT_TIMESTAMP_ = buyoutTimestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        515
Source: 
>         _COLLATERAL_VAULT_ = collateralVault;
>         _BUYOUT_TIMESTAMP_ = buyoutTimestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _DEFAULT_MAINTAINER_ = defaultMaintainer;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        516
Source: 
>         _BUYOUT_TIMESTAMP_ = buyoutTimestamp;
>         _DEFAULT_MAINTAINER_ = defaultMaintainer;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _BUYOUT_MODEL_ = buyoutModel;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        517
Source: 
>         _DEFAULT_MAINTAINER_ = defaultMaintainer;
>         _BUYOUT_MODEL_ = buyoutModel;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _DISTRIBUTION_RATIO_ = distributionRatio;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        518
Source: 
>         _BUYOUT_MODEL_ = buyoutModel;
>         _DISTRIBUTION_RATIO_ = distributionRatio;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        521
Source: 
>         // init FRAG meta data
>         name = string(abi.encodePacked("DODO_FRAG_", _symbol));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // symbol = string(abi.encodePacked("d_", _symbol));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fragment
Line:        523
Source: 
>         // symbol = string(abi.encodePacked("d_", _symbol));
>         symbol = _symbol;
>         ^^^^^^^^^^^^^^^^
>         super.init(address(this), _totalSupply, name, symbol);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        212
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        189
Source: 
>         require(
>             (value == 0) || (token.allowance(address(this), spender) == 0),
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Fragment
Line:        535
Source: 
>         // init DVM liquidity
>         IDVM(_DVM_).buyShares(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Fragment
Line:        554
Source: 
> 
>         IDVM(_DVM_).sellShares(
>         ^^^^^^^^^^^^^^^^^^^^^^^
>           IERC20(_DVM_).balanceOf(address(this)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        189
Source: 
>         require(
>             (value == 0) || (token.allowance(address(this), spender) == 0),
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InitializableFragERC20
Line:        367
Source: 
> 
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InitializableFragERC20
Line:        368
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InitializableFragERC20
Line:        369
Source: 
>     string public symbol;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DecimalMath
Line:        236
Source: 
> 
>     uint256 internal constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant ONE2 = 10**36;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DecimalMath
Line:        237
Source: 
>     uint256 internal constant ONE = 10**18;
>     uint256 internal constant ONE2 = 10**36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Fragment
Line:        475
Source: 
>     uint256 public _BUYOUT_PRICE_;
>     uint256 public _DISTRIBUTION_RATIO_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DecimalMath
Line:        236
Source: 
> 
>     uint256 internal constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant ONE2 = 10**36;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DecimalMath
Line:        237
Source: 
>     uint256 internal constant ONE = 10**18;
>     uint256 internal constant ONE2 = 10**36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Fragment
Line:        541
Source: 
>         require(_BUYOUT_TIMESTAMP_ != 0, "DODOFragment: NOT_SUPPORT_BUYOUT");
>         require(block.timestamp > _BUYOUT_TIMESTAMP_, "DODOFragment: BUYOUT_NOT_START");
>                 ^^^^^^^^^^^^^^^
>         require(!_IS_BUYOUT_, "DODOFragment: ALREADY_BUYOUT");

[0m
