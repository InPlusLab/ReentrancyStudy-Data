Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        70
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        80
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyControllerV2
Line:        193
Source: 
>     
>     function setOneSplit(address _onesplit) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyControllerV2
Line:        198
Source: 
>     
>     function setGovernance(address _governance) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyControllerV2
Line:        222
Source: 
>     
>     function earn(address _vault, uint _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _strategy = strategies[_vault];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyControllerV2
Line:        239
Source: 
>     
>     function inCaseTokensGetStuck(address _token, uint _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyControllerV2
Line:        308
Source: 
>     
>     function withdraw(address _token, uint _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == vaults[_token], "!vault");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        188
Source: 
>     
>     function setSplit(uint _split) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        203
Source: 
>     
>     function setConverter(address _input, address _output, address _converter) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        208
Source: 
>     
>     function setStrategy(address _vault, address _strategy) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        218
Source: 
>     
>     function want(address _vault) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Strategy(strategies[_vault]).want();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        229
Source: 
>     
>     function balanceOf(address _token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Strategy(strategies[_token]).balanceOf();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        233
Source: 
>     
>     function withdrawAll(address _strategy) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        244
Source: 
>     
>     function inCaseStrategyGetStruck(address _strategy, address _token) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        250
Source: 
>     
>     function getExpectedReturn(address _strategy, address _token, uint parts) external view returns (uint expected) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _balance = IERC20(_token).balanceOf(_strategy);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        257
Source: 
>     // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>     function delegatedHarvest(address _strategy, address _token, uint parts) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // This contract should never have value in it, but just incase since this is a public call

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyControllerV2
Line:        283
Source: 
>     // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>     function harvest(address _strategy, address _token, uint parts) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // This contract should never have value in it, but just incase since this is a public call

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyControllerV2
Line:        212
Source: 
>         if (_current != address(0)) {
>            Strategy(_current).withdrawAll();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        259
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Strategy(_strategy).skim(_token);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        261
Source: 
>         Strategy(_strategy).skim(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        267
Source: 
>             uint _expected;
>             _before = IERC20(_want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             IERC20(_token).safeApprove(onesplit, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        272
Source: 
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             _after = IERC20(_want).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        285
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        287
Source: 
>         Strategy(_strategy).withdraw(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        293
Source: 
>             uint _expected;
>             _before = IERC20(_want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             IERC20(_token).safeApprove(onesplit, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StrategyControllerV2
Line:        298
Source: 
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             _after = IERC20(_want).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_after > _before) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        80
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        180
Source: 
>     uint public split = 500;
>     uint public constant max = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        210
Source: 
>         require(msg.sender == governance, "!governance");
>         address _current = strategies[_vault];
>         ^^^^^^^^^^^^^^^^
>         if (_current != address(0)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        223
Source: 
>     function earn(address _vault, uint _amount) public {
>         address _strategy = strategies[_vault];
>         ^^^^^^^^^^^^^^^^^
>         address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        224
Source: 
>         address _strategy = strategies[_vault];
>         address _want = Strategy(_strategy).want();
>         ^^^^^^^^^^^^^
>         IERC20(_want).safeTransfer(_strategy, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        251
Source: 
>     function getExpectedReturn(address _strategy, address _token, uint parts) external view returns (uint expected) {
>         uint _balance = IERC20(_token).balanceOf(_strategy);
>         ^^^^^^^^^^^^^
>         address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        252
Source: 
>         uint _balance = IERC20(_token).balanceOf(_strategy);
>         address _want = Strategy(_strategy).want();
>         ^^^^^^^^^^^^^
>         (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        259
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         Strategy(_strategy).skim(_token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        261
Source: 
>         Strategy(_strategy).skim(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>         ^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        263
Source: 
>         if (_after > _before) {
>             uint _amount = _after.sub(_before);
>             ^^^^^^^^^^^^
>             address _want = Vault(vaults[_strategy]).token();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        264
Source: 
>             uint _amount = _after.sub(_before);
>             address _want = Vault(vaults[_strategy]).token();
>             ^^^^^^^^^^^^^
>             uint[] memory _distribution;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        265
Source: 
>             address _want = Vault(vaults[_strategy]).token();
>             uint[] memory _distribution;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint _expected;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        266
Source: 
>             uint[] memory _distribution;
>             uint _expected;
>             ^^^^^^^^^^^^^^
>             _before = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        275
Source: 
>                 _amount = _after.sub(_before);
>                 uint _reward = _amount.mul(split).div(max);
>                 ^^^^^^^^^^^^
>                 IERC20(_want).safeTransfer(vaults[_strategy], _amount.sub(_reward));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        285
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        287
Source: 
>         Strategy(_strategy).withdraw(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>         ^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        289
Source: 
>         if (_after > _before) {
>             uint _amount = _after.sub(_before);
>             ^^^^^^^^^^^^
>             address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        290
Source: 
>             uint _amount = _after.sub(_before);
>             address _want = Strategy(_strategy).want();
>             ^^^^^^^^^^^^^
>             uint[] memory _distribution;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        291
Source: 
>             address _want = Strategy(_strategy).want();
>             uint[] memory _distribution;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint _expected;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        292
Source: 
>             uint[] memory _distribution;
>             uint _expected;
>             ^^^^^^^^^^^^^^
>             _before = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyControllerV2
Line:        301
Source: 
>                 _amount = _after.sub(_before);
>                 uint _reward = _amount.mul(split).div(max);
>                 ^^^^^^^^^^^^
>                 earn(_want, _amount.sub(_reward));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        224
Source: 
>         address _strategy = strategies[_vault];
>         address _want = Strategy(_strategy).want();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(_want).safeTransfer(_strategy, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        247
Source: 
>         Strategy(_strategy).withdraw(_token);
>         IERC20(_token).safeTransfer(governance, IERC20(_token).balanceOf(address(this)));
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        252
Source: 
>         uint _balance = IERC20(_token).balanceOf(_strategy);
>         address _want = Strategy(_strategy).want();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        259
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Strategy(_strategy).skim(_token);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        261
Source: 
>         Strategy(_strategy).skim(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        264
Source: 
>             uint _amount = _after.sub(_before);
>             address _want = Vault(vaults[_strategy]).token();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint[] memory _distribution;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        267
Source: 
>             uint _expected;
>             _before = IERC20(_want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             IERC20(_token).safeApprove(onesplit, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        272
Source: 
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             _after = IERC20(_want).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_after > _before) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        98
Source: 
>     function safeApprove(IERC20 token, address spender, uint256 value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        285
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        287
Source: 
>         Strategy(_strategy).withdraw(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        290
Source: 
>             uint _amount = _after.sub(_before);
>             address _want = Strategy(_strategy).want();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint[] memory _distribution;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        293
Source: 
>             uint _expected;
>             _before = IERC20(_want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             IERC20(_token).safeApprove(onesplit, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyControllerV2
Line:        298
Source: 
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             _after = IERC20(_want).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        212
Source: 
>         if (_current != address(0)) {
>            Strategy(_current).withdrawAll();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        219
Source: 
>     function want(address _vault) external view returns (address) {
>         return Strategy(strategies[_vault]).want();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        226
Source: 
>         IERC20(_want).safeTransfer(_strategy, _amount);
>         Strategy(_strategy).deposit();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        230
Source: 
>     function balanceOf(address _token) external view returns (uint) {
>         return Strategy(strategies[_token]).balanceOf();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        236
Source: 
>         // WithdrawAll sends 'want' to 'vault'
>         Strategy(_strategy).withdrawAll();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        246
Source: 
>         require(msg.sender == governance, "!governance");
>         Strategy(_strategy).withdraw(_token);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(_token).safeTransfer(governance, IERC20(_token).balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        251
Source: 
>     function getExpectedReturn(address _strategy, address _token, uint parts) external view returns (uint expected) {
>         uint _balance = IERC20(_token).balanceOf(_strategy);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        253
Source: 
>         address _want = Strategy(_strategy).want();
>         (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        260
Source: 
>         uint _before = IERC20(_token).balanceOf(address(this));
>         Strategy(_strategy).skim(_token);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after =  IERC20(_token).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        270
Source: 
>             IERC20(_token).safeApprove(onesplit, _amount);
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        271
Source: 
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        286
Source: 
>         uint _before = IERC20(_token).balanceOf(address(this));
>         Strategy(_strategy).withdraw(_token);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after =  IERC20(_token).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        296
Source: 
>             IERC20(_token).safeApprove(onesplit, _amount);
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        297
Source: 
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyControllerV2
Line:        310
Source: 
>         require(msg.sender == vaults[_token], "!vault");
>         Strategy(strategies[_token]).withdraw(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        71
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyControllerV2
Line:        212
Source: 
>         if (_current != address(0)) {
>            Strategy(_current).withdrawAll();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyControllerV2
Line:        236
Source: 
>         // WithdrawAll sends 'want' to 'vault'
>         Strategy(_strategy).withdrawAll();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyControllerV2
Line:        271
Source: 
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyControllerV2
Line:        297
Source: 
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        80
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
