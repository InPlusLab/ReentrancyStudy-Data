Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedERC20
Line:        346
Source: 
>    */
>   function base() public view override returns (IERC20) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return base_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedERC20
Line:        353
Source: 
>    */
>   function deposit(uint256 _value) public override returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return depositTo(msg.sender, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WrappedERC20
Line:        380
Source: 
>    */
>   function withdraw(uint256 _value) public override returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return withdrawFrom(msg.sender, msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenERC20
Line:        254
Source: 
> 
>   function increaseApproval(address _spender, uint _addedValue)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external override returns (bool)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WrappedERC20
Line:        353
Source: 
>    */
>   function deposit(uint256 _value) public override returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return depositTo(msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WrappedERC20
Line:        380
Source: 
>    */
>   function withdraw(uint256 _value) public override returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return withdrawFrom(msg.sender, msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WrappedERC20
Line:        387
Source: 
>    */
>   function withdrawFrom(address _from, address _to, uint256 _value) public override returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_to != address(0), "WE01");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        214
Source: 
> 
>   function balanceOf(address _owner) external override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        218
Source: 
> 
>   function allowance(address _owner, address _spender)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external override view returns (uint256)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        248
Source: 
> 
>   function approve(address _spender, uint256 _value) external override returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        214
Source: 
> 
>   function balanceOf(address _owner) external override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        218
Source: 
> 
>   function allowance(address _owner, address _spender)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external override view returns (uint256)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        248
Source: 
> 
>   function approve(address _spender, uint256 _value) external override returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedERC20
Line:        362
Source: 
>     require(_to != address(0), "WE01");
>     uint256 initialBalance = base_.balanceOf(address(this)); // check existing base token balance
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(base_.transferFrom(msg.sender, address(this), _value), "WE02");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedERC20
Line:        363
Source: 
>     uint256 initialBalance = base_.balanceOf(address(this)); // check existing base token balance
>     require(base_.transferFrom(msg.sender, address(this), _value), "WE02");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 newBalance = base_.balanceOf(address(this)); // check new base token balance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedERC20
Line:        364
Source: 
>     require(base_.transferFrom(msg.sender, address(this), _value), "WE02");
>     uint256 newBalance = base_.balanceOf(address(this)); // check new base token balance
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WrappedERC20
Line:        401
Source: 
> 
>     require(base_.transfer(_to, _value), "WE05");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WrappedERC20
Line:        339
Source: 
>   {
>     ratio_ = 10 ** _decimals.sub(_base.decimals());
>                                  ^^^^^^^^^^^^^^^^
>     base_ = _base;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WrappedERC20
Line:        362
Source: 
>     require(_to != address(0), "WE01");
>     uint256 initialBalance = base_.balanceOf(address(this)); // check existing base token balance
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(base_.transferFrom(msg.sender, address(this), _value), "WE02");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WrappedERC20
Line:        363
Source: 
>     uint256 initialBalance = base_.balanceOf(address(this)); // check existing base token balance
>     require(base_.transferFrom(msg.sender, address(this), _value), "WE02");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 newBalance = base_.balanceOf(address(this)); // check new base token balance

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WrappedERC20
Line:        364
Source: 
>     require(base_.transferFrom(msg.sender, address(this), _value), "WE02");
>     uint256 newBalance = base_.balanceOf(address(this)); // check new base token balance
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WrappedERC20
Line:        401
Source: 
> 
>     require(base_.transfer(_to, _value), "WE05");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WrappedERC20
Line:        325
Source: 
> 
>   IERC20 internal base_;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal ratio_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WrappedERC20
Line:        326
Source: 
>   IERC20 internal base_;
>   uint256 internal ratio_;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WrappedERC20
Line:        372
Source: 
>     balances[_to] = balances[_to].add(wrappedValue);
>     totalSupply_ = totalSupply_.add(wrappedValue);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(address(0), _to, wrappedValue);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenERC20
Line:        249
Source: 
>   function approve(address _spender, uint256 _value) external override returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenERC20
Line:        257
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenERC20
Line:        249
Source: 
>   function approve(address _spender, uint256 _value) external override returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenERC20
Line:        257
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WrappedERC20
Line:        371
Source: 
>     uint256 wrappedValue = _value.mul(ratio_);
>     balances[_to] = balances[_to].add(wrappedValue);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalSupply_ = totalSupply_.add(wrappedValue);

[0m
