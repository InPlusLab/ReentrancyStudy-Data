pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MOAPSale
Line:        102
Source: 
>     
>     function setTokenAddress(address tokenContract) external onlyOwner{
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddress == address(0), "Token address already set");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        81
Source: 
>     function burnTokens(uint256 _amount) external;
>     function balanceOf(address tokenOwner) external view returns (uint256 balance);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        81
Source: 
>     function burnTokens(uint256 _amount) external;
>     function balanceOf(address tokenOwner) external view returns (uint256 balance);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MOAPSale
Line:        112
Source: 
> 
>     receive() external payable{
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(saleOpen, "Sale is closed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MOAPSale
Line:        126
Source: 
>     
>     function getTokenAmount(uint256 amount) internal view returns(uint256){
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (amount.mul(tokenRatePerEth)).div(10**2);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    MOAPSale
Line:        132
Source: 
>         require(!saleOpen, "Sale is closed");
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Owned
Line:        72
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>                                                                      ^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MOAPSale
Line:        99
Source: 
>         require(!saleOpen, "Sale is open");
>         saleOpen = true;
>      ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MOAPSale
Line:        102
Source: 
>     
>     function setTokenAddress(address tokenContract) external onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddress == address(0), "Token address already set");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MOAPSale
Line:        102
Source: 
>     
>     function setTokenAddress(address tokenContract) external onlyOwner{
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddress == address(0), "Token address already set");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MOAPSale
Line:        102
Source: 
>     
>     function setTokenAddress(address tokenContract) external onlyOwner{
>                                                                        
>         require(tokenAddress == address(0), "Token address already set");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MOAPSale
Line:        132
Source: 
>         require(!saleOpen, "Sale is closed");
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MOAPSale
Line:        132
Source: 
>         require(!saleOpen, "Sale is closed");
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MOAPSale
Line:        126
Source: 
>     
>     function getTokenAmount(uint256 amount) internal view returns(uint256){
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (amount.mul(tokenRatePerEth)).div(10**2);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MOAPSale
Line:        134
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                        

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MOAPSale
Line:        134
Source: 
>     }
> }
>                                                                                                                                                                                                                                        

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MOAPSale
Line:        99
Source: 
>         require(!saleOpen, "Sale is open");
>         saleOpen = true;
>      ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MOAPSale
Line:        102
Source: 
>     
>     function setTokenAddress(address tokenContract) external onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^
>         require(tokenAddress == address(0), "Token address already set");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MOAPSale
Line:        132
Source: 
>         require(!saleOpen, "Sale is closed");
>         IToken(tokenAddress).burnTokens(IToken(tokenAddress).balanceOf(address(this)));   
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
