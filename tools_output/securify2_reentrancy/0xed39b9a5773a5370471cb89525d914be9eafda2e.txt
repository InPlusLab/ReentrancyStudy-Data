[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Esm
Line:        191
Source: 
>     function shutdown() external onlyWhiter {
>         require(time == 0, "System closed yet.");
>                 ^^^^^^^^^
>         tokenStake.updateIndex();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhiteList
Line:        81
Source: 
>      */
>     function removeWhiter(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhiteList
Line:        101
Source: 
>      */
>     function isWhiter() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isWhiter(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Esm
Line:        133
Source: 
>      */
>     function setupTokenStake(address _tokenStake) public onlyWhiter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenStake = ITokenStake(_tokenStake);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        14
Source: 
> 
>     function nominateNewOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nominatedOwner = _owner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WhiteList
Line:        81
Source: 
>      */
>     function removeWhiter(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WhiteList
Line:        94
Source: 
>      */
>     function isWhiter(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return whiter[account] == 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Esm
Line:        133
Source: 
>      */
>     function setupTokenStake(address _tokenStake) public onlyWhiter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenStake = ITokenStake(_tokenStake);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    Esm
Line:        192
Source: 
>         require(time == 0, "System closed yet.");
>         tokenStake.updateIndex();
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         time = block.timestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        2
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity >=0.5.0 <=0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Esm
Line:        192
Source: 
>         require(time == 0, "System closed yet.");
>         tokenStake.updateIndex();
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         time = block.timestamp;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        6
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Esm
Line:        117
Source: 
>     /// @notice System closed time
>     uint256 public time;
>     ^^^^^^^^^^^^^^^^^^^
>     /// @notice TokenStake for updating on closed

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Esm
Line:        119
Source: 
>     /// @notice TokenStake for updating on closed
>     ITokenStake public tokenStake;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Esm
Line:        134
Source: 
>     function setupTokenStake(address _tokenStake) public onlyWhiter {
>         tokenStake = ITokenStake(_tokenStake);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Esm
Line:        141
Source: 
>     function openStake() external onlyWhiter {
>         stakeLive = 1;
>         ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Esm
Line:        148
Source: 
>     function pauseStake() external onlyWhiter {
>         stakeLive = 0;
>         ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Esm
Line:        155
Source: 
>     function openRedeem() external onlyWhiter {
>         redeemLive = 1;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Esm
Line:        162
Source: 
>     function pauseRedeem() external onlyWhiter {
>         redeemLive = 0;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Esm
Line:        193
Source: 
>         tokenStake.updateIndex();
>         time = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit ShutDown(block.number, time);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Esm
Line:        193
Source: 
>         tokenStake.updateIndex();
>         time = block.timestamp;
>                ^^^^^^^^^^^^^^^
>         emit ShutDown(block.number, time);

[0m
