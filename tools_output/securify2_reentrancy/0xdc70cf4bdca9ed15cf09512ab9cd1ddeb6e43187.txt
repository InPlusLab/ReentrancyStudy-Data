[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SuperNodes
Line:        75
Source: 
> 
>     function buyNode( uint level) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(level != 0, "!0 level");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SuperNodes
Line:        92
Source: 
> 
>     function withdraw(uint value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint max = withdrawAble(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SuperNodes
Line:        131
Source: 
> 
>     function nextTime(address addr) public view returns (uint){
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint inDate = accountDateMap[addr];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperNodes
Line:        80
Source: 
>         uint cost = incomes[level];
>         uint allowed = bcoin.allowance(msg.sender,address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balanced = bcoin.balanceOf(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperNodes
Line:        81
Source: 
>         uint allowed = bcoin.allowance(msg.sender,address(this));
>         uint balanced = bcoin.balanceOf(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed >= cost, "!allowed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperNodes
Line:        84
Source: 
>         require(balanced >= cost, "!balanced");
>         bcoin.transferFrom( msg.sender,address(this), cost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SuperNodes
Line:        96
Source: 
>         accountWithdrawMap[msg.sender] = accountWithdrawMap[msg.sender].add(value);
>         bcoin.transfer( msg.sender, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(msg.sender, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SuperNodes
Line:        100
Source: 
> 
>     function withdrawAble(address addr) public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint round = getCurrentRound(addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SuperNodes
Line:        80
Source: 
>         uint cost = incomes[level];
>         uint allowed = bcoin.allowance(msg.sender,address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balanced = bcoin.balanceOf(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SuperNodes
Line:        81
Source: 
>         uint allowed = bcoin.allowance(msg.sender,address(this));
>         uint balanced = bcoin.balanceOf(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed >= cost, "!allowed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SuperNodes
Line:        84
Source: 
>         require(balanced >= cost, "!balanced");
>         bcoin.transferFrom( msg.sender,address(this), cost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SuperNodes
Line:        66
Source: 
> 
>     uint[] public incomes = [0,50000 ether,100000 ether,200000 ether,1000000 ether];
>                                            ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SuperNodes
Line:        66
Source: 
> 
>     uint[] public incomes = [0,50000 ether,100000 ether,200000 ether,1000000 ether];
>                                                         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SuperNodes
Line:        66
Source: 
> 
>     uint[] public incomes = [0,50000 ether,100000 ether,200000 ether,1000000 ether];
>                                                                      ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SuperNodes
Line:        80
Source: 
>         uint cost = incomes[level];
>         uint allowed = bcoin.allowance(msg.sender,address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balanced = bcoin.balanceOf(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SuperNodes
Line:        81
Source: 
>         uint allowed = bcoin.allowance(msg.sender,address(this));
>         uint balanced = bcoin.balanceOf(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed >= cost, "!allowed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SuperNodes
Line:        84
Source: 
>         require(balanced >= cost, "!balanced");
>         bcoin.transferFrom( msg.sender,address(this), cost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SuperNodes
Line:        96
Source: 
>         accountWithdrawMap[msg.sender] = accountWithdrawMap[msg.sender].add(value);
>         bcoin.transfer( msg.sender, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(msg.sender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SuperNodes
Line:        119
Source: 
>         uint begin =  inDate + 90 days;
>         if(begin >= block.timestamp){
>                                       
>             return 1;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SuperNodes
Line:        124
Source: 
>             uint next = begin + (30 days)*i;
>             if(next >= block.timestamp){
>                                          
>                 return i+1;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SuperNodes
Line:        137
Source: 
>         uint begin =  inDate + 90 days;
>         if(begin >= block.timestamp){
>                                       
>             return begin;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SuperNodes
Line:        142
Source: 
>             uint next = begin + (30 days)*i;
>             if(next >= block.timestamp){
>                                          
>                 return next;

[0m
