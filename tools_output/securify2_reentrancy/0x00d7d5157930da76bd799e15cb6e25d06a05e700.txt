Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Airdrop
Line:        39
Source: 
>         require(registrants[msg.sender].canClaim);
>         token.transfer(msg.sender, canClaim(msg.sender) * token.balanceOf(address(this)) / totalClaims);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrants[msg.sender].status = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Airdrop
Line:        33
Source: 
>     Token token;
>     address public tokenAddr = 0xd254fdE0eee65F3b75D01F5247bA260630A14B18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Airdrop
Line:        70
Source: 
>     
>     function calcStandardClaim() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 1000 * token.balanceOf(address(this)) / totalClaims;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Airdrop
Line:        74
Source: 
>     
>     function finishVerification() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Airdrop
Line:        81
Source: 
>     
>     function finishVerificationManual(uint256 _totalClaims) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Airdrop
Line:        87
Source: 
>     }
>     function startVerification() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Airdrop
Line:        148
Source: 
>     
>     function registerManual(address payable _addr, bytes32 referrer, bytes32 telegramHash) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Airdrop
Line:        160
Source: 
>     
>     function getAddress(bytes32 telegramHash) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        188
Source: 
>     mapping(address => uint256) public balanceOf;
>     function transfer(address to, uint256 value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Airdrop
Line:        39
Source: 
>         require(registrants[msg.sender].canClaim);
>         token.transfer(msg.sender, canClaim(msg.sender) * token.balanceOf(address(this)) / totalClaims);
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrants[msg.sender].status = 2;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Airdrop
Line:        39
Source: 
>         require(registrants[msg.sender].canClaim);
>         token.transfer(msg.sender, canClaim(msg.sender) * token.balanceOf(address(this)) / totalClaims);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrants[msg.sender].status = 2;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Airdrop
Line:        71
Source: 
>     function calcStandardClaim() public view returns(uint256) {
>         return 1000 * token.balanceOf(address(this)) / totalClaims;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Airdrop
Line:        157
Source: 
>         //add mintime
>         token.transfer(msg.sender, token.balanceOf(address(this)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Airdrop
Line:        157
Source: 
>         //add mintime
>         token.transfer(msg.sender, token.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Airdrop
Line:        81
Source: 
>     
>     function finishVerificationManual(uint256 _totalClaims) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Airdrop
Line:        92
Source: 
>     
>     function canClaimtelegramHash(bytes32 telegramHash) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return canClaim(nameToAddress[telegramHash]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Airdrop
Line:        144
Source: 
>     
>     function register(bytes32 referrer, bytes32 telegramHash) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _register(msg.sender, referrer, telegramHash);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Airdrop
Line:        148
Source: 
>     
>     function registerManual(address payable _addr, bytes32 referrer, bytes32 telegramHash) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Airdrop
Line:        166
Source: 
>     
>     function setParams(uint256[4] memory _params) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Airdrop
Line:        160
Source: 
>     
>     function getAddress(bytes32 telegramHash) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chairman);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        188
Source: 
>     mapping(address => uint256) public balanceOf;
>     function transfer(address to, uint256 value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Airdrop
Line:        174
Source: 
>         registrationsOpen = true;
>         uint256[4] memory _params;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _params[0] = 200;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.4.22 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Airdrop
Line:        9
Source: 
>     
>     address payable chairman;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => Registrant) public registrants;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Airdrop
Line:        13
Source: 
>     uint256 public nRegistrants;
>     mapping(bytes32 => address) nameToAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public registrationsOpen;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Airdrop
Line:        32
Source: 
>     
>     Token token;
>     ^^^^^^^^^^^
>     address public tokenAddr = 0xd254fdE0eee65F3b75D01F5247bA260630A14B18;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Airdrop
Line:        39
Source: 
>         require(registrants[msg.sender].canClaim);
>         token.transfer(msg.sender, canClaim(msg.sender) * token.balanceOf(address(this)) / totalClaims);
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrants[msg.sender].status = 2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Airdrop
Line:        157
Source: 
>         //add mintime
>         token.transfer(msg.sender, token.balanceOf(address(this)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Airdrop
Line:        39
Source: 
>         require(registrants[msg.sender].canClaim);
>         token.transfer(msg.sender, canClaim(msg.sender) * token.balanceOf(address(this)) / totalClaims);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrants[msg.sender].status = 2;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Airdrop
Line:        71
Source: 
>     function calcStandardClaim() public view returns(uint256) {
>         return 1000 * token.balanceOf(address(this)) / totalClaims;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Airdrop
Line:        157
Source: 
>         //add mintime
>         token.transfer(msg.sender, token.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Airdrop
Line:        175
Source: 
>         uint256[4] memory _params;
>         _params[0] = 200;
>         ^^^^^^^
>         _params[1] = 400;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Airdrop
Line:        15
Source: 
>     bool public registrationsOpen;
>     uint256 public maxReferrals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public maxReferrer;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Airdrop
Line:        16
Source: 
>     uint256 public maxReferrals;
>     address public maxReferrer;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalClaims;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Airdrop
Line:        17
Source: 
>     address public maxReferrer;
>     uint256 public totalClaims;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[4] public params;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Airdrop
Line:        39
Source: 
>         require(registrants[msg.sender].canClaim);
>         token.transfer(msg.sender, canClaim(msg.sender) * token.balanceOf(address(this)) / totalClaims);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrants[msg.sender].status = 2;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Airdrop
Line:        157
Source: 
>         //add mintime
>         token.transfer(msg.sender, token.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        187
Source: 
> contract Token {
>     mapping(address => uint256) public balanceOf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address to, uint256 value) public returns (bool success) {

[0m
