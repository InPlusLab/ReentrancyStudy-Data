Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Vesting
Line:        179
Source: 
>     {
>         require(releaseEnd == 0, "Contract is already initialized.");
>                 ^^^^^^^^^^^^^^^
>         require(_recipients.length == _grantedToken.length, "Array lengths do not match.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Vesting
Line:        197
Source: 
>         // We're gonna just set the weight as full tokens. Ensures grantedToken were entered correctly as well.
>         require(sum == totalTokens, "Weight does not match tokens being distributed.");
>                 ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        97
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        102
Source: 
>         uint256 c = a * b;
>         require(c / a == b);
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Vesting
Line:        169
Source: 
>     // do not input same recipient in the _recipients, it will lead to locked token in this contract
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Vesting
Line:        203
Source: 
>     **/
>     function claim()
>     ^^^^^^^^^^^^^^^^
>       public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Vesting
Line:        186
Source: 
>         token = IERC20(_token);
>         token.transferFrom(msg.sender, address(this), _totalTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalTokens = _totalTokens;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Vesting
Line:        223
Source: 
>         starts[user] = block.timestamp;
>         token.transfer(user, claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Claimed(user, claimAmount, block.timestamp);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vesting
Line:        231
Source: 
>     **/
>     function claimableAmount(address _user) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return released[_user].add(releasable(_user));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vesting
Line:        239
Source: 
>     **/
>     function releasable(address _user) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp < releaseStart) return 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vesting
Line:        250
Source: 
>     **/
>     function transfer(address _to, uint256 _amountInFullTokens)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vesting
Line:        169
Source: 
>     // do not input same recipient in the _recipients, it will lead to locked token in this contract
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        101
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vesting
Line:        186
Source: 
>         token = IERC20(_token);
>         token.transferFrom(msg.sender, address(this), _totalTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalTokens = _totalTokens;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vesting
Line:        223
Source: 
>         starts[user] = block.timestamp;
>         token.transfer(user, claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Claimed(user, claimAmount, block.timestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vesting
Line:        186
Source: 
>         token = IERC20(_token);
>         token.transferFrom(msg.sender, address(this), _totalTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalTokens = _totalTokens;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vesting
Line:        223
Source: 
>         starts[user] = block.timestamp;
>         token.transfer(user, claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Claimed(user, claimAmount, block.timestamp);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Vesting
Line:        153
Source: 
> 
>     IERC20 public token;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Vesting
Line:        155
Source: 
> 
>     uint256 public totalTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public releaseStart;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Vesting
Line:        156
Source: 
>     uint256 public totalTokens;
>     uint256 public releaseStart;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public releaseEnd;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Vesting
Line:        157
Source: 
>     uint256 public releaseStart;
>     uint256 public releaseEnd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vesting
Line:        182
Source: 
> 
>         releaseEnd = _start.add(_period);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         releaseStart = _start;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vesting
Line:        183
Source: 
>         releaseEnd = _start.add(_period);
>         releaseStart = _start;
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vesting
Line:        185
Source: 
> 
>         token = IERC20(_token);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         token.transferFrom(msg.sender, address(this), _totalTokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vesting
Line:        187
Source: 
>         token.transferFrom(msg.sender, address(this), _totalTokens);
>         totalTokens = _totalTokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 sum = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vesting
Line:        191
Source: 
>         for(uint256 i = 0; i<_recipients.length; i++) {
>             starts[_recipients[i]] = releaseStart;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             grantedToken[_recipients[i]] = _grantedToken[i];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vesting
Line:        192
Source: 
>             starts[_recipients[i]] = releaseStart;
>             grantedToken[_recipients[i]] = _grantedToken[i];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sum = sum.add(_grantedToken[i]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vesting
Line:        255
Source: 
>         released[msg.sender] = released[msg.sender].add(releasable(msg.sender));
>         released[_to] = released[_to].add(releasable(_to));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vesting
Line:        259
Source: 
>         grantedToken[msg.sender] = grantedToken[msg.sender].sub(releasable(msg.sender));
>         grantedToken[_to] = grantedToken[_to].sub(releasable(_to));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vesting
Line:        263
Source: 
>         starts[msg.sender] = block.timestamp;
>         starts[_to] = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vesting
Line:        270
Source: 
>         grantedToken[msg.sender] = grantedToken[msg.sender].sub(amount);
>         grantedToken[_to] = grantedToken[_to].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Vesting
Line:        186
Source: 
>         token = IERC20(_token);
>         token.transferFrom(msg.sender, address(this), _totalTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalTokens = _totalTokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Vesting
Line:        223
Source: 
>         starts[user] = block.timestamp;
>         token.transfer(user, claimAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Claimed(user, claimAmount, block.timestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Vesting
Line:        240
Source: 
>     function releasable(address _user) public view returns(uint256) {
>         if (block.timestamp < releaseStart) return 0;
>             ^^^^^^^^^^^^^^^
>         uint256 applicableTimeStamp = block.timestamp >= releaseEnd ? releaseEnd : block.timestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Vesting
Line:        241
Source: 
>         if (block.timestamp < releaseStart) return 0;
>         uint256 applicableTimeStamp = block.timestamp >= releaseEnd ? releaseEnd : block.timestamp;
>                                       ^^^^^^^^^^^^^^^
>         return grantedToken[_user].mul(applicableTimeStamp.sub(starts[_user])).div(releaseEnd.sub(starts[_user]));

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Vesting
Line:        241
Source: 
>         if (block.timestamp < releaseStart) return 0;
>         uint256 applicableTimeStamp = block.timestamp >= releaseEnd ? releaseEnd : block.timestamp;
>                                                                                    ^^^^^^^^^^^^^^^
>         return grantedToken[_user].mul(applicableTimeStamp.sub(starts[_user])).div(releaseEnd.sub(starts[_user]));

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Vesting
Line:        208
Source: 
> 
>         require(releaseStart <= block.timestamp, "Release has not started");
>                                 ^^^^^^^^^^^^^^^
>         require(grantedToken[user] > 0 || released[user] > 0, "This contract may only be called by users with a stake.");

[0m
