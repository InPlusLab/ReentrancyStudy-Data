Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    random
Line:        355
Source: 
>         uint256 id;
>         assembly {
>          ^^^^^^^^^
>             id := chainid()

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        210
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        219
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        210
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        219
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    random
Line:        375
Source: 
> 
>     function requestRandomNumber( ) public onlyAuth returns (bytes32) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    random
Line:        387
Source: 
> 
>     function requestRandomNumberWithCallback( ) public onlyAuth returns (bytes32) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VRFConsumerBase
Line:        313
Source: 
>   // the origin of the call
>   function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    random
Line:        404
Source: 
> 
>     function randomNumber(bytes32 requestId) external view returns (uint256 randomNum) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(this.isRequestComplete(requestId), "Not ready");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    random
Line:        370
Source: 
> 
>     function setAuth(address user, bool auth) public onlyOwner {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorised[user] = auth;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    random
Line:        400
Source: 
> 
>     function isRequestComplete(bytes32 requestId) external view returns (bool isCompleted) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return responded[requestId];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    random
Line:        389
Source: 
>        require(
>            LINK.balanceOf(address(this)) >= fee,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            "Not enough LINK - fill contract with faucet"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VRFConsumerBase
Line:        291
Source: 
> 
>   LinkTokenInterface immutable internal LINK;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address immutable private vrfCoordinator;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    xERC20
Line:        319
Source: 
> 
> abstract contract xERC20 {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address,uint256) public virtual returns (bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    requestor
Line:        324
Source: 
> 
> interface requestor {
>  ^^^^^^^^^^^^^^^^^^^^
>     function process(uint256 rand, bytes32 requestId) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    random
Line:        328
Source: 
> 
> contract random is VRFConsumerBase, Ownable {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    random
Line:        339
Source: 
> 
>     mapping(address => bool)    authorised;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    random
Line:        424
Source: 
>         if (address(token) == 0x0000000000000000000000000000000000000000) {
>             payable(owner()).transfer(address(this).balance);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    random
Line:        424
Source: 
>         if (address(token) == 0x0000000000000000000000000000000000000000) {
>             payable(owner()).transfer(address(this).balance);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    random
Line:        424
Source: 
>         if (address(token) == 0x0000000000000000000000000000000000000000) {
>             payable(owner()).transfer(address(this).balance);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    random
Line:        377
Source: 
>        require(
>            LINK.balanceOf(address(this)) >= fee,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            "Not enough LINK - fill contract with faucet"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    random
Line:        389
Source: 
>        require(
>            LINK.balanceOf(address(this)) >= fee,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            "Not enough LINK - fill contract with faucet"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    random
Line:        405
Source: 
>     function randomNumber(bytes32 requestId) external view returns (uint256 randomNum) {
>         require(this.isRequestComplete(requestId), "Not ready");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return responses[requestId];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    random
Line:        426
Source: 
>         } else {
>             token.transfer(owner(),token.balanceOf(address(this)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VRFConsumerBase
Line:        276
Source: 
>   {
>     LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // This is the seed passed to VRFCoordinator. The oracle will mix this with

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    random
Line:        417
Source: 
>         if (callbacks[requestId]!= address(0)) {
>             requestor(callbacks[requestId]).process(_randomNumber, requestId);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    random
Line:        426
Source: 
>         } else {
>             token.transfer(owner(),token.balanceOf(address(this)));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    random
Line:        358
Source: 
>         }
>         if (id == 4) {
>              ^^
>             keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    random
Line:        336
Source: 
> 
>     bytes32                     public keyHash;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256                     public fee;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    random
Line:        337
Source: 
>     bytes32                     public keyHash;
>     uint256                     public fee;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VRFConsumerBase
Line:        287
Source: 
>     // requests appeared in the same block.
>     nonces[_keyHash] = nonces[_keyHash].add(1);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return makeRequestId(_keyHash, vRFSeed);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VRFConsumerBase
Line:        276
Source: 
>   {
>     LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // This is the seed passed to VRFCoordinator. The oracle will mix this with

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    random
Line:        424
Source: 
>         if (address(token) == 0x0000000000000000000000000000000000000000) {
>             payable(owner()).transfer(address(this).balance);
>                      ^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    random
Line:        426
Source: 
>         } else {
>             token.transfer(owner(),token.balanceOf(address(this)));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
