[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AutoRewardDripper
Line:        112
Source: 
>     function either(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := or(x, y)}
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AutoRewardDripper
Line:        193
Source: 
>     */
>     function dripReward(address to) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (lastRewardBlock >= block.number) return;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AutoRewardDripper
Line:        193
Source: 
>     */
>     function dripReward(address to) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (lastRewardBlock >= block.number) return;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AutoRewardDripper
Line:        36
Source: 
>      */
>     function addAuthorization(address account) virtual external isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AutoRewardDripper
Line:        44
Source: 
>      */
>     function removeAuthorization(address account) virtual external isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    AutoRewardDripper
Line:        120
Source: 
>     function multiply(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "AutoRewardDripper/mul-overflow");
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AutoRewardDripper
Line:        197
Source: 
> 
>         uint256 remainingBalance = rewardToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amountToTransfer = multiply(subtract(block.number, lastRewardBlock), rewardPerBlock);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AutoRewardDripper
Line:        205
Source: 
>         if (amountToTransfer == 0) return;
>         require(rewardToken.transfer(to, amountToTransfer), "AutoRewardDripper/failed-transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AutoRewardDripper
Line:        170
Source: 
> 
>         require(rewardToken.transfer(dst, amount), "AutoRewardDripper/failed-transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AutoRewardDripper
Line:        184
Source: 
>     function recomputePerBlockReward() public {
>         uint256 remainingBalance = rewardToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (either(remainingBalance == 0, subtract(now, lastRewardCalculation) < rewardCalculationDelay)) return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AutoRewardDripper
Line:        197
Source: 
> 
>         uint256 remainingBalance = rewardToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amountToTransfer = multiply(subtract(block.number, lastRewardBlock), rewardPerBlock);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AutoRewardDripper
Line:        205
Source: 
>         if (amountToTransfer == 0) return;
>         require(rewardToken.transfer(to, amountToTransfer), "AutoRewardDripper/failed-transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    AutoRewardDripper
Line:        117
Source: 
>     function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x, "AutoRewardDripper/sub-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    AutoRewardDripper
Line:        120
Source: 
>     function multiply(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "AutoRewardDripper/mul-overflow");
>                            ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AutoRewardDripper
Line:        60
Source: 
>     // Amount of tokens distributed per block
>     uint256   public rewardPerBlock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The timeline (in number of blocks) used to calculate rewardPerBlock

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AutoRewardDripper
Line:        64
Source: 
>     // Last time when the reward was calculated
>     uint256   public lastRewardCalculation;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Delay between reward calculations

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AutoRewardDripper
Line:        187
Source: 
>         lastRewardCalculation    = now;
>         rewardPerBlock           = (rewardTimeline >= remainingBalance) ? remainingBalance : remainingBalance / rewardTimeline;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RecomputePerBlockReward(rewardPerBlock);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AutoRewardDripper
Line:        186
Source: 
>         if (either(remainingBalance == 0, subtract(now, lastRewardCalculation) < rewardCalculationDelay)) return;
>         lastRewardCalculation    = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardPerBlock           = (rewardTimeline >= remainingBalance) ? remainingBalance : remainingBalance / rewardTimeline;

[0m
