pragma directive defines a prior version to 0.5.13. Changing pragma version to 0.5.13....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        104
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        107
Source: 
>     }
>     function acceptOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        104
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        107
Source: 
>     }
>     function acceptOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MyEtherStore
Line:        141
Source: 
> 	
> 	function contractActivate() public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MyEtherStore
Line:        146
Source: 
> 	}
> 	function contractDeactivate() public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MyEtherStore
Line:        152
Source: 
> 	
> 	function limitAmount(uint256 min , uint256 max) public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner, "Cannot call function unless owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MyEtherStore
Line:        158
Source: 
> 
> 	function close() public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == owner, "Cannot call function unless owner");

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MyEtherStore
Line:        178
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MyEtherStore
Line:        195
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        104
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MyEtherStore
Line:        152
Source: 
> 	
> 	function limitAmount(uint256 min , uint256 max) public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner, "Cannot call function unless owner");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MyEtherStore
Line:        162
Source: 
> 		require(address(this).balance > 0, "This contract must have a balane above zero");
> 		owner.transfer(address(this).balance);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		active = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MyEtherStore
Line:        175
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MyEtherStore
Line:        178
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MyEtherStore
Line:        192
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    MyEtherStore
Line:        195
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        175
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        178
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        192
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        195
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MyEtherStore
Line:        162
Source: 
> 		require(address(this).balance > 0, "This contract must have a balane above zero");
> 		owner.transfer(address(this).balance);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		active = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        175
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        178
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        192
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    MyEtherStore
Line:        195
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MyEtherStore
Line:        162
Source: 
> 		require(address(this).balance > 0, "This contract must have a balane above zero");
> 		owner.transfer(address(this).balance);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		active = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MyEtherStore
Line:        162
Source: 
> 		require(address(this).balance > 0, "This contract must have a balane above zero");
> 		owner.transfer(address(this).balance);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		active = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MyEtherStore
Line:        175
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MyEtherStore
Line:        178
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MyEtherStore
Line:        192
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MyEtherStore
Line:        195
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        91
Source: 
>     address payable public owner;
>     address payable public newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MyEtherStore
Line:        175
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MyEtherStore
Line:        178
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MyEtherStore
Line:        192
Source: 
> 
> 		owner.transfer(msg.value.div(10));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		while (address(this).balance > users[currentlyPaying].amount.mul(2)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MyEtherStore
Line:        195
Source: 
> 			uint sendAmount = users[currentlyPaying].amount.mul(2);
> 			users[currentlyPaying].addr.transfer(sendAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			totalPayout += sendAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        171
Source: 
> 	    require(msg.value<=maxAmount,"Amount Exceeds the Maximum amount");
> 		users.push(User(msg.sender, msg.value));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalUsers += 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        172
Source: 
> 		users.push(User(msg.sender, msg.value));
> 		totalUsers += 1;
>   ^^^^^^^^^^^^^^^
> 		totalWei += msg.value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        173
Source: 
> 		totalUsers += 1;
> 		totalWei += msg.value;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        179
Source: 
> 			users[currentlyPaying].addr.transfer(sendAmount);
> 			totalPayout += sendAmount;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			currentlyPaying += 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        180
Source: 
> 			totalPayout += sendAmount;
> 			currentlyPaying += 1;
>    ^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        188
Source: 
> 	    require(msg.value<=maxAmount,"Amount Exceeds the Maximum amount");
> 		users.push(User(msg.sender, msg.value));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalUsers += 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        189
Source: 
> 		users.push(User(msg.sender, msg.value));
> 		totalUsers += 1;
>   ^^^^^^^^^^^^^^^
> 		totalWei += msg.value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        190
Source: 
> 		totalUsers += 1;
> 		totalWei += msg.value;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        196
Source: 
> 			users[currentlyPaying].addr.transfer(sendAmount);
> 			totalPayout += sendAmount;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			currentlyPaying += 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MyEtherStore
Line:        197
Source: 
> 			totalPayout += sendAmount;
> 			currentlyPaying += 1;
>    ^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
