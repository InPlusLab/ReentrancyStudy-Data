[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        46
Source: 
>         _buf.capacity = capacity; 
>         assembly {
>         ^^^^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        74
Source: 
>         uint len = _data.length;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) 

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        82
Source: 
>         for(; len >= 32; len -= 32) { 
>             assembly {
>             ^^^^^^^^^^
>                 mstore(dest, mload(src))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        89
Source: 
>         uint mask = 256 ** (32 - len) - 1; 
>         assembly {
>         ^^^^^^^^^^
>             let srcpart := and(mload(src), not(mask))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        101
Source: 
>         }
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) 

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        115
Source: 
>         uint mask = 256 ** _len - 1;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) 

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        778
Source: 
>     function getCodeSize(address _addr) view internal returns (uint _size) {
>         assembly {
>         ^^^^^^^^^^
>             _size := extcodesize(_addr)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1015
Source: 
>         bytes32 sessionKeyHash_bytes32 = provable_randomDS_getSessionPubKeyHash();
>         assembly {
>         ^^^^^^^^^^
>             mstore(unonce, 0x20)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1023
Source: 
>         bytes memory delay = new bytes(32);
>         assembly {
>         ^^^^^^^^^^
>             mstore(add(delay, 0x20), _delay)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1031
Source: 
>         bytes memory delay_bytes8_left = new bytes(8);
>         assembly {
>         ^^^^^^^^^^
>             let x := mload(add(delay_bytes8, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1061
Source: 
>         sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);
>         assembly {
>         ^^^^^^^^^^
>             sigr := mload(add(sigr_, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1168
Source: 
>         while (i < (32 + _fromOffset + _length)) {
>             assembly {
>             ^^^^^^^^^^
>                 let tmp := mload(add(_from, i))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1182
Source: 
>         address addr;
>         assembly {
>         ^^^^^^^^^^
>             let size := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1202
Source: 
>         
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(_sig, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1220
Source: 
>     function safeMemoryCleaner() internal pure {
>         assembly {
>         ^^^^^^^^^^
>             let fmem := mload(0x40)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingProvable
Line:        299
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1257
Source: 
>     }
>     function owner() public view returns (address payable) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1267
Source: 
>     }
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1271
Source: 
>     }
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingProvable
Line:        299
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1267
Source: 
>     }
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1271
Source: 
>     }
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1298
Source: 
> 
>   function __callback(bytes32 myid, string memory result) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (msg.sender != provable_cbAddress()) revert('The sender must be oraclize');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1304
Source: 
> 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(_token).transfer(msg.sender, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1308
Source: 
> 
>   function extractETHIfStuck() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner().transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1312
Source: 
> 
>   function setUpdateTime(uint256 _time) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     updateTime = _time;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1316
Source: 
> 
>   function setyDAI(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yDAI = _contract;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1320
Source: 
> 
>   function setyTether(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yTether = _contract;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1324
Source: 
> 
>   function setyTrueUSD(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yTrueUSD = _contract;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YeldOracle
Line:        1328
Source: 
> 
>   function setyUSDC(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yUSDC = _contract;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    usingProvable
Line:        317
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        1271
Source: 
>     }
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YeldOracle
Line:        1312
Source: 
> 
>   function setUpdateTime(uint256 _time) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     updateTime = _time;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        295
Source: 
>     
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        299
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        295
Source: 
>     
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        299
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YeldOracle
Line:        1298
Source: 
> 
>   function __callback(bytes32 myid, string memory result) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (msg.sender != provable_cbAddress()) revert('The sender must be oraclize');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YeldOracle
Line:        1304
Source: 
> 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(_token).transfer(msg.sender, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YeldOracle
Line:        1316
Source: 
> 
>   function setyDAI(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yDAI = _contract;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YeldOracle
Line:        1320
Source: 
> 
>   function setyTether(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yTether = _contract;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YeldOracle
Line:        1324
Source: 
> 
>   function setyTrueUSD(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yTrueUSD = _contract;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YeldOracle
Line:        1328
Source: 
> 
>   function setyUSDC(address _contract) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yUSDC = _contract;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        313
Source: 
>     function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        774
Source: 
>     function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {
>         return provable.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    solcChecker
Line:        8
Source: 
> 
> contract solcChecker {
> ^^^^^^^^^^^^^^^^^^^^^^
>  function f(bytes calldata x) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        19
Source: 
>     function getPrice(string memory _datasource) public returns (uint _dsprice);
>     function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getPrice(string memory _datasource, uint _gasLimit) public returns (uint _dsprice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        24
Source: 
>     function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        25
Source: 
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        26
Source: 
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Buffer
Line:        35
Source: 
> 
>     struct buffer {
>     ^^^^^^^^^^^^^^^
>         bytes buf;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        195
Source: 
> 
> contract usingProvable {
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        200
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        202
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        203
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        204
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        206
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        207
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        208
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        209
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        210
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        211
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        213
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        214
Source: 
>     string provable_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        215
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        216
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        217
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        218
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        220
Source: 
> 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        221
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        233
Source: 
> 
>     modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        241
Source: 
> 
>     function provable_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _networkID; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        246
Source: 
> 
>     function provable_setNetworkName(string memory _network_name) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         provable_network_name = _network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        250
Source: 
> 
>     function provable_getNetworkName() internal view returns (string memory _networkName) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable_network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        254
Source: 
> 
>     function provable_setNetwork() internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        295
Source: 
>     
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        299
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        304
Source: 
> 
>     function provable_getPrice(string memory _datasource) provableAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        308
Source: 
> 
>     function provable_getPrice(string memory _datasource, uint _gasLimit) provableAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        312
Source: 
> 
>     function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        320
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        328
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource,_gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        336
Source: 
> 
>     function provable_query(string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        344
Source: 
> 
>     function provable_query(string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        352
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        360
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        368
Source: 
> 
>     function provable_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        376
Source: 
> 
>     function provable_query(string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        385
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        394
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        403
Source: 
> 
>     function provable_query(string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        412
Source: 
> 
>     function provable_query(string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        418
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        424
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        430
Source: 
> 
>     function provable_query(string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        436
Source: 
> 
>     function provable_query(string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        443
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        450
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        457
Source: 
> 
>     function provable_query(string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        464
Source: 
> 
>     function provable_query(string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        472
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        480
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        488
Source: 
> 
>     function provable_query(string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        496
Source: 
> 
>     function provable_query(string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        505
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        514
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        523
Source: 
> 
>     function provable_query(string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        532
Source: 
> 
>     function provable_query(string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        542
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        552
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        562
Source: 
> 
>     function provable_query(string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        572
Source: 
> 
>     function provable_query(string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        581
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        590
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        599
Source: 
> 
>     function provable_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = provable.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        608
Source: 
> 
>     function provable_query(string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        614
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        620
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        626
Source: 
> 
>     function provable_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        632
Source: 
> 
>     function provable_query(string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        639
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        646
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        653
Source: 
> 
>     function provable_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        660
Source: 
> 
>     function provable_query(string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        668
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        676
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        684
Source: 
> 
>     function provable_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        692
Source: 
> 
>     function provable_query(string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        701
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        710
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        719
Source: 
> 
>     function provable_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        728
Source: 
> 
>     function provable_query(string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        738
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        748
Source: 
> 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        758
Source: 
> 
>     function provable_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        768
Source: 
> 
>     function provable_setProof(byte _proofP) provableAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable.setProofType(_proofP);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        773
Source: 
> 
>     function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable.cbAddress();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        783
Source: 
> 
>     function provable_setCustomGasPrice(uint _gasPrice) provableAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable.setCustomGasPrice(_gasPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        787
Source: 
> 
>     function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32 _sessionKeyHash) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable.randomDS_getSessionPubKeyHash();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        879
Source: 
>     function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {
>         bytes memory _ba = bytes(_a);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        880
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bc = bytes(_c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        881
Source: 
>         bytes memory _bb = bytes(_b);
>         bytes memory _bc = bytes(_c);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bd = bytes(_d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        882
Source: 
>         bytes memory _bc = bytes(_c);
>         bytes memory _bd = bytes(_d);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _be = bytes(_e);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        883
Source: 
>         bytes memory _bd = bytes(_d);
>         bytes memory _be = bytes(_e);
>         ^^^^^^^^^^^^^^^^
>         string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1007
Source: 
> 
>     function provable_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((_nbytes > 0) && (_nbytes <= 32));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1014
Source: 
>         bytes memory sessionKeyHash = new bytes(32);
>         bytes32 sessionKeyHash_bytes32 = provable_randomDS_getSessionPubKeyHash();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1026
Source: 
>         }
>         bytes memory delay_bytes8 = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(delay, 24, 8, delay_bytes8, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1030
Source: 
>         bytes32 queryId = provable_query("random", args, _customGasLimit);
>         bytes memory delay_bytes8_left = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1046
Source: 
> 
>     function provable_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         provable_randomDS_args[_queryId] = _commitment;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1074
Source: 
> 
>     function provable_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool sigok;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1079
Source: 
>         copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);
>         bytes memory appkey1_pubkey = new bytes(64);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1084
Source: 
>         copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);
>         bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
>         ^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1091
Source: 
>         
>         bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
>         ^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory tosign3 = new bytes(1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1101
Source: 
> 
>     function provable_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1124
Source: 
> 
>     function provable_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1178
Source: 
>     
>     function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YeldOracle
Line:        1298
Source: 
> 
>   function __callback(bytes32 myid, string memory result) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (msg.sender != provable_cbAddress()) revert('The sender must be oraclize');

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        199
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        200
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        202
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        203
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        204
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        206
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        207
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        208
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        209
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        210
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        211
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        213
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        214
Source: 
>     string provable_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        215
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        216
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        217
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        218
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        220
Source: 
> 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        221
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        233
Source: 
> 
>     modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                            ^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        233
Source: 
> 
>     modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                              ^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        233
Source: 
> 
>     modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                                                     ^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        236
Source: 
>         require((_proof[0] == "L") && (_proof[1] == "P") && (uint8(_proof[2]) == uint8(1)));
>         bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());
>         ^^^^^^^^^^^^^^^^^^
>         require(proofVerified);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        314
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        322
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        346
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        354
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        378
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        387
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        574
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        583
Source: 
>         uint price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    YeldOracle
Line:        1309
Source: 
>   function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    usingProvable
Line:        317
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    YeldOracle
Line:        1309
Source: 
>   function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    usingProvable
Line:        317
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    YeldOracle
Line:        1309
Source: 
>   function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        313
Source: 
>     function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        774
Source: 
>     function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {
>         return provable.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    usingProvable
Line:        317
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YeldOracle
Line:        1333
Source: 
>   function rebalance() public {
>     IYeldContract(yDAI).rebalance();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IYeldContract(yTether).rebalance();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YeldOracle
Line:        1334
Source: 
>     IYeldContract(yDAI).rebalance();
>     IYeldContract(yTether).rebalance();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IYeldContract(yTrueUSD).rebalance();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YeldOracle
Line:        1335
Source: 
>     IYeldContract(yTether).rebalance();
>     IYeldContract(yTrueUSD).rebalance();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IYeldContract(yUSDC).rebalance();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YeldOracle
Line:        1336
Source: 
>     IYeldContract(yTrueUSD).rebalance();
>     IYeldContract(yUSDC).rebalance();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YeldOracle
Line:        1305
Source: 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>     IERC20(_token).transfer(msg.sender, _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        971
Source: 
>         while (j != 0) {
>             len++;
>             ^^^
>             j /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        986
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        998
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        1065
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                                                         ^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        1210
Source: 
>         
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    usingProvable
Line:        199
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        199
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        200
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        213
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        200
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        213
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    usingProvable
Line:        317
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingProvable
Line:        301
Source: 
>       _myid; _result; _proof;
>       provable_randomDS_args[bytes32(0)] = bytes32(0);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        305
Source: 
>     function provable_getPrice(string memory _datasource) provableAPI internal returns (uint _queryPrice) {
>         return provable.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        309
Source: 
>     function provable_getPrice(string memory _datasource, uint _gasLimit) provableAPI internal returns (uint _queryPrice) {
>         return provable.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        313
Source: 
>     function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        317
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        321
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        325
Source: 
>         }
>         return provable.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        329
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        333
Source: 
>         }
>         return provable.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        337
Source: 
>     function provable_query(string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        341
Source: 
>         }
>         return provable.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        345
Source: 
>     function provable_query(string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        349
Source: 
>         }
>         return provable.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        353
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        357
Source: 
>         }
>         return provable.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        361
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        365
Source: 
>         }
>         return provable.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        369
Source: 
>     function provable_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        373
Source: 
>         }
>         return provable.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        377
Source: 
>     function provable_query(string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        382
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        386
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        391
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        395
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        400
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        404
Source: 
>     function provable_query(string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        409
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        573
Source: 
>     function provable_query(string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        578
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        582
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        587
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        591
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        596
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        600
Source: 
>     function provable_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        605
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        774
Source: 
>     function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {
>         return provable.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        788
Source: 
>     function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32 _sessionKeyHash) {
>         return provable.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        255
Source: 
>     function provable_setNetwork() internal returns (bool _networkSet) {
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        260
Source: 
>         }
>         if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        265
Source: 
>         }
>         if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        270
Source: 
>         }
>         if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        275
Source: 
>         }
>         if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        280
Source: 
>         }
>         if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        284
Source: 
>         }
>         if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        288
Source: 
>         }
>         if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OracleAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        305
Source: 
>     function provable_getPrice(string memory _datasource) provableAPI internal returns (uint _queryPrice) {
>         return provable.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        309
Source: 
>     function provable_getPrice(string memory _datasource, uint _gasLimit) provableAPI internal returns (uint _queryPrice) {
>         return provable.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        321
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        325
Source: 
>         }
>         return provable.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        329
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        333
Source: 
>         }
>         return provable.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        337
Source: 
>     function provable_query(string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        341
Source: 
>         }
>         return provable.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        345
Source: 
>     function provable_query(string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        349
Source: 
>         }
>         return provable.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        353
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        357
Source: 
>         }
>         return provable.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        361
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        365
Source: 
>         }
>         return provable.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        369
Source: 
>     function provable_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        373
Source: 
>         }
>         return provable.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        377
Source: 
>     function provable_query(string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        382
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        386
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        391
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        395
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        400
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        404
Source: 
>     function provable_query(string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        409
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        573
Source: 
>     function provable_query(string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        578
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        582
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        587
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        591
Source: 
>     function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        596
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        600
Source: 
>     function provable_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {
>         uint price = provable.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        605
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        224
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        227
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        228
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        788
Source: 
>     function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32 _sessionKeyHash) {
>         return provable.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1065
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1069
Source: 
>         } else {
>             (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (address(uint160(uint256(keccak256(_pubkey)))) == signer);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1106
Source: 
>         }
>         bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());
>                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!proofVerified) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1216
Source: 
>         }
>         return safer_ecrecover(_hash, v, r, s);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YeldOracle
Line:        1305
Source: 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>     IERC20(_token).transfer(msg.sender, _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YeldOracle
Line:        1309
Source: 
>   function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        199
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        200
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        202
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        203
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        204
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        206
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        207
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        208
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        209
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        210
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        211
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        213
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        214
Source: 
>     string provable_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        215
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        216
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        217
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        218
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        221
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        202
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        203
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        204
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        206
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        207
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        208
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        209
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        210
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        211
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        213
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        215
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        216
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        217
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        218
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        221
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        130
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        131
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        132
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        133
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        134
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        135
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        136
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
