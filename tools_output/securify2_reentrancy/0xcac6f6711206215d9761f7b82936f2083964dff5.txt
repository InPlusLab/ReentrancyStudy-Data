Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    KittenLending
Line:        78
Source: 
>     modifier govOnly() {
>     	require (msg.sender == govAddr, "!gov");
>               ^^^^^^^^^^^^^^^^^^^^^
>     	_;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    KittenLending
Line:        159
Source: 
>     	
>     	if (msg.sender == govAddr) {
>          ^^^^^^^^^^^^^^^^^^^^^
>     	    m.vaultStatus = 100;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        37
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        41
Source: 
>         uint256 c = a * b;
>         require (c / a == b, "!!mul");
>                  ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    KittenLending
Line:        256
Source: 
>         uint shareMintAmt = 0;
>         if (m.shareTotal == 0) { 
>             ^^^^^^^^^^^^^^^^^
>             shareMintAmt = ethInAmt; // initial price: 1 share = 1 ETH

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KittenLending
Line:        394
Source: 
> 
>     function treasurySend(uint amt) external
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KittenLending
Line:        95
Source: 
>     
>     function govSet_DEFAULT_devFeeBP(uint8 $DEFAULT_devFeeBP) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	DEFAULT_devFeeBP = $DEFAULT_devFeeBP;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KittenLending
Line:        99
Source: 
>     
>     function govSet_devFeeBP(uint vaultId, uint8 $devFeeBP) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	VAULT[vaultId].devFeeBP = $devFeeBP;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KittenLending
Line:        107
Source: 
>     
>     function govSet_tokenStatus(address token, uint $tokenStatus) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	tokenStatus[token] = $tokenStatus;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KittenLending
Line:        111
Source: 
>     
>     function govSet_vaultStatus(uint vaultId, uint8 $vaultStatus) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	VAULT[vaultId].vaultStatus = $vaultStatus;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KittenLending
Line:        175
Source: 
>     
>     function getVaultStatForUser(uint vaultId, address user) external view returns (uint share, uint tllll)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        40
Source: 
>         }
>         uint256 c = a * b;
>                     ^^^^^
>         require (c / a == b, "!!mul");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    KittenLending
Line:        192
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    KittenLending
Line:        192
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    KittenLending
Line:        192
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    KittenLending
Line:        210
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    KittenLending
Line:        210
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    KittenLending
Line:        210
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KittenLending
Line:        319
Source: 
>         //--------  send TOKEN to contract --------
>         ERC20(m.token).transferFrom(user, address(this), tokenInAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mintTllll(m, user, tokenInAmt);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    KittenLending
Line:        241
Source: 
>         m.ethTotal = (m.ethTotal).sub(outAmt, '!notEnoughEthInVault');
>         user.transfer(outAmt);
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    KittenLending
Line:        399
Source: 
>         address payable _treasuryAddr = address(uint160(treasuryAddr));
>         _treasuryAddr.transfer(amt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        93
Source: 
>     
>     uint8 public DEFAULT_devFeeBP = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        95
Source: 
>     
>     function govSet_DEFAULT_devFeeBP(uint8 $DEFAULT_devFeeBP) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	DEFAULT_devFeeBP = $DEFAULT_devFeeBP;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        99
Source: 
>     
>     function govSet_devFeeBP(uint vaultId, uint8 $devFeeBP) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	VAULT[vaultId].devFeeBP = $devFeeBP;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        107
Source: 
>     
>     function govSet_tokenStatus(address token, uint $tokenStatus) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	tokenStatus[token] = $tokenStatus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        111
Source: 
>     
>     function govSet_vaultStatus(uint vaultId, uint8 $vaultStatus) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	VAULT[vaultId].vaultStatus = $vaultStatus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        117
Source: 
> 
>     struct VAULT_INFO 
>     ^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        139
Source: 
> 
>     VAULT_INFO[] public VAULT;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        141
Source: 
>     
>     event CREATE_VAULT(address indexed token, uint indexed vaultId, address indexed user, uint32 tEnd, uint128 priceEndScaled, uint24 apyBP);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        191
Source: 
>         else {
>             uint FACTOR = 10**18;
>             ^^^^^^^^^^^
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        209
Source: 
>         else {
>             uint FACTOR = 10**18;
>             ^^^^^^^^^^^
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        218
Source: 
>     
>     event LOCK_ETH(uint indexed vaultId, address indexed user, uint ethAmt, uint shareAmt);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UNLOCK_ETH(uint indexed vaultId, address indexed user, uint ethAmt, uint shareAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        219
Source: 
>     event LOCK_ETH(uint indexed vaultId, address indexed user, uint ethAmt, uint shareAmt);
>     event UNLOCK_ETH(uint indexed vaultId, address indexed user, uint ethAmt, uint shareAmt);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        292
Source: 
>     
>     event LOCK_TOKEN(uint indexed vaultId, address indexed user, uint tokenAmt, uint ethAmt);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UNLOCK_TOKEN(uint indexed vaultId, address indexed user, uint tokenAmt, uint ethAmt); 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        293
Source: 
>     event LOCK_TOKEN(uint indexed vaultId, address indexed user, uint tokenAmt, uint ethAmt);
>     event UNLOCK_TOKEN(uint indexed vaultId, address indexed user, uint tokenAmt, uint ethAmt); 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        364
Source: 
>     
>     event EXIT_SHARE(uint indexed vaultId, address indexed user, uint shareAmt);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KittenLending
Line:        398
Source: 
>         
>         address payable _treasuryAddr = address(uint160(treasuryAddr));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _treasuryAddr.transfer(amt);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> //
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittenLending
Line:        104
Source: 
>     mapping (address => uint) public tokenStatus; // 0 = normal, if >= TOKEN_STATUS_BANNED then banned
>     uint constant TOKEN_STATUS_BANNED = 1e60;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant VAULT_STATUS_BANNED = 200;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittenLending
Line:        105
Source: 
>     uint constant TOKEN_STATUS_BANNED = 1e60;
>     uint8 constant VAULT_STATUS_BANNED = 200;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KittenLending
Line:        137
Source: 
> 
>     uint constant PRICE_SCALE = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    KittenLending
Line:        241
Source: 
>         m.ethTotal = (m.ethTotal).sub(outAmt, '!notEnoughEthInVault');
>         user.transfer(outAmt);
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    KittenLending
Line:        399
Source: 
>         address payable _treasuryAddr = address(uint160(treasuryAddr));
>         _treasuryAddr.transfer(amt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }    

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    KittenLending
Line:        241
Source: 
>         m.ethTotal = (m.ethTotal).sub(outAmt, '!notEnoughEthInVault');
>         user.transfer(outAmt);
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    KittenLending
Line:        399
Source: 
>         address payable _treasuryAddr = address(uint160(treasuryAddr));
>         _treasuryAddr.transfer(amt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }    

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    KittenLending
Line:        241
Source: 
>         m.ethTotal = (m.ethTotal).sub(outAmt, '!notEnoughEthInVault');
>         user.transfer(outAmt);
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    KittenLending
Line:        399
Source: 
>         address payable _treasuryAddr = address(uint160(treasuryAddr));
>         _treasuryAddr.transfer(amt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }    

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KittenLending
Line:        319
Source: 
>         //--------  send TOKEN to contract --------
>         ERC20(m.token).transferFrom(user, address(this), tokenInAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mintTllll(m, user, tokenInAmt);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KittenLending
Line:        353
Source: 
>         _burnTllll(m, user, tokenOutAmt);
>         ERC20(m.token).transfer(user, tokenOutAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KittenLending
Line:        384
Source: 
>             m.tllllTotal = (m.tllllTotal).sub(tokenOutAmt); // remove tllll
>             ERC20(m.token).transfer(user, tokenOutAmt);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    KittenLending
Line:        152
Source: 
>     
>         m.token = token;
>         ^
>     	m.tEnd = tEnd;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    KittenLending
Line:        241
Source: 
>         m.ethTotal = (m.ethTotal).sub(outAmt, '!notEnoughEthInVault');
>         user.transfer(outAmt);
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    KittenLending
Line:        399
Source: 
>         address payable _treasuryAddr = address(uint160(treasuryAddr));
>         _treasuryAddr.transfer(amt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }    

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittenLending
Line:        222
Source: 
>     function _mintShare(VAULT_INFO storage m, address user, uint mintAmt) internal {
>         m.share[user] = (m.share[user]).add(mintAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         m.shareTotal = (m.shareTotal).add(mintAmt);        

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittenLending
Line:        231
Source: 
>     function _mintTllll(VAULT_INFO storage m, address user, uint mintAmt) internal {
>         m.tllll[user] = (m.tllll[user]).add(mintAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         m.tllllTotal = (m.tllllTotal).add(mintAmt);        

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittenLending
Line:        235
Source: 
>     function _burnTllll(VAULT_INFO storage m, address user, uint burnAmt) internal {
>         m.tllll[user] = (m.tllll[user]).sub(burnAmt, '!notEnoughTokenLocked');
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         m.tllllTotal = (m.tllllTotal).sub(burnAmt, '!notEnoughTokenLocked');        

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittenLending
Line:        312
Source: 
>             uint treasuryAmt = ethOutAmt.mul(uint(m.devFeeBP)) / (10000);
>             treasuryAmtTotal = treasuryAmtTotal.add(treasuryAmt);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KittenLending
Line:        396
Source: 
>     {
>         treasuryAmtTotal = treasuryAmtTotal.sub(amt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        163
Source: 
>     	
>     	VAULT.push(m);
>      ^^^^^^^^^^^^^
>     	

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        223
Source: 
>         m.share[user] = (m.share[user]).add(mintAmt);
>         m.shareTotal = (m.shareTotal).add(mintAmt);        
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        226
Source: 
>     function _burnShare(VAULT_INFO storage m, address user, uint burnAmt) internal {
>         m.share[user] = (m.share[user]).sub(burnAmt, '!notEnoughShare');
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         m.shareTotal = (m.shareTotal).sub(burnAmt, '!notEnoughShare');        

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        227
Source: 
>         m.share[user] = (m.share[user]).sub(burnAmt, '!notEnoughShare');
>         m.shareTotal = (m.shareTotal).sub(burnAmt, '!notEnoughShare');        
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        232
Source: 
>         m.tllll[user] = (m.tllll[user]).add(mintAmt);
>         m.tllllTotal = (m.tllllTotal).add(mintAmt);        
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        236
Source: 
>         m.tllll[user] = (m.tllll[user]).sub(burnAmt, '!notEnoughTokenLocked');
>         m.tllllTotal = (m.tllllTotal).sub(burnAmt, '!notEnoughTokenLocked');        
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        240
Source: 
>     function _sendEth(VAULT_INFO storage m, address payable user, uint outAmt) internal {
>         m.ethTotal = (m.ethTotal).sub(outAmt, '!notEnoughEthInVault');
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user.transfer(outAmt);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        263
Source: 
> 
>         m.ethTotal = (m.ethTotal).add(ethInAmt); // add ETH after computing shareMintAmt
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        315
Source: 
>             ethOutAmt = ethOutAmt.sub(treasuryAmt);
>             m.ethTotal = (m.ethTotal).sub(treasuryAmt, '!ethInVault'); // remove treasuryAmt
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        356
Source: 
>         //-------- return extra ETH to user --------
>         m.ethTotal = (m.ethTotal).add(ethInAmt); // add input ETH first
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (ethReturnAmt > 0)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KittenLending
Line:        383
Source: 
>         if (tokenOutAmt > 0) {
>             m.tllllTotal = (m.tllllTotal).sub(tokenOutAmt); // remove tllll
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20(m.token).transfer(user, tokenOutAmt);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    KittenLending
Line:        319
Source: 
>         //--------  send TOKEN to contract --------
>         ERC20(m.token).transferFrom(user, address(this), tokenInAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mintTllll(m, user, tokenInAmt);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    KittenLending
Line:        353
Source: 
>         _burnTllll(m, user, tokenOutAmt);
>         ERC20(m.token).transfer(user, tokenOutAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    KittenLending
Line:        384
Source: 
>             m.tllllTotal = (m.tllllTotal).sub(tokenOutAmt); // remove tllll
>             ERC20(m.token).transfer(user, tokenOutAmt);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    KittenLending
Line:        148
Source: 
>         require (tokenStatus[token] < TOKEN_STATUS_BANNED, '!tokenBanned');
>         require (tEnd > block.timestamp, "!tEnd");
>                         ^^^^^^^^^^^^^^^
>         require (priceEndScaled > 0, "!priceEndScaled");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    KittenLending
Line:        188
Source: 
>         uint priceNowScaled;
>         if (block.timestamp >= m.tEnd)
>             ^^^^^^^^^^^^^^^
>             priceNowScaled = m.priceEndScaled;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    KittenLending
Line:        192
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                                                                                                             ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    KittenLending
Line:        206
Source: 
>         uint priceNowScaled;
>         if (block.timestamp >= m.tEnd)
>             ^^^^^^^^^^^^^^^
>             priceNowScaled = m.priceEndScaled;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    KittenLending
Line:        210
Source: 
>             uint FACTOR = 10**18;
>             priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);
>                                                                                                             ^^^^^^^^^^^^^^^
>         }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittenLending
Line:        247
Source: 
>         VAULT_INFO storage m = VAULT[vaultId];
>     	require (block.timestamp < m.tEnd, '!vaultEnded');
>               ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittenLending
Line:        274
Source: 
>         VAULT_INFO storage m = VAULT[vaultId];
>     	require (block.timestamp < m.tEnd, '!vaultEnded');        
>               ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittenLending
Line:        298
Source: 
>         VAULT_INFO storage m = VAULT[vaultId];
>     	require (block.timestamp < m.tEnd, '!vaultEnded');        
>               ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittenLending
Line:        330
Source: 
>         VAULT_INFO storage m = VAULT[vaultId];
>     	require (block.timestamp < m.tEnd, '!vaultEnded');         
>               ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    KittenLending
Line:        369
Source: 
>         VAULT_INFO storage m = VAULT[vaultId];
>     	require (block.timestamp > m.tEnd, '!vaultStillOpen');
>               ^^^^^^^^^^^^^^^
> 

[0m
