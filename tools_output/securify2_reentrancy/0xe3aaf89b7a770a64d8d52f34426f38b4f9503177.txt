[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        85
Source: 
>     
>    uint REGESTRATION_FESS=0.1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.25 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        86
Source: 
>    uint REGESTRATION_FESS=0.1 ether;
>    uint pool1_price=0.25 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.50 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        87
Source: 
>    uint pool1_price=0.25 ether;
>    uint pool2_price=0.50 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        88
Source: 
>    uint pool2_price=0.50 ether;
>    uint pool3_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=2.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        89
Source: 
>    uint pool3_price=1 ether;
>    uint pool4_price=2.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=6 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        90
Source: 
>    uint pool4_price=2.5 ether;
>    uint pool5_price=6 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=15 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        91
Source: 
>    uint pool5_price=6 ether;
>    uint pool6_price=15 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=40 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        92
Source: 
>    uint pool6_price=15 ether;
>    uint pool7_price=40 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=100 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        93
Source: 
>    uint pool7_price=40 ether;
>    uint pool8_price=100 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool9_price=200 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        94
Source: 
>    uint pool8_price=100 ether;
>    uint pool9_price=200 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=500 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AKODAX
Line:        95
Source: 
>    uint pool9_price=200 ether;
>    uint pool10_price=500 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        339
Source: 
>      
>        function regUser(uint _referrerID) public payable {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        405
Source: 
>    
>        function buyPool1() public payable {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        440
Source: 
>     
>       function buyPool2() public payable {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        475
Source: 
>     
>      function buyPool3() public payable {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        507
Source: 
>     
>     function buyPool4() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        540
Source: 
>     
>     function buyPool5() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        571
Source: 
>     
>     function buyPool6() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool6users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        601
Source: 
>     
>     function buyPool7() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        633
Source: 
>     
>     function buyPool8() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        666
Source: 
>     
>     function buyPool9() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AKODAX
Line:        698
Source: 
>     
>     function buyPool10() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        426
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        461
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        493
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        525
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        558
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        588
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        619
Source: 
>        bool sent = false;
>        sent = address(uint160(pool7Currentuser)).send(pool7_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        651
Source: 
>        bool sent = false;
>        sent = address(uint160(pool8Currentuser)).send(pool8_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        684
Source: 
>        bool sent = false;
>        sent = address(uint160(pool9Currentuser)).send(pool9_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    AKODAX
Line:        716
Source: 
>        bool sent = false;
>        sent = address(uint160(pool10Currentuser)).send(pool10_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        34
Source: 
>       
>       uint public unlimited_level_price=0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        83
Source: 
>      
>     mapping(uint => uint) public LEVEL_PRICE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        85
Source: 
>     
>    uint REGESTRATION_FESS=0.1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.25 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        86
Source: 
>    uint REGESTRATION_FESS=0.1 ether;
>    uint pool1_price=0.25 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.50 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        87
Source: 
>    uint pool1_price=0.25 ether;
>    uint pool2_price=0.50 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        88
Source: 
>    uint pool2_price=0.50 ether;
>    uint pool3_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=2.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        89
Source: 
>    uint pool3_price=1 ether;
>    uint pool4_price=2.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=6 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        90
Source: 
>    uint pool4_price=2.5 ether;
>    uint pool5_price=6 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=15 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        91
Source: 
>    uint pool5_price=6 ether;
>    uint pool6_price=15 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=40 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        92
Source: 
>    uint pool6_price=15 ether;
>    uint pool7_price=40 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=100 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        93
Source: 
>    uint pool7_price=40 ether;
>    uint pool8_price=100 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool9_price=200 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        94
Source: 
>    uint pool8_price=100 ether;
>    uint pool9_price=200 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=500 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        95
Source: 
>    uint pool9_price=200 ether;
>    uint pool10_price=500 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        97
Source: 
>    
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        98
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        100
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        103
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AKODAX
Line:        374
Source: 
>        
>             uint level_price_local=0;
>             ^^^^^^^^^^^^^^^^^^^^^^
>             if(_level>4){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        85
Source: 
>     
>    uint REGESTRATION_FESS=0.1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.25 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        86
Source: 
>    uint REGESTRATION_FESS=0.1 ether;
>    uint pool1_price=0.25 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.50 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        87
Source: 
>    uint pool1_price=0.25 ether;
>    uint pool2_price=0.50 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        88
Source: 
>    uint pool2_price=0.50 ether;
>    uint pool3_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=2.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        89
Source: 
>    uint pool3_price=1 ether;
>    uint pool4_price=2.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=6 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        90
Source: 
>    uint pool4_price=2.5 ether;
>    uint pool5_price=6 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=15 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        91
Source: 
>    uint pool5_price=6 ether;
>    uint pool6_price=15 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=40 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        92
Source: 
>    uint pool6_price=15 ether;
>    uint pool7_price=40 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=100 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        93
Source: 
>    uint pool7_price=40 ether;
>    uint pool8_price=100 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool9_price=200 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        94
Source: 
>    uint pool8_price=100 ether;
>    uint pool9_price=200 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=500 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AKODAX
Line:        95
Source: 
>    uint pool9_price=200 ether;
>    uint pool10_price=500 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        381
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        735
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        426
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        461
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        493
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        525
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        558
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        588
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        619
Source: 
>        bool sent = false;
>        sent = address(uint160(pool7Currentuser)).send(pool7_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        651
Source: 
>        bool sent = false;
>        sent = address(uint160(pool8Currentuser)).send(pool8_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        684
Source: 
>        bool sent = false;
>        sent = address(uint160(pool9Currentuser)).send(pool9_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        716
Source: 
>        bool sent = false;
>        sent = address(uint160(pool10Currentuser)).send(pool10_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        381
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        735
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        426
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        461
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        493
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        525
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        558
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        588
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        619
Source: 
>        bool sent = false;
>        sent = address(uint160(pool7Currentuser)).send(pool7_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        651
Source: 
>        bool sent = false;
>        sent = address(uint160(pool8Currentuser)).send(pool8_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        684
Source: 
>        bool sent = false;
>        sent = address(uint160(pool9Currentuser)).send(pool9_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AKODAX
Line:        716
Source: 
>        bool sent = false;
>        sent = address(uint160(pool10Currentuser)).send(pool10_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        381
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        735
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        426
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        461
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        493
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        525
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        558
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        588
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        619
Source: 
>        bool sent = false;
>        sent = address(uint160(pool7Currentuser)).send(pool7_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        651
Source: 
>        bool sent = false;
>        sent = address(uint160(pool8Currentuser)).send(pool8_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        684
Source: 
>        bool sent = false;
>        sent = address(uint160(pool9Currentuser)).send(pool9_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AKODAX
Line:        716
Source: 
>        bool sent = false;
>        sent = address(uint160(pool10Currentuser)).send(pool10_price);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AKODAX
Line:        381
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AKODAX
Line:        735
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AKODAX
Line:        105
Source: 
>    
>     UserStruct[] public requests;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
