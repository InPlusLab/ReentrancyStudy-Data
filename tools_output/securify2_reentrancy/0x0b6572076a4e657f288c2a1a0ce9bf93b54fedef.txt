Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                                                         ^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        124
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        124
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        125
Source: 
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>    
>   ^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                                                    ^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        129
Source: 
>    
>     UserStruct[] public requests;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        130
Source: 
>     UserStruct[] public requests;
>      
>       
>       constructor() public {

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        132
Source: 
>       constructor() public {
>           ownerWallet = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        308
Source: 
>             referredUsers:0
>         });
>  ^^^^^^^^^^
>    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        374
Source: 
>             isExist:true,
>             id:pool1currUserID,
>                           ^^^^^
>             payment_received:0

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        405
Source: 
>         pool2currUserID++;
>         userStruct = PoolUserStruct({
>                              ^^^^^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        440
Source: 
>         pool3currUserID++;
>         userStruct = PoolUserStruct({
>                                ^^^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        472
Source: 
>         pool4currUserID++;
>         userStruct = PoolUserStruct({
>                                   ^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        505
Source: 
>         pool5currUserID++;
>         userStruct = PoolUserStruct({
>                                 ^^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        538
Source: 
>             id:pool6currUserID,
>             payment_received:0
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        566
Source: 
>         pool7currUserID++;
>         userStruct = PoolUserStruct({
>                                 ^^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        598
Source: 
>         pool8currUserID++;
>         userStruct = PoolUserStruct({
>                                  ^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        631
Source: 
>         pool9currUserID++;
>         userStruct = PoolUserStruct({
>                                  ^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        663
Source: 
>         pool10currUserID++;
>         userStruct = PoolUserStruct({
>                          ^^^^^^^^^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        694
Source: 
>         pool11currUserID++;
>         userStruct = PoolUserStruct({
>                        ^^^^^^^^^^^^^^
>             isExist:true,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherPoolNetwork
Line:        725
Source: 
>         pool12currUserID++;
>         userStruct = PoolUserStruct({
>                        ^^^^^^^^^^^^^^
>             isExist:true,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        396
Source: 
>       function buyPool2() public payable {
>           require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool2users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        431
Source: 
>      function buyPool3() public payable {
>          require(users[msg.sender].isExist, "User Not Registered");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool3users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        463
Source: 
>     function buyPool4() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool4users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        496
Source: 
>     function buyPool5() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool5users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        527
Source: 
>     function buyPool6() public payable {
>       require(!pool6users[msg.sender].isExist, "Already in AutoPool");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value == pool6_price, 'Incorrect Value');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        557
Source: 
>     function buyPool7() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool7users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        589
Source: 
>     function buyPool8() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool8users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        622
Source: 
>     function buyPool9() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        654
Source: 
>     function buyPool10() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool10users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        685
Source: 
> 	function buyPool11() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool11users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        716
Source: 
> 	function buyPool12() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool12users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        747
Source: 
>     
>     function getEthBalance() public view returns(uint) {
>                                              ^^^^^^^^^^^
>     return address(this).balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        70
Source: 
>      mapping (address => PoolUserStruct) public pool1users;
>      mapping (uint => address) public pool1userList;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        121
Source: 
>    
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                                                         ^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        124
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        124
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        125
Source: 
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>    
>   ^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                                                    ^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        129
Source: 
>    
>     UserStruct[] public requests;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        130
Source: 
>     UserStruct[] public requests;
>      
>       
>       constructor() public {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        132
Source: 
>       constructor() public {
>           ownerWallet = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        134
Source: 
> 
>         LEVEL_PRICE[1] = 0.01 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[2] = 0.005 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        136
Source: 
>         LEVEL_PRICE[2] = 0.005 ether;
>         LEVEL_PRICE[3] = 0.0025 ether;
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[4] = 0.00025 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        139
Source: 
>       unlimited_level_price=0.00025 ether;
>         
>          
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        144
Source: 
> 
>         userStruct = UserStruct({
>                    ^^^^^^^^^^^^^^
>             isExist: true,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        342
Source: 
>                     payReferral(_level+1,referer);
>                 }
>   ^^^^^^^^^^^^^^^
>                 else

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        34
Source: 
>       uint public pool11currUserID = 0;
>       uint public pool12currUserID = 0;
>                                        
>       

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        36
Source: 
>       
>       uint public pool1activeUserID = 0;
>                          ^^^^^^^^^^^^^^^
>       uint public pool2activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        37
Source: 
>       uint public pool1activeUserID = 0;
>       uint public pool2activeUserID = 0;
>                        ^^^^^^^^^^^^^^^^^
>       uint public pool3activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        38
Source: 
>       uint public pool2activeUserID = 0;
>       uint public pool3activeUserID = 0;
>                      ^^^^^^^^^^^^^^^^^^^
>       uint public pool4activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        39
Source: 
>       uint public pool3activeUserID = 0;
>       uint public pool4activeUserID = 0;
>                    ^^^^^^^^^^^^^^^^^^^^^
>       uint public pool5activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        40
Source: 
>       uint public pool4activeUserID = 0;
>       uint public pool5activeUserID = 0;
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>       uint public pool6activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        41
Source: 
>       uint public pool5activeUserID = 0;
>       uint public pool6activeUserID = 0;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint public pool7activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        42
Source: 
>       uint public pool6activeUserID = 0;
>       uint public pool7activeUserID = 0;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint public pool8activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        50
Source: 
>       
>       uint public unlimited_level_price=0;
>                                    ^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        52
Source: 
>      
>       struct UserStruct {
>                           
>         bool isExist;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        55
Source: 
>         uint id;
>         uint referrerID;
> ^^^^^^^^^^^^^^^^^^^^^^^^
>        uint referredUsers;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        56
Source: 
>         uint referrerID;
>        uint referredUsers;
>                 ^^^^^^^^^^
>         mapping(uint => uint) levelExpired;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        57
Source: 
>        uint referredUsers;
>         mapping(uint => uint) levelExpired;
>                               ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        60
Source: 
>     
>      struct PoolUserStruct {
>               ^^^^^^^^^^^^^^
>         bool isExist;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        62
Source: 
>         bool isExist;
>         uint id;
>    ^^^^^^^^^^^^^
>        uint payment_received; 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        63
Source: 
>         uint id;
>        uint payment_received; 
>                            ^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        69
Source: 
>      
>      mapping (address => PoolUserStruct) public pool1users;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      mapping (uint => address) public pool1userList;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        70
Source: 
>      mapping (address => PoolUserStruct) public pool1users;
>      mapping (uint => address) public pool1userList;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        79
Source: 
>      mapping (address => PoolUserStruct) public pool4users;
>      mapping (uint => address) public pool4userList;
>                                 ^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        103
Source: 
> 	 mapping (address => PoolUserStruct) public pool12users;
>      mapping (uint => address) public pool12userList;
>                                   ^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        105
Source: 
>      
>     mapping(uint => uint) public LEVEL_PRICE;
>                                  ^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        108
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.1 ether;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        109
Source: 
>    uint pool1_price=0.1 ether;
>    uint pool2_price=0.2 ether ;
>                                
>    uint pool3_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        111
Source: 
>    uint pool3_price=0.5 ether;
>    uint pool4_price=1 ether;
>                             
>    uint pool5_price=2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        113
Source: 
>    uint pool5_price=2 ether;
>    uint pool6_price=5 ether;
>                         ^^^^
>    uint pool7_price=10 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        115
Source: 
>    uint pool7_price=10 ether ;
>    uint pool8_price=25 ether;
>                         ^^^^^
>    uint pool9_price=50 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        117
Source: 
>    uint pool9_price=50 ether;
>    uint pool10_price=100 ether;
>                   ^^^^^^^^^^^^^
>    uint pool11_price=200 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        119
Source: 
>    uint pool11_price=200 ether;
>    uint pool12_price=500 ether;
>               ^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        121
Source: 
>    
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        122
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                                                         ^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        124
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        124
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        125
Source: 
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>    
>   ^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        127
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>                                                                                    ^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        132
Source: 
>       constructor() public {
>           ownerWallet = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherPoolNetwork
Line:        148
Source: 
>             referrerID: 0,
>             referredUsers:0
>      ^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        351
Source: 
>         if(!sent) {
>           //  emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        760
Source: 
>    
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        396
Source: 
>       function buyPool2() public payable {
>           require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool2users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        431
Source: 
>      function buyPool3() public payable {
>          require(users[msg.sender].isExist, "User Not Registered");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool3users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        463
Source: 
>     function buyPool4() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool4users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        496
Source: 
>     function buyPool5() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool5users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        527
Source: 
>     function buyPool6() public payable {
>       require(!pool6users[msg.sender].isExist, "Already in AutoPool");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value == pool6_price, 'Incorrect Value');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        557
Source: 
>     function buyPool7() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool7users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        589
Source: 
>     function buyPool8() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool8users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        622
Source: 
>     function buyPool9() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        654
Source: 
>     function buyPool10() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool10users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        685
Source: 
> 	function buyPool11() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool11users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        716
Source: 
> 	function buyPool12() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool12users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        747
Source: 
>     
>     function getEthBalance() public view returns(uint) {
>                                              ^^^^^^^^^^^
>     return address(this).balance;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        351
Source: 
>         if(!sent) {
>           //  emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        760
Source: 
>    
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        396
Source: 
>       function buyPool2() public payable {
>           require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool2users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        431
Source: 
>      function buyPool3() public payable {
>          require(users[msg.sender].isExist, "User Not Registered");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool3users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        463
Source: 
>     function buyPool4() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool4users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        496
Source: 
>     function buyPool5() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool5users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        527
Source: 
>     function buyPool6() public payable {
>       require(!pool6users[msg.sender].isExist, "Already in AutoPool");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value == pool6_price, 'Incorrect Value');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        557
Source: 
>     function buyPool7() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool7users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        589
Source: 
>     function buyPool8() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool8users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        622
Source: 
>     function buyPool9() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        654
Source: 
>     function buyPool10() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool10users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        685
Source: 
> 	function buyPool11() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool11users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        716
Source: 
> 	function buyPool12() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool12users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        747
Source: 
>     
>     function getEthBalance() public view returns(uint) {
>                                              ^^^^^^^^^^^
>     return address(this).balance;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        351
Source: 
>         if(!sent) {
>           //  emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        760
Source: 
>    
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        396
Source: 
>       function buyPool2() public payable {
>           require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool2users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        431
Source: 
>      function buyPool3() public payable {
>          require(users[msg.sender].isExist, "User Not Registered");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool3users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        463
Source: 
>     function buyPool4() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool4users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        496
Source: 
>     function buyPool5() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool5users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        527
Source: 
>     function buyPool6() public payable {
>       require(!pool6users[msg.sender].isExist, "Already in AutoPool");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value == pool6_price, 'Incorrect Value');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        557
Source: 
>     function buyPool7() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool7users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        589
Source: 
>     function buyPool8() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool8users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        622
Source: 
>     function buyPool9() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool9users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        654
Source: 
>     function buyPool10() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool10users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        685
Source: 
> 	function buyPool11() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool11users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        716
Source: 
> 	function buyPool12() public payable {
>         require(users[msg.sender].isExist, "User Not Registered");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool12users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        747
Source: 
>     
>     function getEthBalance() public view returns(uint) {
>                                              ^^^^^^^^^^^
>     return address(this).balance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherPoolNetwork
Line:        351
Source: 
>         if(!sent) {
>           //  emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherPoolNetwork
Line:        760
Source: 
>    
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EtherPoolNetwork
Line:        148
Source: 
>             referrerID: 0,
>             referredUsers:0
>      ^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
