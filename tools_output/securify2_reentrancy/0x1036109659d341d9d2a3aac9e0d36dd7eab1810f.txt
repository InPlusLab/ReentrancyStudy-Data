Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        429
Source: 
>         _buf.capacity = capacity; // Allocate space for the buffer data
>         assembly {
>         ^^^^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        469
Source: 
>         uint256 len = _data.length;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        478
Source: 
>             // Copy word-length chunks while possible
>             assembly {
>             ^^^^^^^^^^
>                 mstore(dest, mload(src))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        485
Source: 
>         uint256 mask = 256**(32 - len) - 1; // Copy remaining bytes
>         assembly {
>         ^^^^^^^^^^
>             let srcpart := and(mload(src), not(mask))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        506
Source: 
>         }
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        533
Source: 
>         uint256 mask = 256**_len - 1;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1573
Source: 
>     function getCodeSize(address _addr) internal view returns (uint256 _size) {
>         assembly {
>         ^^^^^^^^^^
>             _size := extcodesize(_addr)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1897
Source: 
>          = provable_randomDS_getSessionPubKeyHash();
>         assembly {
>         ^^^^^^^^^^
>             mstore(unonce, 0x20)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1912
Source: 
>         bytes memory delay = new bytes(32);
>         assembly {
>         ^^^^^^^^^^
>             mstore(add(delay, 0x20), _delay)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1920
Source: 
>         bytes memory delay_bytes8_left = new bytes(8);
>         assembly {
>         ^^^^^^^^^^
>             let x := mload(add(delay_bytes8, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        2012
Source: 
>         );
>         assembly {
>         ^^^^^^^^^^
>             sigr := mload(add(sigr_, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        2201
Source: 
>         while (i < (32 + _fromOffset + _length)) {
>             assembly {
>             ^^^^^^^^^^
>                 let tmp := mload(add(_from, i))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        2231
Source: 
>         address addr;
>         assembly {
>         ^^^^^^^^^^
>             let size := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        2261
Source: 
>         */
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(_sig, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        2293
Source: 
>     function safeMemoryCleaner() internal pure {
>         assembly {
>         ^^^^^^^^^^
>             let fmem := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2324
Source: 
>     /// @notice More than this much time must pass between rebase operations.
>     uint256 public minRebaseTimeIntervalSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2331
Source: 
>     // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.
>     uint256 public rebaseWindowOffsetSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2334
Source: 
>     /// @notice The length of the time window where a rebase operation is allowed to execute, in seconds.
>     uint256 public rebaseWindowLengthSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2348
Source: 
>     /// @notice last TWAP cumulative price;
>     uint256 public priceCumulativeLast;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2354
Source: 
>     /// @notice Pending Governance address
>     address public pendingGov;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2357
Source: 
>     /// @notice VAMP token address
>     address public VAMPAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2360
Source: 
>     /// @notice reserve token
>     address public reserveToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2363
Source: 
>     /// @notice pair for reserveToken <> VAMP
>     address public uniswap_pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2366
Source: 
>     /// @notice last TWAP update time
>     uint32 public blockTimestampLast;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VAMPRebaser
Line:        2371
Source: 
>     /// @notice Whether or not this token is first in uniswap VAMP<>Reserve pair
>     bool public isToken0;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        237
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        262
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipRenounced(_owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        271
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingProvable
Line:        785
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        237
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        262
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipRenounced(_owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        271
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingProvable
Line:        785
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAMPRebaser
Line:        2490
Source: 
>      */
>     function activate_rebasing(uint256 _volume) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rebasingActive = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAMPRebaser
Line:        2498
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == provable_cbAddress(), "Revert at callback");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAMPRebaser
Line:        2575
Source: 
>      */
>     function rebase() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tx.origin == msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAMPRebaser
Line:        2619
Source: 
>      */
>     function prepare_rebase() public payable onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // get twap from uniswap v2 and save here for later (i.e. the current price)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    usingProvable
Line:        821
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        271
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VAMPRebaser
Line:        2490
Source: 
>      */
>     function activate_rebasing(uint256 _volume) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rebasingActive = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VAMPRebaser
Line:        2506
Source: 
> 
>     function calcRebaseAmount(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool posPriceChange,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        781
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        785
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        781
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingProvable
Line:        785
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VAMPRebaser
Line:        2479
Source: 
>      */
>     function setMarketOracle(IOracle marketOracle_) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         marketOracle = marketOracle_;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VAMPRebaser
Line:        2483
Source: 
> 
>     function setRebaserMultiplier(int256 _amount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rebaserMultiplier = _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VAMPRebaser
Line:        2498
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == provable_cbAddress(), "Revert at callback");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        817
Source: 
>     {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingProvable
Line:        1569
Source: 
>     {
>         return provable.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VAMPRebaser
Line:        2492
Source: 
>         rebasingActive = true;
>         lastTwapPrice = marketOracle.getData();
>                         ^^^^^^^^^^^^^^^^^^^^^^
>         rebaseActivatedTime = now;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VAMPRebaser
Line:        2494
Source: 
>         rebaseActivatedTime = now;
>         marketOracle.update();
>         ^^^^^^^^^^^^^^^^^^^^^
>         lastVolumeUsd = _volume;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VAMPRebaser
Line:        2549
Source: 
>             posPriceChange,
>             VAMP.totalSupply()
>             ^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VAMPRebaser
Line:        2552
Source: 
>         // Perform rebase.
>         VAMP.rebase(rebaseAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VAMPRebaser
Line:        2554
Source: 
> 
>         marketOracle.update();
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VAMPRebaser
Line:        2621
Source: 
>         // get twap from uniswap v2 and save here for later (i.e. the current price)
>         currentTwapPrice = marketOracle.getData();
>                            ^^^^^^^^^^^^^^^^^^^^^^
>         //calls volume oracle

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    solcChecker
Line:        317
Source: 
> // Dummy contract only used to emit to end-user they are using wrong solc
> contract solcChecker {
> ^^^^^^^^^^^^^^^^^^^^^^
>     /* INCOMPATIBLE SOLC: import the following instead: "github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol" */

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        333
Source: 
> 
>     function randomDS_getSessionPubKeyHash()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        361
Source: 
> 
>     function query_withGasLimit(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        368
Source: 
> 
>     function queryN_withGasLimit(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProvableI
Line:        375
Source: 
> 
>     function query2_withGasLimit(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Buffer
Line:        418
Source: 
> library Buffer {
>     struct buffer {
>     ^^^^^^^^^^^^^^^
>         bytes buf;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        633
Source: 
> */
> contract usingProvable {
> ^^^^^^^^^^^^^^^^^^^^^^^^
>     using CBOR for Buffer.buffer;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        637
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        639
Source: 
> 
>     uint256 constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        640
Source: 
>     uint256 constant day = 60 * 60 * 24;
>     uint256 constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        641
Source: 
>     uint256 constant week = 60 * 60 * 24 * 7;
>     uint256 constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        643
Source: 
> 
>     bytes1 constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        644
Source: 
>     bytes1 constant proofType_NONE = 0x00;
>     bytes1 constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        645
Source: 
>     bytes1 constant proofType_Ledger = 0x30;
>     bytes1 constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        646
Source: 
>     bytes1 constant proofType_Native = 0xF0;
>     bytes1 constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        647
Source: 
>     bytes1 constant proofStorage_IPFS = 0x01;
>     bytes1 constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        648
Source: 
>     bytes1 constant proofType_Android = 0x40;
>     bytes1 constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        650
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        651
Source: 
>     string provable_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        652
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        653
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        654
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        655
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        657
Source: 
> 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        658
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        670
Source: 
> 
>     modifier provable_randomDS_proofVerify(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _queryId,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        691
Source: 
> 
>     function provable_setNetwork(uint8 _networkID)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        699
Source: 
> 
>     function provable_setNetworkName(string memory _network_name) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         provable_network_name = _network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        703
Source: 
> 
>     function provable_getNetworkName()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        711
Source: 
> 
>     function provable_setNetwork() internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        781
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        785
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        796
Source: 
> 
>     function provable_getPrice(string memory _datasource)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        804
Source: 
> 
>     function provable_getPrice(string memory _datasource, uint256 _gasLimit)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        812
Source: 
> 
>     function provable_query(string memory _datasource, string memory _arg)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        824
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        836
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        855
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        873
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        885
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        899
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        920
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        940
Source: 
> 
>     function provable_query(string memory _datasource, string[] memory _argN)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        953
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        966
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        986
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1005
Source: 
> 
>     function provable_query(string memory _datasource, string[1] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1015
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1025
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1036
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1046
Source: 
> 
>     function provable_query(string memory _datasource, string[2] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1057
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1068
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1080
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1091
Source: 
> 
>     function provable_query(string memory _datasource, string[3] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1103
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1115
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1128
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1140
Source: 
> 
>     function provable_query(string memory _datasource, string[4] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1153
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1166
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1180
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1193
Source: 
> 
>     function provable_query(string memory _datasource, string[5] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1207
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1221
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1236
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1250
Source: 
> 
>     function provable_query(string memory _datasource, bytes[] memory _argN)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1263
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1276
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1296
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1315
Source: 
> 
>     function provable_query(string memory _datasource, bytes[1] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1325
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1335
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1346
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1356
Source: 
> 
>     function provable_query(string memory _datasource, bytes[2] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1367
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1378
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1390
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1401
Source: 
> 
>     function provable_query(string memory _datasource, bytes[3] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1413
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1425
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1438
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1450
Source: 
> 
>     function provable_query(string memory _datasource, bytes[4] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1463
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1476
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1490
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1503
Source: 
> 
>     function provable_query(string memory _datasource, bytes[5] memory _args)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1517
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1531
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _timestamp,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1546
Source: 
> 
>     function provable_query(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory _datasource,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1560
Source: 
> 
>     function provable_setProof(bytes1 _proofP) internal provableAPI {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return provable.setProofType(_proofP);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1564
Source: 
> 
>     function provable_cbAddress()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1578
Source: 
> 
>     function provable_setCustomGasPrice(uint256 _gasPrice)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1585
Source: 
> 
>     function provable_randomDS_getSessionPubKeyHash()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1716
Source: 
>     ) internal pure returns (string memory _concatenatedString) {
>         bytes memory _ba = bytes(_a);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1717
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bc = bytes(_c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1718
Source: 
>         bytes memory _bb = bytes(_b);
>         bytes memory _bc = bytes(_c);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bd = bytes(_d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1719
Source: 
>         bytes memory _bc = bytes(_c);
>         bytes memory _bd = bytes(_d);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _be = bytes(_e);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1720
Source: 
>         bytes memory _bd = bytes(_d);
>         bytes memory _be = bytes(_e);
>         ^^^^^^^^^^^^^^^^
>         string memory abcde = new string(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1883
Source: 
> 
>     function provable_newRandomDSQuery(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _delay,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1895
Source: 
> 
>             bytes32 sessionKeyHash_bytes32
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          = provable_randomDS_getSessionPubKeyHash();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1915
Source: 
>         }
>         bytes memory delay_bytes8 = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(delay, 24, 8, delay_bytes8, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1919
Source: 
>         bytes32 queryId = provable_query("random", args, _customGasLimit);
>         bytes memory delay_bytes8_left = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        1984
Source: 
> 
>     function provable_randomDS_setCommitment(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _queryId,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        2025
Source: 
> 
>     function provable_randomDS_proofVerify__sessionKeyValidity(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory _proof,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        2035
Source: 
>         copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);
>         bytes memory appkey1_pubkey = new bytes(64);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        2041
Source: 
> 
>             bytes memory CODEHASH
>             ^^^^^^^^^^^^^^^^^^^^^
>          = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        2050
Source: 
> 
>             bytes memory LEDGERKEY
>             ^^^^^^^^^^^^^^^^^^^^^^
>          = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        2061
Source: 
> 
>     function provable_randomDS_proofVerify__returnCode(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _queryId,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        2101
Source: 
> 
>     function provable_randomDS_proofVerify__main(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory _proof,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingProvable
Line:        2215
Source: 
>     */
>     function safer_ecrecover(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _hash,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAMPRebaser
Line:        2340
Source: 
>     /// @notice delays rebasing activation to facilitate liquidity
>     uint256 public constant rebaseDelay = 12 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAMPRebaser
Line:        2357
Source: 
>     /// @notice VAMP token address
>     address public VAMPAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAMPRebaser
Line:        2363
Source: 
>     /// @notice pair for reserveToken <> VAMP
>     address public uniswap_pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAMPRebaser
Line:        2396
Source: 
> 
>     IVAMP public VAMP;
>     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAMPRebaser
Line:        2490
Source: 
>      */
>     function activate_rebasing(uint256 _volume) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rebasingActive = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAMPRebaser
Line:        2498
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == provable_cbAddress(), "Revert at callback");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAMPRebaser
Line:        2619
Source: 
>      */
>     function prepare_rebase() public payable onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // get twap from uniswap v2 and save here for later (i.e. the current price)

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        314
Source: 
> */
> pragma solidity >=0.5.0 <0.6.0; // Incompatible compiler version - please select a compiler within the stated pragma range, or use a different version of the provableAPI!
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        636
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        637
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        639
Source: 
> 
>     uint256 constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        640
Source: 
>     uint256 constant day = 60 * 60 * 24;
>     uint256 constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        641
Source: 
>     uint256 constant week = 60 * 60 * 24 * 7;
>     uint256 constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        643
Source: 
> 
>     bytes1 constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        644
Source: 
>     bytes1 constant proofType_NONE = 0x00;
>     bytes1 constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        645
Source: 
>     bytes1 constant proofType_Ledger = 0x30;
>     bytes1 constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        646
Source: 
>     bytes1 constant proofType_Native = 0xF0;
>     bytes1 constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        647
Source: 
>     bytes1 constant proofStorage_IPFS = 0x01;
>     bytes1 constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        648
Source: 
>     bytes1 constant proofType_Android = 0x40;
>     bytes1 constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        650
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        651
Source: 
>     string provable_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        652
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        653
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        654
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        655
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        657
Source: 
> 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        658
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        671
Source: 
>     modifier provable_randomDS_proofVerify(
>         bytes32 _queryId,
>         ^^^^^^^^^^^^^^^^
>         string memory _result,

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        672
Source: 
>         bytes32 _queryId,
>         string memory _result,
>         ^^^^^^^^^^^^^^^^^^^^^
>         bytes memory _proof

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        673
Source: 
>         string memory _result,
>         bytes memory _proof
>         ^^^^^^^^^^^^^^^^^^^
>     ) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingProvable
Line:        681
Source: 
>         );
>         bool proofVerified = provable_randomDS_proofVerify__main(
>         ^^^^^^^^^^^^^^^^^^
>             _proof,

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        818
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        830
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        879
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        892
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        946
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        959
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1256
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingProvable
Line:        1269
Source: 
>         uint256 price = provable.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    usingProvable
Line:        821
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    usingProvable
Line:        821
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        817
Source: 
>     {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingProvable
Line:        1569
Source: 
>     {
>         return provable.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VAMPRebaser
Line:        2492
Source: 
>         rebasingActive = true;
>         lastTwapPrice = marketOracle.getData();
>                         ^^^^^^^^^^^^^^^^^^^^^^
>         rebaseActivatedTime = now;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VAMPRebaser
Line:        2549
Source: 
>             posPriceChange,
>             VAMP.totalSupply()
>             ^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VAMPRebaser
Line:        2621
Source: 
>         // get twap from uniswap v2 and save here for later (i.e. the current price)
>         currentTwapPrice = marketOracle.getData();
>                            ^^^^^^^^^^^^^^^^^^^^^^
>         //calls volume oracle

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    usingProvable
Line:        821
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VAMPRebaser
Line:        2494
Source: 
>         rebaseActivatedTime = now;
>         marketOracle.update();
>         ^^^^^^^^^^^^^^^^^^^^^
>         lastVolumeUsd = _volume;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VAMPRebaser
Line:        2552
Source: 
>         // Perform rebase.
>         VAMP.rebase(rebaseAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VAMPRebaser
Line:        2554
Source: 
> 
>         marketOracle.update();
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        1839
Source: 
>         while (j != 0) {
>             len++;
>             ^^^
>             j /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        1858
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        1874
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        2016
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                                                         ^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingProvable
Line:        2283
Source: 
>         */
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    usingProvable
Line:        636
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2327
Source: 
>     /// @notice Block timestamp of last rebase operation
>     uint256 public lastRebaseTimestampSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2337
Source: 
>     /// @notice The number of rebase cycles since inception
>     uint256 public epoch;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2343
Source: 
>     /// @notice Time of TWAP initialization
>     uint256 public rebaseActivatedTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2376
Source: 
>     ///@notice boolean showing rebase activation status
>     bool public rebasingActive;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2398
Source: 
> 
>     IOracle public marketOracle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2400
Source: 
> 
>     uint256 public currentVolumeUsd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2403
Source: 
>     /// @notice the last volume on uniswap for a certain time window
>     uint256 public lastVolumeUsd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2406
Source: 
>     /// @notice the last TWAP we stored in rebase
>     uint256 public lastTwapPrice;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VAMPRebaser
Line:        2409
Source: 
>     /// @notice the TWAP we just received
>     uint256 public currentTwapPrice;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        636
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        637
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        650
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        637
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingProvable
Line:        650
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2324
Source: 
>     /// @notice More than this much time must pass between rebase operations.
>     uint256 public minRebaseTimeIntervalSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2331
Source: 
>     // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.
>     uint256 public rebaseWindowOffsetSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2334
Source: 
>     /// @notice The length of the time window where a rebase operation is allowed to execute, in seconds.
>     uint256 public rebaseWindowLengthSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2348
Source: 
>     /// @notice last TWAP cumulative price;
>     uint256 public priceCumulativeLast;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2354
Source: 
>     /// @notice Pending Governance address
>     address public pendingGov;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2357
Source: 
>     /// @notice VAMP token address
>     address public VAMPAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2360
Source: 
>     /// @notice reserve token
>     address public reserveToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2363
Source: 
>     /// @notice pair for reserveToken <> VAMP
>     address public uniswap_pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2366
Source: 
>     /// @notice last TWAP update time
>     uint32 public blockTimestampLast;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    VAMPRebaser
Line:        2371
Source: 
>     /// @notice Whether or not this token is first in uniswap VAMP<>Reserve pair
>     bool public isToken0;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        104
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        105
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    UInt256Lib
Line:        161
Source: 
> library UInt256Lib {
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        547
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        548
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        549
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        550
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        551
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        552
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        553
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        104
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        105
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    UInt256Lib
Line:        161
Source: 
> library UInt256Lib {
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        547
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        548
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        549
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        550
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        551
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        552
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        553
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        104
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        105
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    UInt256Lib
Line:        161
Source: 
> library UInt256Lib {
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        547
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        548
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        549
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        550
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        551
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        552
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        553
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingProvable
Line:        793
Source: 
>         _proof;
>         provable_randomDS_args[bytes32(0)] = bytes32(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        801
Source: 
>     {
>         return provable.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        809
Source: 
>     {
>         return provable.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        817
Source: 
>     {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        821
Source: 
>         }
>         return provable.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        829
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        833
Source: 
>         }
>         return provable.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        842
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        847
Source: 
>         return
>             provable.query_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        860
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        865
Source: 
>         return
>             provable.query_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        878
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        882
Source: 
>         }
>         return provable.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        891
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        896
Source: 
>         return
>             provable.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        906
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        911
Source: 
>         return
>             provable.query2_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        926
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        931
Source: 
>         return
>             provable.query2_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        945
Source: 
>     {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        950
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        958
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        963
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        972
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        978
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        991
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        997
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1255
Source: 
>     {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1260
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1268
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1273
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1282
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1288
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1301
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1307
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1569
Source: 
>     {
>         return provable.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1590
Source: 
>     {
>         return provable.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        712
Source: 
>     function provable_setNetwork() internal returns (bool _networkSet) {
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //mainnet

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        720
Source: 
>         }
>         if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //ropsten testnet

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        728
Source: 
>         }
>         if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //kovan testnet

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        736
Source: 
>         }
>         if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //rinkeby testnet

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        744
Source: 
>         }
>         if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //goerli testnet

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        752
Source: 
>         }
>         if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //ethereum-bridge

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        759
Source: 
>         }
>         if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //ether.camp ide

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        766
Source: 
>         }
>         if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //browser-solidity

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        801
Source: 
>     {
>         return provable.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        809
Source: 
>     {
>         return provable.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        829
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        833
Source: 
>         }
>         return provable.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        842
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        847
Source: 
>         return
>             provable.query_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        860
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        865
Source: 
>         return
>             provable.query_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        878
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        882
Source: 
>         }
>         return provable.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        891
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        896
Source: 
>         return
>             provable.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        906
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        911
Source: 
>         return
>             provable.query2_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        926
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        931
Source: 
>         return
>             provable.query2_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        945
Source: 
>     {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        950
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        958
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        963
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        972
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        978
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        991
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        997
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1255
Source: 
>     {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1260
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1268
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1273
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return provable.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1282
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1288
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _timestamp,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1301
Source: 
>     ) internal provableAPI returns (bytes32 _id) {
>         uint256 price = provable.getPrice(_datasource, _gasLimit);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1307
Source: 
>         return
>             provable.queryN_withGasLimit.value(price)(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        661
Source: 
>     modifier provableAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             provable_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        664
Source: 
>         }
>         if (address(provable) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             provable = ProvableI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        665
Source: 
>         if (address(provable) != OAR.getAddress()) {
>             provable = ProvableI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        1590
Source: 
>     {
>         return provable.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        2016
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        2020
Source: 
>         } else {
>             (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (address(uint160(uint256(keccak256(_pubkey)))) == signer);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        2078
Source: 
>             bytes(_result),
>             provable_getNetworkName()
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingProvable
Line:        2289
Source: 
>         }
>         return safer_ecrecover(_hash, v, r, s);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VAMPRebaser
Line:        2552
Source: 
>         // Perform rebase.
>         VAMP.rebase(rebaseAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        104
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        105
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UInt256Lib
Line:        161
Source: 
> library UInt256Lib {
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        547
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        548
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        549
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        550
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        551
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        552
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        553
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        636
Source: 
> 
>     ProvableI provable;
>     ^^^^^^^^^^^^^^^^^^
>     OracleAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        637
Source: 
>     ProvableI provable;
>     OracleAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        639
Source: 
> 
>     uint256 constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        640
Source: 
>     uint256 constant day = 60 * 60 * 24;
>     uint256 constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        641
Source: 
>     uint256 constant week = 60 * 60 * 24 * 7;
>     uint256 constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        643
Source: 
> 
>     bytes1 constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        644
Source: 
>     bytes1 constant proofType_NONE = 0x00;
>     bytes1 constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        645
Source: 
>     bytes1 constant proofType_Ledger = 0x30;
>     bytes1 constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        646
Source: 
>     bytes1 constant proofType_Native = 0xF0;
>     bytes1 constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        647
Source: 
>     bytes1 constant proofStorage_IPFS = 0x01;
>     bytes1 constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        648
Source: 
>     bytes1 constant proofType_Android = 0x40;
>     bytes1 constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        650
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        651
Source: 
>     string provable_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        652
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        653
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        654
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        655
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        658
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        104
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        105
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UInt256Lib
Line:        161
Source: 
> library UInt256Lib {
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        547
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        548
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        549
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        550
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        551
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        552
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        553
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        639
Source: 
> 
>     uint256 constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        640
Source: 
>     uint256 constant day = 60 * 60 * 24;
>     uint256 constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        641
Source: 
>     uint256 constant week = 60 * 60 * 24 * 7;
>     uint256 constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        643
Source: 
> 
>     bytes1 constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        644
Source: 
>     bytes1 constant proofType_NONE = 0x00;
>     bytes1 constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        645
Source: 
>     bytes1 constant proofType_Ledger = 0x30;
>     bytes1 constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        646
Source: 
>     bytes1 constant proofType_Native = 0xF0;
>     bytes1 constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        647
Source: 
>     bytes1 constant proofStorage_IPFS = 0x01;
>     bytes1 constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        648
Source: 
>     bytes1 constant proofType_Android = 0x40;
>     bytes1 constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        650
Source: 
> 
>     string provable_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        652
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        653
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        654
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        655
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingProvable
Line:        658
Source: 
>     mapping(bytes32 => bytes32) provable_randomDS_args;
>     mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2321
Source: 
> 
>     uint256 public constant BASE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2324
Source: 
>     /// @notice More than this much time must pass between rebase operations.
>     uint256 public minRebaseTimeIntervalSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2331
Source: 
>     // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.
>     uint256 public rebaseWindowOffsetSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2334
Source: 
>     /// @notice The length of the time window where a rebase operation is allowed to execute, in seconds.
>     uint256 public rebaseWindowLengthSec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2348
Source: 
>     /// @notice last TWAP cumulative price;
>     uint256 public priceCumulativeLast;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2351
Source: 
>     /// @notice Governance address
>     address public gov;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2354
Source: 
>     /// @notice Pending Governance address
>     address public pendingGov;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2357
Source: 
>     /// @notice VAMP token address
>     address public VAMPAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2360
Source: 
>     /// @notice reserve token
>     address public reserveToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2363
Source: 
>     /// @notice pair for reserveToken <> VAMP
>     address public uniswap_pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2366
Source: 
>     /// @notice last TWAP update time
>     uint32 public blockTimestampLast;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2368
Source: 
> 
>     int256 public rebaserMultiplier = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    VAMPRebaser
Line:        2371
Source: 
>     /// @notice Whether or not this token is first in uniswap VAMP<>Reserve pair
>     bool public isToken0;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        105
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UInt256Lib
Line:        161
Source: 
> library UInt256Lib {
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        547
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        548
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        549
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        550
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        551
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        552
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        553
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    VAMPRebaser
Line:        2559
Source: 
>         lastTwapPrice = currentTwapPrice;
>         lastRebaseTimestampSec = block.timestamp;
>                                  ^^^^^^^^^^^^^^^
>         currentTwapPrice = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    VAMPRebaser
Line:        2578
Source: 
>         require(
>             block.timestamp > rebaseActivatedTime.add(rebaseDelay),
>             ^^^^^^^^^^^^^^^
>             "Must wait one period after activating rebase"

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    VAMPRebaser
Line:        2582
Source: 
>         require(
>             block.timestamp > lastRebaseTimestampSec.add(rebaseDelay),
>             ^^^^^^^^^^^^^^^
>             "Must wait for rebase cooldown"

[0m
