[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        77
Source: 
> 
>     function getInitialized() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return initialized;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        787
Source: 
> 
>     function initialize(IAugur _augur, IAugurTrading _augurTrading) public beforeInitialized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        809
Source: 
>      */
>     function getMarket(bytes32 _orderId) public view returns (IMarket) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].market;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        817
Source: 
>      */
>     function getOrderType(bytes32 _orderId) public view returns (Order.Types) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].orderType;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        825
Source: 
>      */
>     function getOutcome(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].outcome;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        833
Source: 
>      */
>     function getAmount(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        849
Source: 
>      */
>     function getOrderCreator(bytes32 _orderId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].creator;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        857
Source: 
>      */
>     function getOrderSharesEscrowed(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].sharesEscrowed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        865
Source: 
>      */
>     function getOrderMoneyEscrowed(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].moneyEscrowed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        869
Source: 
> 
>     function getOrderDataForCancel(bytes32 _orderId) public view returns (uint256 _moneyEscrowed, uint256 _sharesEscrowed, Order.Types _type, IMarket _market, uint256 _outcome, address _creator) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Order.Data storage _order = orders[_orderId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        879
Source: 
> 
>     function getOrderDataForLogs(bytes32 _orderId) public view returns (Order.Types _type, address[] memory _addressData, uint256[] memory _uint256Data) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Order.Data storage _order = orders[_orderId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        896
Source: 
>      */
>     function getTotalEscrowed(IMarket _market) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return marketOrderData[address(_market)].totalEscrowed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        905
Source: 
>      */
>     function getLastOutcomePrice(IMarket _market, uint256 _outcome) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return marketOrderData[address(_market)].prices[_outcome];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        931
Source: 
>      */
>     function getBestOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return bestOrder[getBestOrderWorstOrderHash(_market, _outcome, _type)];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Orders
Line:        941
Source: 
>      */
>     function getWorstOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return worstOrder[getBestOrderWorstOrderHash(_market, _outcome, _type)];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        789
Source: 
>         endInitialization();
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        793
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        794
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        795
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trade = _augurTrading.lookup("Trade");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        796
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         trade = _augurTrading.lookup("Trade");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        797
Source: 
>         trade = _augurTrading.lookup("Trade");
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        1027
Source: 
>         require(msg.sender == createOrder || msg.sender == address(this));
>         require(_uints[2] < _market.getNumberOfOutcomes(), "Orders.saveOrder: Outcome not in market range");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _orderId = _bytes32s[3];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        1041
Source: 
>         insertOrderIntoList(_order, _bytes32s[0], _bytes32s[1]);
>         augurTrading.logOrderCreated(_order.market.getUniverse(), _orderId, _bytes32s[2]);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _orderId;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        1041
Source: 
>         insertOrderIntoList(_order, _bytes32s[0], _bytes32s[1]);
>         augurTrading.logOrderCreated(_order.market.getUniverse(), _orderId, _bytes32s[2]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _orderId;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        1057
Source: 
>         Order.Data storage _order = orders[_orderId];
>         require(_order.outcome < _order.market.getNumberOfOutcomes(), "Orders.recordFillOrder: Outcome is not in market range");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_orderId != bytes32(0), "Orders.recordFillOrder: orderId is 0x0");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Orders
Line:        1061
Source: 
>         require(_tokensFilled <= _order.moneyEscrowed, "Orders.recordFillOrder: tokens filled higher than order amount");
>         require(_order.price <= _order.market.getNumTicks(), "Orders.recordFillOrder: Price outside of market range");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_fill <= _order.amount, "Orders.recordFillOrder: Fill higher than order amount");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Orders
Line:        1045
Source: 
> 
>     function removeOrder(bytes32 _orderId) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == cancelOrder || msg.sender == address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Orders
Line:        1159
Source: 
> 
>     function ascendOrderList(Order.Types _type, uint256 _price, bytes32 _lowestOrderId) public view returns (bytes32 _betterOrderId, bytes32 _worseOrderId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _worseOrderId = _lowestOrderId;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Orders
Line:        1182
Source: 
> 
>     function descendOrderList(Order.Types _type, uint256 _price, bytes32 _highestOrderId) public view returns (bytes32 _betterOrderId, bytes32 _worseOrderId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _betterOrderId = _highestOrderId;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Orders
Line:        1205
Source: 
> 
>     function findBoundingOrders(Order.Types _type, uint256 _price, bytes32 _bestOrderId, bytes32 _worstOrderId, bytes32 _betterOrderId, bytes32 _worseOrderId) public returns (bytes32 betterOrderId, bytes32 worseOrderId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_bestOrderId == _worstOrderId) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        787
Source: 
> 
>     function initialize(IAugur _augur, IAugurTrading _augurTrading) public beforeInitialized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        809
Source: 
>      */
>     function getMarket(bytes32 _orderId) public view returns (IMarket) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].market;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        817
Source: 
>      */
>     function getOrderType(bytes32 _orderId) public view returns (Order.Types) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].orderType;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        825
Source: 
>      */
>     function getOutcome(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].outcome;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        833
Source: 
>      */
>     function getAmount(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        841
Source: 
>      */
>     function getPrice(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].price;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        849
Source: 
>      */
>     function getOrderCreator(bytes32 _orderId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].creator;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        857
Source: 
>      */
>     function getOrderSharesEscrowed(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].sharesEscrowed;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        865
Source: 
>      */
>     function getOrderMoneyEscrowed(bytes32 _orderId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].moneyEscrowed;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        869
Source: 
> 
>     function getOrderDataForCancel(bytes32 _orderId) public view returns (uint256 _moneyEscrowed, uint256 _sharesEscrowed, Order.Types _type, IMarket _market, uint256 _outcome, address _creator) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Order.Data storage _order = orders[_orderId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        879
Source: 
> 
>     function getOrderDataForLogs(bytes32 _orderId) public view returns (Order.Types _type, address[] memory _addressData, uint256[] memory _uint256Data) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Order.Data storage _order = orders[_orderId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        896
Source: 
>      */
>     function getTotalEscrowed(IMarket _market) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return marketOrderData[address(_market)].totalEscrowed;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        905
Source: 
>      */
>     function getLastOutcomePrice(IMarket _market, uint256 _outcome) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return marketOrderData[address(_market)].prices[_outcome];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        913
Source: 
>      */
>     function getBetterOrderId(bytes32 _orderId) public view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].betterOrderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        921
Source: 
>      */
>     function getWorseOrderId(bytes32 _orderId) public view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return orders[_orderId].worseOrderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        931
Source: 
>      */
>     function getBestOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return bestOrder[getBestOrderWorstOrderHash(_market, _outcome, _type)];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        941
Source: 
>      */
>     function getWorstOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return worstOrder[getBestOrderWorstOrderHash(_market, _outcome, _type)];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        957
Source: 
>      */
>     function getOrderId(Order.Types _type, IMarket _market, uint256 _amount, uint256 _price, address _sender, uint256 _blockNumber, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed) public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Order.calculateOrderId(_type, _market, _amount, _price, _sender, _blockNumber, _outcome, _moneyEscrowed, _sharesEscrowed);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        961
Source: 
> 
>     function isBetterPrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_type == Order.Types.Bid) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        969
Source: 
> 
>     function isWorsePrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_type == Order.Types.Bid) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        977
Source: 
> 
>     function assertIsNotBetterPrice(Order.Types _type, uint256 _price, bytes32 _betterOrderId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!isBetterPrice(_type, _price, _betterOrderId), "Orders.assertIsNotBetterPrice: Is better price");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        982
Source: 
> 
>     function assertIsNotWorsePrice(Order.Types _type, uint256 _price, bytes32 _worseOrderId) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!isWorsePrice(_type, _price, _worseOrderId), "Orders.assertIsNotWorsePrice: Is worse price");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        1025
Source: 
>     // _orderId = _bytes32s[3]
>     function saveOrder(uint256[] calldata _uints, bytes32[] calldata _bytes32s, Order.Types _type, IMarket _market, address _sender) external returns (bytes32 _orderId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == createOrder || msg.sender == address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Orders
Line:        1079
Source: 
> 
>     function setPrice(IMarket _market, uint256 _outcome, uint256 _price) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == trade);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Orders
Line:        789
Source: 
>         endInitialization();
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Orders
Line:        793
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Orders
Line:        794
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Orders
Line:        795
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trade = _augurTrading.lookup("Trade");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Orders
Line:        796
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         trade = _augurTrading.lookup("Trade");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Orders
Line:        797
Source: 
>         trade = _augurTrading.lookup("Trade");
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Orders
Line:        793
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Orders
Line:        794
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Orders
Line:        795
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trade = _augurTrading.lookup("Trade");

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Orders
Line:        796
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         trade = _augurTrading.lookup("Trade");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Orders
Line:        797
Source: 
>         trade = _augurTrading.lookup("Trade");
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        650
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        677
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             ^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        698
Source: 
>         getOrderId(_orderData, _orders);
>         uint256[] memory _uints = new uint256[](5);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _uints[0] = _orderData.amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        704
Source: 
>         _uints[4] = _orderData.sharesEscrowed;
>         bytes32[] memory _bytes32s = new bytes32[](4);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bytes32s[0] = _orderData.betterOrderId;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        728
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        729
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        746
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        870
Source: 
>     function getOrderDataForCancel(bytes32 _orderId) public view returns (uint256 _moneyEscrowed, uint256 _sharesEscrowed, Order.Types _type, IMarket _market, uint256 _outcome, address _creator) {
>         Order.Data storage _order = orders[_orderId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _moneyEscrowed = _order.moneyEscrowed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        880
Source: 
>     function getOrderDataForLogs(bytes32 _orderId) public view returns (Order.Types _type, address[] memory _addressData, uint256[] memory _uint256Data) {
>         Order.Data storage _order = orders[_orderId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addressData = new address[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        988
Source: 
>     function insertOrderIntoList(Order.Data storage _order, bytes32 _betterOrderId, bytes32 _worseOrderId) private returns (bool) {
>         bytes32 _bestOrderWorstOrderHash = getBestOrderWorstOrderHash(_order.market, _order.outcome, _order.orderType);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _bestOrderId = bestOrder[_bestOrderWorstOrderHash];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        989
Source: 
>         bytes32 _bestOrderWorstOrderHash = getBestOrderWorstOrderHash(_order.market, _order.outcome, _order.orderType);
>         bytes32 _bestOrderId = bestOrder[_bestOrderWorstOrderHash];
>         ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _worstOrderId = worstOrder[_bestOrderWorstOrderHash];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        990
Source: 
>         bytes32 _bestOrderId = bestOrder[_bestOrderWorstOrderHash];
>         bytes32 _worstOrderId = worstOrder[_bestOrderWorstOrderHash];
>         ^^^^^^^^^^^^^^^^^^^^^
>         (_betterOrderId, _worseOrderId) = findBoundingOrders(_order.orderType, _order.price, _bestOrderId, _worstOrderId, _betterOrderId, _worseOrderId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1029
Source: 
>         _orderId = _bytes32s[3];
>         Order.Data storage _order = orders[_orderId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _order.market = _market;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1048
Source: 
>         removeOrderFromList(_orderId);
>         Order.Data storage _order = orders[_orderId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         marketOrderData[address(_order.market)].totalEscrowed -= _order.moneyEscrowed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1056
Source: 
>         require(msg.sender == fillOrder || msg.sender == address(this));
>         Order.Data storage _order = orders[_orderId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_order.outcome < _order.market.getNumberOfOutcomes(), "Orders.recordFillOrder: Outcome is not in market range");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1086
Source: 
>     function removeOrderFromList(bytes32 _orderId) private returns (bool) {
>         Order.Data storage _order = orders[_orderId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _betterOrderId = _order.betterOrderId;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1087
Source: 
>         Order.Data storage _order = orders[_orderId];
>         bytes32 _betterOrderId = _order.betterOrderId;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _worseOrderId = _order.worseOrderId;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1088
Source: 
>         bytes32 _betterOrderId = _order.betterOrderId;
>         bytes32 _worseOrderId = _order.worseOrderId;
>         ^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _bestOrderWorstOrderHash = getBestOrderWorstOrderHash(_order.market, _order.outcome, _order.orderType);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1089
Source: 
>         bytes32 _worseOrderId = _order.worseOrderId;
>         bytes32 _bestOrderWorstOrderHash = getBestOrderWorstOrderHash(_order.market, _order.outcome, _order.orderType);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (bestOrder[_bestOrderWorstOrderHash] == _orderId) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1161
Source: 
>         _worseOrderId = _lowestOrderId;
>         bool _isWorstPrice;
>         ^^^^^^^^^^^^^^^^^^
>         if (_type == Order.Types.Bid) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1170
Source: 
>         }
>         bool _isBetterPrice = isBetterPrice(_type, _price, _worseOrderId);
>         ^^^^^^^^^^^^^^^^^^^
>         while (_isBetterPrice && getBetterOrderId(_worseOrderId) != 0 && _price != getPrice(getBetterOrderId(_worseOrderId))) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1184
Source: 
>         _betterOrderId = _highestOrderId;
>         bool _isBestPrice;
>         ^^^^^^^^^^^^^^^^^
>         if (_type == Order.Types.Bid) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Orders
Line:        1193
Source: 
>         }
>         bool _isWorsePrice = isWorsePrice(_type, _price, _betterOrderId);
>         ^^^^^^^^^^^^^^^^^^
>         while (_isWorsePrice && getWorseOrderId(_betterOrderId) != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        793
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        794
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        795
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trade = _augurTrading.lookup("Trade");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        796
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         trade = _augurTrading.lookup("Trade");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        797
Source: 
>         trade = _augurTrading.lookup("Trade");
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        1027
Source: 
>         require(msg.sender == createOrder || msg.sender == address(this));
>         require(_uints[2] < _market.getNumberOfOutcomes(), "Orders.saveOrder: Outcome not in market range");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _orderId = _bytes32s[3];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        1041
Source: 
>         insertOrderIntoList(_order, _bytes32s[0], _bytes32s[1]);
>         augurTrading.logOrderCreated(_order.market.getUniverse(), _orderId, _bytes32s[2]);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _orderId;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        1057
Source: 
>         Order.Data storage _order = orders[_orderId];
>         require(_order.outcome < _order.market.getNumberOfOutcomes(), "Orders.recordFillOrder: Outcome is not in market range");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_orderId != bytes32(0), "Orders.recordFillOrder: orderId is 0x0");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Orders
Line:        1061
Source: 
>         require(_tokensFilled <= _order.moneyEscrowed, "Orders.recordFillOrder: tokens filled higher than order amount");
>         require(_order.price <= _order.market.getNumTicks(), "Orders.recordFillOrder: Price outside of market range");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_fill <= _order.amount, "Orders.recordFillOrder: Fill higher than order amount");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Orders
Line:        789
Source: 
>         endInitialization();
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Orders
Line:        1041
Source: 
>         insertOrderIntoList(_order, _bytes32s[0], _bytes32s[1]);
>         augurTrading.logOrderCreated(_order.market.getUniverse(), _orderId, _bytes32s[2]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _orderId;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        778
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IAugurTrading public augurTrading;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        779
Source: 
>     IAugur public augur;
>     IAugurTrading public augurTrading;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ICash public cash;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        780
Source: 
>     IAugurTrading public augurTrading;
>     ICash public cash;
>     ^^^^^^^^^^^^^^^^^
>     address public trade;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        781
Source: 
>     ICash public cash;
>     address public trade;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public fillOrder;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        782
Source: 
>     address public trade;
>     address public fillOrder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public cancelOrder;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        783
Source: 
>     address public fillOrder;
>     address public cancelOrder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public createOrder;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        784
Source: 
>     address public cancelOrder;
>     address public createOrder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IProfitLoss public profitLoss;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Orders
Line:        785
Source: 
>     address public createOrder;
>     IProfitLoss public profitLoss;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        84
Source: 
>     // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)
>     int256 private constant INT256_MIN = -2**(255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant INT256_MAX = (2**(255) - 1);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        85
Source: 
>     int256 private constant INT256_MIN = -2**(255);
>     int256 private constant INT256_MAX = (2**(255) - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        84
Source: 
>     // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)
>     int256 private constant INT256_MIN = -2**(255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant INT256_MAX = (2**(255) - 1);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        85
Source: 
>     int256 private constant INT256_MIN = -2**(255);
>     int256 private constant INT256_MAX = (2**(255) - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Orders
Line:        1091
Source: 
>         if (bestOrder[_bestOrderWorstOrderHash] == _orderId) {
>             bestOrder[_bestOrderWorstOrderHash] = _worseOrderId;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Orders
Line:        1094
Source: 
>         if (worstOrder[_bestOrderWorstOrderHash] == _orderId) {
>             worstOrder[_bestOrderWorstOrderHash] = _betterOrderId;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Orders
Line:        1097
Source: 
>         if (_betterOrderId != bytes32(0)) {
>             orders[_betterOrderId].worseOrderId = _worseOrderId;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Orders
Line:        1100
Source: 
>         if (_worseOrderId != bytes32(0)) {
>             orders[_worseOrderId].betterOrderId = _betterOrderId;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Orders
Line:        1102
Source: 
>         }
>         _order.betterOrderId = bytes32(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _order.worseOrderId = bytes32(0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Orders
Line:        1103
Source: 
>         _order.betterOrderId = bytes32(0);
>         _order.worseOrderId = bytes32(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        74
Source: 
>     function endInitialization() internal beforeInitialized {
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        789
Source: 
>         endInitialization();
>         cash = ICash(_augur.lookup("Cash"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        791
Source: 
> 
>         augur = _augur;
>         ^^^^^^^^^^^^^^
>         augurTrading = _augurTrading;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        792
Source: 
>         augur = _augur;
>         augurTrading = _augurTrading;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         createOrder = _augurTrading.lookup("CreateOrder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        793
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        794
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        795
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trade = _augurTrading.lookup("Trade");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        796
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         trade = _augurTrading.lookup("Trade");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Orders
Line:        797
Source: 
>         trade = _augurTrading.lookup("Trade");
>         profitLoss = IProfitLoss(_augurTrading.lookup("ProfitLoss"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        142
Source: 
>     function fxpMul(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        146
Source: 
>     function fxpDiv(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        227
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        231
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        644
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        646
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        650
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        657
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        677
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        678
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        709
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Orders
Line:        789
Source: 
>         endInitialization();
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Orders
Line:        1041
Source: 
>         insertOrderIntoList(_order, _bytes32s[0], _bytes32s[1]);
>         augurTrading.logOrderCreated(_order.market.getUniverse(), _orderId, _bytes32s[2]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        142
Source: 
>     function fxpMul(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        146
Source: 
>     function fxpDiv(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        227
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        231
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        644
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        646
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        650
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        657
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        677
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        678
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        709
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt256
Line:        84
Source: 
>     // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)
>     int256 private constant INT256_MIN = -2**(255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant INT256_MAX = (2**(255) - 1);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt256
Line:        85
Source: 
>     int256 private constant INT256_MIN = -2**(255);
>     int256 private constant INT256_MAX = (2**(255) - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Orders
Line:        778
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IAugurTrading public augurTrading;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Orders
Line:        780
Source: 
>     IAugurTrading public augurTrading;
>     ICash public cash;
>     ^^^^^^^^^^^^^^^^^
>     address public trade;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt256
Line:        84
Source: 
>     // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)
>     int256 private constant INT256_MIN = -2**(255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant INT256_MAX = (2**(255) - 1);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt256
Line:        85
Source: 
>     int256 private constant INT256_MIN = -2**(255);
>     int256 private constant INT256_MAX = (2**(255) - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
