[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Bytes
Line:        48
Source: 
>     function toBytes1(uint256 _a) internal pure returns (bytes1 c) {
>         assembly { c := shl(248, _a) }
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Bytes
Line:        54
Source: 
>         c = toBytes1(_b);
>         assembly { c := add(_a, c) }
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Bytes
Line:        61
Source: 
>         require(_a.length <= 20);
>         assembly {
>           ^^^^^^^^
>             b := shr(mul(sub(32, mload(_a)), 8), mload(add(_a, 32)))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Bytes
Line:        87
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             b := 0x0

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SCOTT
Line:        448
Source: 
>         SCOTT p;
>         assembly { p := create(0, add(pcode, 0x20), mload(pcode)) }
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    SCOTT
Line:        450
Source: 
> 
>         p.init(sender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^
>         emit NewSCOTT(address(p));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        331
Source: 
>      */
>     function totalSupply() public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        338
Source: 
>      */
>     function balanceOf(address account) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        350
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        358
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        369
Source: 
>      */
>     function approve(address spender, uint256 amount) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        386
Source: 
>      */
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        404
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCOTT
Line:        423
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SCOTT
Line:        319
Source: 
> 
>     function init(
>       ^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SCOTT
Line:        350
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SCOTT
Line:        386
Source: 
>      */
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SCOTT
Line:        404
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SCOTT
Line:        423
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SCOTT
Line:        338
Source: 
>      */
>     function balanceOf(address account) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SCOTT
Line:        358
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SCOTT
Line:        369
Source: 
>      */
>     function approve(address spender, uint256 amount) public returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SCOTT
Line:        450
Source: 
> 
>         p.init(sender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^
>         emit NewSCOTT(address(p));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SCOTT
Line:        304
Source: 
> 
>     string constant public symbol = "SCOTT";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string constant public name = "Stop SCOTT";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SCOTT
Line:        305
Source: 
>     string constant public symbol = "SCOTT";
>     string constant public name = "Stop SCOTT";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SCOTT
Line:        306
Source: 
>     string constant public name = "Stop SCOTT";
>     uint256 constant public decimals = 18;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        262
Source: 
>     // by Agusx1211
>     bytes constant CODE1 = hex"60"; // + <size>                                   // Copy code to memory
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        263
Source: 
>     bytes constant CODE1 = hex"60"; // + <size>                                   // Copy code to memory
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        264
Source: 
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        265
Source: 
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE5 = hex"57fd5bf3";                                         // Return proxy

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        266
Source: 
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump
>     bytes constant CODE5 = hex"57fd5bf3";                                         // Return proxy
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        268
Source: 
> 
>     bytes1 constant BASE_SIZE = 0x1d;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant PUSH_1 = 0x60;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        269
Source: 
>     bytes1 constant BASE_SIZE = 0x1d;
>     bytes1 constant PUSH_1 = 0x60;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant BASE_RETURN_JUMP = 0x1b;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinimalProxy
Line:        270
Source: 
>     bytes1 constant PUSH_1 = 0x60;
>     bytes1 constant BASE_RETURN_JUMP = 0x1b;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SCOTT
Line:        325
Source: 
>         _mint(_to, _amount);
>         proxyCode = SCOTT(msg.sender).proxyCode();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SCOTT
Line:        450
Source: 
> 
>         p.init(sender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^
>         emit NewSCOTT(address(p));

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SCOTT
Line:        450
Source: 
> 
>         p.init(sender, amount);
>           ^
>         emit NewSCOTT(address(p));

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SCOTT
Line:        302
Source: 
> 
>     uint256 private _totalSupply;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SCOTT
Line:        304
Source: 
> 
>     string constant public symbol = "SCOTT";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string constant public name = "Stop SCOTT";

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SCOTT
Line:        305
Source: 
>     string constant public symbol = "SCOTT";
>     string constant public name = "Stop SCOTT";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant public decimals = 18;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SCOTT
Line:        306
Source: 
>     string constant public name = "Stop SCOTT";
>     uint256 constant public decimals = 18;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        262
Source: 
>     // by Agusx1211
>     bytes constant CODE1 = hex"60"; // + <size>                                   // Copy code to memory
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        263
Source: 
>     bytes constant CODE1 = hex"60"; // + <size>                                   // Copy code to memory
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        264
Source: 
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        265
Source: 
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE5 = hex"57fd5bf3";                                         // Return proxy

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        266
Source: 
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump
>     bytes constant CODE5 = hex"57fd5bf3";                                         // Return proxy
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        268
Source: 
> 
>     bytes1 constant BASE_SIZE = 0x1d;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant PUSH_1 = 0x60;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        269
Source: 
>     bytes1 constant BASE_SIZE = 0x1d;
>     bytes1 constant PUSH_1 = 0x60;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant BASE_RETURN_JUMP = 0x1b;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    MinimalProxy
Line:        270
Source: 
>     bytes1 constant PUSH_1 = 0x60;
>     bytes1 constant BASE_RETURN_JUMP = 0x1b;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SCOTT
Line:        470
Source: 
> 
>         _totalSupply = _totalSupply.add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[account] = _balances[account].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SCOTT
Line:        471
Source: 
>         _totalSupply = _totalSupply.add(amount);
>         _balances[account] = _balances[account].add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), account, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SCOTT
Line:        325
Source: 
>         _mint(_to, _amount);
>         proxyCode = SCOTT(msg.sender).proxyCode();
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SCOTT
Line:        493
Source: 
> 
>         _allowances[owner][spender] = amount;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SCOTT
Line:        453
Source: 
> 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SCOTT
Line:        454
Source: 
>         _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>         _balances[recipient] = _balances[recipient].add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Bytes
Line:        19
Source: 
>     function concat(bytes memory _a, bytes1 _b) internal pure returns (bytes memory _out) {
>         return concat(_a, abi.encodePacked(_b));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Bytes
Line:        53
Source: 
>     function plus(bytes1 _a, uint256 _b) internal pure returns (bytes1 c) {
>         c = toBytes1(_b);
>               ^^^^^^^^^^^
>         assembly { c := add(_a, c) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MinimalProxy
Line:        282
Source: 
>             CODE1,
>             BASE_SIZE.plus(_address.length).toBytes(),
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             CODE2,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MinimalProxy
Line:        284
Source: 
>             CODE2,
>             CODE3.concat(PUSH_1.plus(_address.length - 1)).concat(_address),
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             CODE4.concat(BASE_RETURN_JUMP.plus(_address.length)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MinimalProxy
Line:        280
Source: 
>         require(_address.length <= 20, "Address too long");
>         initCode = Bytes.concat(
>                      ^^^^^^^^^^^
>             CODE1,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SCOTT
Line:        304
Source: 
> 
>     string constant public symbol = "SCOTT";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string constant public name = "Stop SCOTT";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SCOTT
Line:        305
Source: 
>     string constant public symbol = "SCOTT";
>     string constant public name = "Stop SCOTT";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SCOTT
Line:        306
Source: 
>     string constant public name = "Stop SCOTT";
>     uint256 constant public decimals = 18;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        262
Source: 
>     // by Agusx1211
>     bytes constant CODE1 = hex"60"; // + <size>                                   // Copy code to memory
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        263
Source: 
>     bytes constant CODE1 = hex"60"; // + <size>                                   // Copy code to memory
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        264
Source: 
>     bytes constant CODE2 = hex"80600b6000396000f3";                               // Return and deploy contract
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        265
Source: 
>     bytes constant CODE3 = hex"3660008037600080366000";   // + <pushx> + <source> // Proxy, copy calldata and start delegatecall
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes constant CODE5 = hex"57fd5bf3";                                         // Return proxy

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        266
Source: 
>     bytes constant CODE4 = hex"5af43d6000803e60003d9160"; // + <return jump>      // Do delegatecall and return jump
>     bytes constant CODE5 = hex"57fd5bf3";                                         // Return proxy
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        268
Source: 
> 
>     bytes1 constant BASE_SIZE = 0x1d;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant PUSH_1 = 0x60;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        269
Source: 
>     bytes1 constant BASE_SIZE = 0x1d;
>     bytes1 constant PUSH_1 = 0x60;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes1 constant BASE_RETURN_JUMP = 0x1b;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinimalProxy
Line:        270
Source: 
>     bytes1 constant PUSH_1 = 0x60;
>     bytes1 constant BASE_RETURN_JUMP = 0x1b;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
