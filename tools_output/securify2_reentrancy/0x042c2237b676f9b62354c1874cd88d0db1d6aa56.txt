Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ToGETher
Line:        295
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ToGETher
Line:        82
Source: 
>         uint private cost = 0.06 ether;
>         address[25000] private FirstLineUser;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint public countFirstLineUser = 25000;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ToGETher
Line:        111
Source: 
>       // This function is needed to adjust the size of the entry fee in case of a strong increase in the price of ETH.
>     function changeCostInWei(uint NewCost)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       cost = NewCost;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ToGETher
Line:        117
Source: 
>    //This function is necessary so that users can see the actual size of the entry cost.  The cost is indicated in WEI. 1 ETH = 1,000,000,000,000,000,000 Wei.
>      function viewCost()public view  returns (uint){
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return uint (cost);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ToGETher
Line:        123
Source: 
> // This function is for checking the balance of a smart contract. Since funds are immediately distributed among users, the balance should always be 0.
>    function viewContractbalance() public view returns (uint256) {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ToGETher
Line:        166
Source: 
>     
>    function RegistrationFirstLine(address userAddress) payable public  {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    address referrerAddress = ownerWallet;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ToGETher
Line:        215
Source: 
>      
>     function registrationWithPartner(address referrerAddress, address userAddress) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address UpLinePartner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ToGETher
Line:        111
Source: 
>       // This function is needed to adjust the size of the entry fee in case of a strong increase in the price of ETH.
>     function changeCostInWei(uint NewCost)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       cost = NewCost;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ToGETher
Line:        290
Source: 
> 
>  function isUserExists(address userAddress) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[userAddress].id != 0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ToGETher
Line:        176
Source: 
>         partners.push(partner(userAddress, referrerAddress, UpLinePartner));
>      if (!address(uint160(receiver)).send(msg.value)) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ToGETher
Line:        177
Source: 
>      if (!address(uint160(receiver)).send(msg.value)) {
>       return address(uint160(receiver)).transfer(address(this).balance);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ToGETher
Line:        253
Source: 
>          if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ToGETher
Line:        256
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ToGETher
Line:        264
Source: 
>         if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ToGETher
Line:        267
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ToGETher
Line:        70
Source: 
>          
>          struct partner {
>          ^^^^^^^^^^^^^^^^
>              address userAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ToGETher
Line:        82
Source: 
>         uint private cost = 0.06 ether;
>         address[25000] private FirstLineUser;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint public countFirstLineUser = 25000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ToGETher
Line:        166
Source: 
>     
>    function RegistrationFirstLine(address userAddress) payable public  {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    address referrerAddress = ownerWallet;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ToGETher
Line:        169
Source: 
>    address receiver = ownerWallet;
>    address UpLinePartner = ownerWallet;
>    ^^^^^^^^^^^^^^^^^^^^^
>    require(!isUserExists(userAddress), "User already Exists");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ToGETher
Line:        216
Source: 
>     function registrationWithPartner(address referrerAddress, address userAddress) public payable {
>          address UpLinePartner;
>          ^^^^^^^^^^^^^^^^^^^^^
>          users[userAddress].referrerAddress = referrerAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.4.0 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        177
Source: 
>      if (!address(uint160(receiver)).send(msg.value)) {
>       return address(uint160(receiver)).transfer(address(this).balance);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        253
Source: 
>          if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        256
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        264
Source: 
>         if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        267
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        176
Source: 
>         partners.push(partner(userAddress, referrerAddress, UpLinePartner));
>      if (!address(uint160(receiver)).send(msg.value)) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        177
Source: 
>      if (!address(uint160(receiver)).send(msg.value)) {
>       return address(uint160(receiver)).transfer(address(this).balance);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        252
Source: 
>         
>          if (!address(uint160(receiver)).send(msg.value/2) ) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(uint160(receiver)).transfer(address(this).balance/2); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        253
Source: 
>          if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        255
Source: 
>                }
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        256
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        263
Source: 
>            
>         if (!address(uint160(receiver)).send(msg.value/2) ) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(uint160(receiver)).transfer(address(this).balance/2); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        264
Source: 
>         if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        266
Source: 
>                }
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ToGETher
Line:        267
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        176
Source: 
>         partners.push(partner(userAddress, referrerAddress, UpLinePartner));
>      if (!address(uint160(receiver)).send(msg.value)) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        177
Source: 
>      if (!address(uint160(receiver)).send(msg.value)) {
>       return address(uint160(receiver)).transfer(address(this).balance);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        252
Source: 
>         
>          if (!address(uint160(receiver)).send(msg.value/2) ) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(uint160(receiver)).transfer(address(this).balance/2); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        253
Source: 
>          if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        255
Source: 
>                }
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        256
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        263
Source: 
>            
>         if (!address(uint160(receiver)).send(msg.value/2) ) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(uint160(receiver)).transfer(address(this).balance/2); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        264
Source: 
>         if (!address(uint160(receiver)).send(msg.value/2) ) {
>         return address(uint160(receiver)).transfer(address(this).balance/2); 
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        266
Source: 
>                }
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ToGETher
Line:        267
Source: 
>                 if (!address(uint160(secondReceiverAddress)).send(msg.value)) {
>                return address(uint160(secondReceiverAddress)).transfer(address(this).balance); 
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ToGETher
Line:        245
Source: 
>         uint partnersCount;
>         uint x = partnersCount % 4 ;
>                  ^^^^^^^^^^^^^
>          (x == 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ToGETher
Line:        82
Source: 
>         uint private cost = 0.06 ether;
>         address[25000] private FirstLineUser;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint public countFirstLineUser = 25000;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ToGETher
Line:        217
Source: 
>          address UpLinePartner;
>          users[userAddress].referrerAddress = referrerAddress;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          UpLinePartner = users[referrerAddress].referrerAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ToGETher
Line:        82
Source: 
>         uint private cost = 0.06 ether;
>         address[25000] private FirstLineUser;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint public countFirstLineUser = 25000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ToGETher
Line:        301
Source: 
>     mapping(address => User) public users;
>     mapping(uint => address) private userIds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => address) private idToAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ToGETher
Line:        303
Source: 
>     mapping(uint => address) private idToAddress;
>     mapping(address => uint) private balances; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public lastUserId = 2;

[0m
