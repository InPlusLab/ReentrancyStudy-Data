Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    LeadStake
Line:        156
Source: 
>         //makes sure referrer is registered already
>         require(registered[_referrer] || address(0x0) == _referrer, "Referrer must be registered");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         //makes sure user has enough amount

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        33
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b);
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        33
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b);
>                           ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        65
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        65
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LeadStake
Line:        187
Source: 
>     //calculates stakeholders latest unclaimed earnings 
>     function calculateEarnings(address _stakeholder) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //records the number of days between the last payout time and now

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LeadStake
Line:        302
Source: 
>     //sets the staking rate
>     function setStakingTaxRate(uint _stakingTaxRate) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakingTaxRate = _stakingTaxRate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LeadStake
Line:        307
Source: 
>     //sets the unstaking rate
>     function setUnstakingTaxRate(uint _unstakingTaxRate) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         unstakingTaxRate = _unstakingTaxRate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LeadStake
Line:        312
Source: 
>     //sets the daily ROI
>     function setDailyROI(uint _dailyROI) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dailyROI = _dailyROI;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LeadStake
Line:        317
Source: 
>     //sets the registration tax
>     function setRegistrationTax(uint _registrationTax) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrationTax = _registrationTax;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LeadStake
Line:        322
Source: 
>     //sets the minimum stake value
>     function setMinimumStakeValue(uint _minimumStakeValue) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimumStakeValue = _minimumStakeValue;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        32
Source: 
>     function mul(uint a, uint b) internal pure returns (uint c) {
>         c = a * b;
>             ^^^^^
>         require(a == 0 || c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LeadStake
Line:        158
Source: 
>         //makes sure user has enough amount
>         require(IERC20(lead).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //makes sure amount is more than the registration fee and the minimum deposit

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LeadStake
Line:        162
Source: 
>         //makes sure smart contract transfers LEAD from user
>         require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //calculates final amount after deducting registration tax

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LeadStake
Line:        205
Source: 
>         //makes sure stakeholder has enough balance
>         require(IERC20(lead).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //makes sure smart contract transfers LEAD from user

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LeadStake
Line:        207
Source: 
>         //makes sure smart contract transfers LEAD from user
>         require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //calculates staking tax on amount

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LeadStake
Line:        252
Source: 
>         //transfers value to stakeholder
>         IERC20(lead).transfer(msg.sender, afterTax);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //conditional statement if stakeholder has no stake left

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LeadStake
Line:        269
Source: 
>         //makes sure _amount is not more than required balance
>         require((IERC20(lead).balanceOf(address(this))).sub(totalStaked) >= totalReward, 'Insufficient LEAD balance in pool');
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //initializes stake rewards

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LeadStake
Line:        281
Source: 
>         //transfers total rewards to stakeholder
>         IERC20(lead).transfer(msg.sender, totalReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //emit event

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LeadStake
Line:        158
Source: 
>         //makes sure user has enough amount
>         require(IERC20(lead).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //makes sure amount is more than the registration fee and the minimum deposit

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LeadStake
Line:        162
Source: 
>         //makes sure smart contract transfers LEAD from user
>         require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //calculates final amount after deducting registration tax

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LeadStake
Line:        205
Source: 
>         //makes sure stakeholder has enough balance
>         require(IERC20(lead).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //makes sure smart contract transfers LEAD from user

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LeadStake
Line:        207
Source: 
>         //makes sure smart contract transfers LEAD from user
>         require(IERC20(lead).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //calculates staking tax on amount

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LeadStake
Line:        269
Source: 
>         //makes sure _amount is not more than required balance
>         require((IERC20(lead).balanceOf(address(this))).sub(totalStaked) >= totalReward, 'Insufficient LEAD balance in pool');
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //initializes stake rewards

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LeadStake
Line:        289
Source: 
>     function rewardPool() external view onlyOwner() returns(uint claimable) {
>         return (IERC20(lead).balanceOf(address(this))).sub(totalStaked);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LeadStake
Line:        329
Source: 
>         //makes sure _amount is not more than required balance
>         require((IERC20(lead).balanceOf(address(this))).sub(totalStaked) >= _amount, 'Insufficient LEAD balance in pool');
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //transfers _amount to _address

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LeadStake
Line:        252
Source: 
>         //transfers value to stakeholder
>         IERC20(lead).transfer(msg.sender, afterTax);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //conditional statement if stakeholder has no stake left

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LeadStake
Line:        281
Source: 
>         //transfers total rewards to stakeholder
>         IERC20(lead).transfer(msg.sender, totalReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //emit event

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LeadStake
Line:        331
Source: 
>         //transfers _amount to _address
>         IERC20(lead).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //emit event

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LeadStake
Line:        79
Source: 
>     //total amount of staked lead
>     uint public totalStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     //tax rate for staking in percentage

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LeadStake
Line:        252
Source: 
>         //transfers value to stakeholder
>         IERC20(lead).transfer(msg.sender, afterTax);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //conditional statement if stakeholder has no stake left

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LeadStake
Line:        281
Source: 
>         //transfers total rewards to stakeholder
>         IERC20(lead).transfer(msg.sender, totalReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //emit event

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LeadStake
Line:        331
Source: 
>         //transfers _amount to _address
>         IERC20(lead).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //emit event

[0m
