Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoLight
Line:        437
Source: 
>     function bTA(bytes memory bys) private pure returns (address  addr ) {
>         assembly { 
>         ^^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoLight
Line:        69
Source: 
>     mapping (uint => uint) public TRS;
>     uint RLM = 3;
>     ^^^^^^^^^^^^
>     uint L = 180 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoLight
Line:        70
Source: 
>     uint RLM = 3;
>     uint L = 180 days;
>     ^^^^^^^^^^^^^^^^^
>     uint public T_1 = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoLight
Line:        71
Source: 
>     uint L = 180 days;
>     uint public T_1 = 10;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public T_2 = 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoLight
Line:        72
Source: 
>     uint public T_1 = 10;
>     uint public T_2 = 30;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public T_3 = 70;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoLight
Line:        73
Source: 
>     uint public T_2 = 30;
>     uint public T_3 = 70;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public T_4 = 150;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoLight
Line:        74
Source: 
>     uint public T_3 = 70;
>     uint public T_4 = 150;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint public T_5 = 500;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoLight
Line:        75
Source: 
>     uint public T_4 = 150;
>     uint public T_5 = 500;
>     ^^^^^^^^^^^^^^^^^^^^^
>     struct US {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        48
Source: 
> 
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        48
Source: 
> 
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLight
Line:        242
Source: 
>     }
>     function funcD() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit dE(msg.sender,msg.value,now);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLight
Line:        245
Source: 
>     }
>     function funcE(uint _v) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(_v);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLight
Line:        249
Source: 
>     }
>     function funcF(address _u,uint _l) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(us[_u].x,'User not exist');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLight
Line:        423
Source: 
>     }
>     function vUR(address _u) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLight
Line:        426
Source: 
>     }
>     function vUT(address _u, address _aT) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].e[_aT];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLight
Line:        430
Source: 
> 
>     function vULE(address _u, uint _l) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].d[_l];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLight
Line:        433
Source: 
>     }
>     function vURS(address _u,uint _r) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].f[_r];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        48
Source: 
> 
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        52
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        48
Source: 
> 
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        52
Source: 
> 
>   function setManager(address _manager) public onlyOwnerOrManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       manager = _manager;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLight
Line:        245
Source: 
>     }
>     function funcE(uint _v) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(_v);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLight
Line:        423
Source: 
>     }
>     function vUR(address _u) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLight
Line:        426
Source: 
>     }
>     function vUT(address _u, address _aT) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].e[_aT];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLight
Line:        430
Source: 
> 
>     function vULE(address _u, uint _l) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].d[_l];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLight
Line:        433
Source: 
>     }
>     function vURS(address _u,uint _r) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return us[_u].f[_r];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CryptoLight
Line:        192
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[1]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CryptoLight
Line:        202
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[2]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CryptoLight
Line:        212
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[3]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CryptoLight
Line:        222
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[4]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CryptoLight
Line:        232
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[5]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        59
Source: 
> 
>     event rLE(address indexed _u, address indexed _r, uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event bLE(address indexed _u, uint _l, uint _t);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        60
Source: 
>     event rLE(address indexed _u, address indexed _r, uint _t);
>     event bLE(address indexed _u, uint _l, uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event gME(address indexed _u, address indexed _r, uint _l, uint _t);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        61
Source: 
>     event bLE(address indexed _u, uint _l, uint _t);
>     event gME(address indexed _u, address indexed _r, uint _l, uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event lME(address indexed _u, address indexed _r, uint _l, uint _t);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        62
Source: 
>     event gME(address indexed _u, address indexed _r, uint _l, uint _t);
>     event lME(address indexed _u, address indexed _r, uint _l, uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event bRE(address indexed _u, uint _l, uint _t);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        63
Source: 
>     event lME(address indexed _u, address indexed _r, uint _l, uint _t);
>     event bRE(address indexed _u, uint _l, uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event lRE(address indexed _u, uint _l,uint _t);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        64
Source: 
>     event bRE(address indexed _u, uint _l, uint _t);
>     event lRE(address indexed _u, uint _l,uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event dE(address indexed _u,uint _v,uint _t);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        65
Source: 
>     event lRE(address indexed _u, uint _l,uint _t);
>     event dE(address indexed _u,uint _v,uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event wE(address indexed _u,uint _v,uint _t);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        66
Source: 
>     event dE(address indexed _u,uint _v,uint _t);
>     event wE(address indexed _u,uint _v,uint _t);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) public LP;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        67
Source: 
>     event wE(address indexed _u,uint _v,uint _t);
>     mapping (uint => uint) public LP;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) public TRS;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        68
Source: 
>     mapping (uint => uint) public LP;
>     mapping (uint => uint) public TRS;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint RLM = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        69
Source: 
>     mapping (uint => uint) public TRS;
>     uint RLM = 3;
>     ^^^^^^^^^^^^
>     uint L = 180 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        70
Source: 
>     uint RLM = 3;
>     uint L = 180 days;
>     ^^^^^^^^^^^^^^^^^
>     uint public T_1 = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        71
Source: 
>     uint L = 180 days;
>     uint public T_1 = 10;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public T_2 = 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        72
Source: 
>     uint public T_1 = 10;
>     uint public T_2 = 30;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public T_3 = 70;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        73
Source: 
>     uint public T_2 = 30;
>     uint public T_3 = 70;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public T_4 = 150;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        74
Source: 
>     uint public T_3 = 70;
>     uint public T_4 = 150;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint public T_5 = 500;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        75
Source: 
>     uint public T_4 = 150;
>     uint public T_5 = 500;
>     ^^^^^^^^^^^^^^^^^^^^^
>     struct US {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        148
Source: 
>     function funcA(uint _l) public payable {
>         uint _b = _l;
>         ^^^^^^^
>         require(!us[msg.sender].x, 'User exist');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        187
Source: 
>         if (us[_u].c.length == 3){
>             uint _t1C = us[_u].e[us[_u].c[0]];
>             ^^^^^^^^^
>             uint _t2C = us[_u].e[us[_u].c[1]];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        188
Source: 
>             uint _t1C = us[_u].e[us[_u].c[0]];
>             uint _t2C = us[_u].e[us[_u].c[1]];
>             ^^^^^^^^^
>             uint _t3C = us[_u].e[us[_u].c[2]];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        189
Source: 
>             uint _t2C = us[_u].e[us[_u].c[1]];
>             uint _t3C = us[_u].e[us[_u].c[2]];
>             ^^^^^^^^^
>             if (_t1C >= T_1 && _t2C >= T_1 && _t3C >= T_1 && !us[_u].f[0]){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        191
Source: 
>             if (_t1C >= T_1 && _t2C >= T_1 && _t3C >= T_1 && !us[_u].f[0]){
>                 bool _rs;
>                 ^^^^^^^^
>                 _rs = address(uint160(_u)).send(TRS[1]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        201
Source: 
>             if (_t1C >= T_2 && _t2C >= T_2 && _t3C >= T_2 && !us[_u].f[1]){
>                 bool _rs;
>                 ^^^^^^^^
>                 _rs = address(uint160(_u)).send(TRS[2]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        211
Source: 
>             if (_t1C >= T_3 && _t2C >= T_3 && _t3C >= T_3 && !us[_u].f[2]){
>                 bool _rs;
>                 ^^^^^^^^
>                 _rs = address(uint160(_u)).send(TRS[3]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        221
Source: 
>             if (_t1C >= T_4 && _t2C >= T_4 && _t3C >= T_4 && !us[_u].f[3]){
>                 bool _rs;
>                 ^^^^^^^^
>                 _rs = address(uint160(_u)).send(TRS[4]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        231
Source: 
>             if (_t1C >= T_5 && _t2C >= T_5 && _t3C >= T_5 && !us[_u].f[4]){
>                 bool _rs;
>                 ^^^^^^^^
>                 _rs = address(uint160(_u)).send(TRS[5]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        252
Source: 
>         require(_l>1 && _l<=5,'Incorrect level');
>         for (uint l = 2; l <= _l;l++){
>              ^^^^^^
>             us[_u].d[l] = now + L;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        267
Source: 
> 
>             for(uint l =_l-1; l>0; l-- ){
>                 ^^^^^^
>                 require(us[msg.sender].d[l] >= now, 'Buy the previous level');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        281
Source: 
>     function funcH(uint _l, address _u) internal {
>         address _r;
>         ^^^^^^^^^^
>         address _r1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        282
Source: 
>         address _r;
>         address _r1;
>         ^^^^^^^^^^^
>         address _r2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        283
Source: 
>         address _r1;
>         address _r2;
>         ^^^^^^^^^^^
>         address _r3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        284
Source: 
>         address _r2;
>         address _r3;
>         ^^^^^^^^^^^
>         address _r4;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        285
Source: 
>         address _r3;
>         address _r4;
>         ^^^^^^^^^^^
>         if(_l == 1){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        311
Source: 
>         if(us[_r].d[_l] >= now ){
>             bool _rs;
>             ^^^^^^^^
>             _rs = address(uint160(_r)).send(LP[_l]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        321
Source: 
>         require(_count <= 6,'No Free Referrer');
>         address[] memory _n = new address[](729);
>         ^^^^^^^^^^^^^^^^^^^
>         uint id = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        326
Source: 
>                 if (i == 3){
>                     for (uint l = 0; l < us[_arr[j]].c.length;l++){
>                          ^^^^^^
>                         _n[id] = us[_arr[j]].c[l];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        345
Source: 
>         require(_count <= 6,'No Free Referrer');
>         address[] memory _n = new address[](3**(_count+1));
>         ^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < 4;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        349
Source: 
>                 if (i == 3){
>                     for (uint l = 0; l < us[_arr[j]].c.length;l++){
>                          ^^^^^^
>                         _n[j+(3**_count)*l] = us[_arr[j]].c[l];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        363
Source: 
>         require(_count <= 6,'No Free Referrer');
>         address[] memory _n = new address[](3**(_count+1));
>         ^^^^^^^^^^^^^^^^^^^
>         uint id = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        391
Source: 
>         require(us[_u].x,'User not exist');
>         uint[] memory _n = new uint[](3);
>         ^^^^^^^^^^^^^^^^
>         _n[0] = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        402
Source: 
>         require(_n.length <= 729,'F6');
>         address[] memory _na = new address[](3*_a.length);
>         ^^^^^^^^^^^^^^^^^^^^
>         uint[] memory _nn = new uint[](3*_n.length);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLight
Line:        403
Source: 
>         address[] memory _na = new address[](3*_a.length);
>         uint[] memory _nn = new uint[](3*_n.length);
>         ^^^^^^^^^^^^^^^^^
>         for (uint i = 0;i < 3;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> library SafeMath {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoLight
Line:        69
Source: 
>     mapping (uint => uint) public TRS;
>     uint RLM = 3;
>     ^^^^^^^^^^^^
>     uint L = 180 days;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoLight
Line:        70
Source: 
>     uint RLM = 3;
>     uint L = 180 days;
>     ^^^^^^^^^^^^^^^^^
>     uint public T_1 = 10;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLight
Line:        246
Source: 
>     function funcE(uint _v) public onlyOwner {
>         msg.sender.transfer(_v);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit wE(msg.sender,_v,now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoLight
Line:        312
Source: 
>             bool _rs;
>             _rs = address(uint160(_r)).send(LP[_l]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit gME(_r, msg.sender, _l, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoLight
Line:        192
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[1]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoLight
Line:        202
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[2]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoLight
Line:        212
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[3]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoLight
Line:        222
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[4]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoLight
Line:        232
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[5]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLight
Line:        192
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[1]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLight
Line:        202
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[2]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLight
Line:        212
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[3]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLight
Line:        222
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[4]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLight
Line:        232
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[5]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoLight
Line:        312
Source: 
>             bool _rs;
>             _rs = address(uint160(_r)).send(LP[_l]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit gME(_r, msg.sender, _l, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLight
Line:        312
Source: 
>             bool _rs;
>             _rs = address(uint160(_r)).send(LP[_l]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit gME(_r, msg.sender, _l, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLight
Line:        192
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[1]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLight
Line:        202
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[2]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLight
Line:        212
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[3]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLight
Line:        222
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[4]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLight
Line:        232
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[5]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLight
Line:        246
Source: 
>     function funcE(uint _v) public onlyOwner {
>         msg.sender.transfer(_v);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit wE(msg.sender,_v,now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CryptoLight
Line:        312
Source: 
>             bool _rs;
>             _rs = address(uint160(_r)).send(LP[_l]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit gME(_r, msg.sender, _l, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLight
Line:        312
Source: 
>             bool _rs;
>             _rs = address(uint160(_r)).send(LP[_l]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit gME(_r, msg.sender, _l, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLight
Line:        192
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[1]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLight
Line:        202
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[2]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLight
Line:        212
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[3]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLight
Line:        222
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[4]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLight
Line:        232
Source: 
>                 bool _rs;
>                 _rs = address(uint160(_u)).send(TRS[5]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_rs){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLight
Line:        180
Source: 
>         if (us[_r].x){
>             us[_r].e[_u] += 1;
>             ^^^^^^^^^^^^^^^^^
>             funcC(_r);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLight
Line:        195
Source: 
>                     emit bRE(_u,1,now);
>                     us[_u].f[0] = true;
>                     ^^^^^^^^^^^^^^^^^^
>                 } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLight
Line:        205
Source: 
>                     emit bRE(_u,2,now);
>                     us[_u].f[1] = true;
>                     ^^^^^^^^^^^^^^^^^^
>                 } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLight
Line:        215
Source: 
>                     emit bRE(_u,3,now);
>                     us[_u].f[2] = true;
>                     ^^^^^^^^^^^^^^^^^^
>                 } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLight
Line:        225
Source: 
>                     emit bRE(_u,4,now);
>                     us[_u].f[3] = true;
>                     ^^^^^^^^^^^^^^^^^^
>                 } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLight
Line:        235
Source: 
>                     emit bRE(_u,5,now);
>                     us[_u].f[4] = true;
>                     ^^^^^^^^^^^^^^^^^^
>                 } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        30
Source: 
>   address public manager;
>   address public ownerWallet;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
