Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20
Line:        74
Source: 
>     uint256 private _totalSupply;
>     string private _name = "PROOF UTILITY";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private _symbol = "PRF";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20
Line:        75
Source: 
>     string private _name = "PROOF UTILITY";
>     string private _symbol = "PRF";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private _decimals = 6;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        77
Source: 
>     uint8 private _decimals = 6;
>     function name() public view returns (string memory) { return _name; }    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function symbol() public view returns (string memory) { return _symbol; }    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        78
Source: 
>     function name() public view returns (string memory) { return _name; }    
>     function symbol() public view returns (string memory) { return _symbol; }    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function decimals() public view returns (uint8) { return _decimals; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        79
Source: 
>     function symbol() public view returns (string memory) { return _symbol; }    
>     function decimals() public view returns (uint8) { return _decimals; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view override returns (uint256) { return _totalSupply; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        80
Source: 
>     function decimals() public view returns (uint8) { return _decimals; }
>     function totalSupply() public view override returns (uint256) { return _totalSupply; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        81
Source: 
>     function totalSupply() public view override returns (uint256) { return _totalSupply; }
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        82
Source: 
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        83
Source: 
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        87
Source: 
>     }
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        88
Source: 
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        92
Source: 
>     }
>     function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        98
Source: 
>     }
>     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeAdd(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        102
Source: 
>     }
>     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeSub(subtractedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        77
Source: 
>     uint8 private _decimals = 6;
>     function name() public view returns (string memory) { return _name; }    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function symbol() public view returns (string memory) { return _symbol; }    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        78
Source: 
>     function name() public view returns (string memory) { return _name; }    
>     function symbol() public view returns (string memory) { return _symbol; }    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function decimals() public view returns (uint8) { return _decimals; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        79
Source: 
>     function symbol() public view returns (string memory) { return _symbol; }    
>     function decimals() public view returns (uint8) { return _decimals; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view override returns (uint256) { return _totalSupply; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        82
Source: 
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        83
Source: 
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        87
Source: 
>     }
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        88
Source: 
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        92
Source: 
>     }
>     function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        98
Source: 
>     }
>     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeAdd(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        102
Source: 
>     }
>     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeSub(subtractedValue));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProofUtilityToken
Line:        281
Source: 
>             if(referrers[msg.sender] == address(0)) referrers[msg.sender] = smart;
>             uint256 _rate = EthRateSource.EthToUsdRate();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_rate > 0, "Rate error");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProofUtilityToken
Line:        344
Source: 
>         require(_amount >= 10, "Little amount");
>         payable(insurance).transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProofUtilityToken
Line:        348
Source: 
>     function fnBurn(uint256 amount) external { _burn(msg.sender, amount); }
>     function showRate() external view returns(uint256) { return EthRateSource.EthToUsdRate(); }
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function showTax() external view returns(uint256) { return totalSupply() / 1e13; }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ProofUtilityToken
Line:        345
Source: 
>         payable(insurance).transfer(_amount / 10);
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        83
Source: 
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        92
Source: 
>     }
>     function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        98
Source: 
>     }
>     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeAdd(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        102
Source: 
>     }
>     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeSub(subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        83
Source: 
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        92
Source: 
>     }
>     function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        98
Source: 
>     }
>     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeAdd(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        102
Source: 
>     }
>     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].safeSub(subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProofUtilityToken
Line:        306
Source: 
>     }
>     function fnSto(address source) external onlyFounders {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stoContract == address(0), "Already indicated");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProofUtilityToken
Line:        325
Source: 
>     }
>     function fnSwap(address account, uint256 amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == stoContract, "Access denied");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProofUtilityToken
Line:        347
Source: 
>     }
>     function fnBurn(uint256 amount) external { _burn(msg.sender, amount); }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function showRate() external view returns(uint256) { return EthRateSource.EthToUsdRate(); }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        81
Source: 
>     function totalSupply() public view override returns (uint256) { return _totalSupply; }
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        82
Source: 
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        87
Source: 
>     }
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        88
Source: 
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        81
Source: 
>     function totalSupply() public view override returns (uint256) { return _totalSupply; }
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        82
Source: 
>     function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
>     function swapOf(address account) public view returns (uint256) { return _sto[account]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        87
Source: 
>     }
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        88
Source: 
>     function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; }
>     function approve(address spender, uint256 amount) public virtual override returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProofUtilityToken
Line:        296
Source: 
>     }
>     function fnFounder(address account) external onlyFounders {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint8 i = 0; i < 3; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProofUtilityToken
Line:        301
Source: 
>     }
>     function fnCashier(address account) external onlyFounders { cashier = account; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function fnInsurance(address account) external onlyFounders { insurance = account; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProofUtilityToken
Line:        302
Source: 
>     function fnCashier(address account) external onlyFounders { cashier = account; }
>     function fnInsurance(address account) external onlyFounders { insurance = account; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function fnSource(address source) external onlyFounders {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProofUtilityToken
Line:        303
Source: 
>     function fnInsurance(address account) external onlyFounders { insurance = account; }
>     function fnSource(address source) external onlyFounders {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         EthRateSource = EthRateInterface(source);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProofUtilityToken
Line:        350
Source: 
>     function showTax() external view returns(uint256) { return totalSupply() / 1e13; }
>     function showUser(address account) external view returns(address referrer, uint256 balance, uint256 fix, uint256 profit) { return (referrers[account], balanceOf(account), fixes[account], holds[account]); }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ProofUtilityToken
Line:        256
Source: 
>             else _percent = 2650;
>             _value = amount * _percent / 10000;
>                      ^^^^^^^^^^^^^^^^^
>             uint256 tax = _value * supply / 1e15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ProofUtilityToken
Line:        257
Source: 
>             _value = amount * _percent / 10000;
>             uint256 tax = _value * supply / 1e15;
>                           ^^^^^^^^^^^^^^^
>             _value = _value.safeSub(tax);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ProofUtilityToken
Line:        239
Source: 
>                     _value = _hold * _balance * _percent / 864 / 1e6;
>                     uint256 tax = _value * supply / 1e15;
>                                   ^^^^^^^^^^^^^^^
>                     _value = _value.safeSub(tax);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ProofUtilityToken
Line:        281
Source: 
>             if(referrers[msg.sender] == address(0)) referrers[msg.sender] = smart;
>             uint256 _rate = EthRateSource.EthToUsdRate();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_rate > 0, "Rate error");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthRateInterface
Line:        56
Source: 
> interface EthRateInterface {
>     function EthToUsdRate() external view returns(uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        163
Source: 
>     uint256 private bounted = 35e12;
>     EthRateInterface public EthRateSource = EthRateInterface(0xf1401D5493D257cb7FECE1309B221e186c5b69f9);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Payout(address indexed account, uint256 amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        200
Source: 
>         if(referrers[to] == address(0) && amount > 0 && from != address(0)) referrers[to] = from;
>         uint256 _supply = totalSupply();
>         ^^^^^^^^^^^^^^^
>         if(from == to) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        206
Source: 
>                 if(from != address(0)) {
>                     uint256 _profit = _fixProfit(from, _supply);
>                     ^^^^^^^^^^^^^^^
>                     if(_profit > 0) _fixReward(referrers[from], _profit, _supply);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        211
Source: 
>                     if(fixes[to] > 0) {
>                         uint256 _profit = _fixProfit(to, _supply);
>                         ^^^^^^^^^^^^^^^
>                         if(_profit > 0) _fixReward(referrers[to], _profit, _supply);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        220
Source: 
>     function _fixProfit(address account, uint256 supply) private returns(uint256 _value) {
>         uint256 _balance = balanceOf(account);
>         ^^^^^^^^^^^^^^^^
>         uint256 _hold = block.timestamp - fixes[account];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        221
Source: 
>         uint256 _balance = balanceOf(account);
>         uint256 _hold = block.timestamp - fixes[account];
>         ^^^^^^^^^^^^^
>         uint256 _percent;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        222
Source: 
>         uint256 _hold = block.timestamp - fixes[account];
>         uint256 _percent;
>         ^^^^^^^^^^^^^^^^
>         _value = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        249
Source: 
>     function _fixReward(address referrer, uint256 amount, uint256 supply) private returns(uint256 _value) {
>         uint256 _balance = balanceOf(referrer);
>         ^^^^^^^^^^^^^^^^
>         uint256 _percent;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        250
Source: 
>         uint256 _balance = balanceOf(referrer);
>         uint256 _percent;
>         ^^^^^^^^^^^^^^^^
>         if(_balance >= 1e8 && _balance < 1e12) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        265
Source: 
>         require(supply < 1e15, "Emition is closed");
>         uint256 _profit = _fixProfit(account, supply);
>         ^^^^^^^^^^^^^^^
>         if(_profit > 0) _fixReward(referrers[account], _profit, supply);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        267
Source: 
>         if(_profit > 0) _fixReward(referrers[account], _profit, supply);
>         uint256 _userProfit = holds[account];
>         ^^^^^^^^^^^^^^^^^^^
>         _userProfit = supply + _userProfit > 1e15 ? 1e15 - supply : _userProfit;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        276
Source: 
>     receive() payable external {
>         uint256 _supply = totalSupply();
>         ^^^^^^^^^^^^^^^
>         require(_supply < 1e15, "Sale finished");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        281
Source: 
>             if(referrers[msg.sender] == address(0)) referrers[msg.sender] = smart;
>             uint256 _rate = EthRateSource.EthToUsdRate();
>             ^^^^^^^^^^^^^
>             require(_rate > 0, "Rate error");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        283
Source: 
>             require(_rate > 0, "Rate error");
>             uint256 _amount = msg.value * _rate * 100 / multiply / 1e18;
>             ^^^^^^^^^^^^^^^
>             if(_supply + _amount > 1e15) _amount = 1e15 - _supply;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        330
Source: 
>     function fnProof(bool all) external {
>         uint256 _amount = all ? balanceOf(smart) : balanceOf(smart).safeSub(1e9);
>         ^^^^^^^^^^^^^^^
>         require(_amount >= 3, "Little amount");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        335
Source: 
>     function fnBounty() external {
>         uint256 _delta = totalSupply().safeSub(bounted);
>         ^^^^^^^^^^^^^^
>         uint256 _bounty = _delta / 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        336
Source: 
>         uint256 _delta = totalSupply().safeSub(bounted);
>         uint256 _bounty = _delta / 100;
>         ^^^^^^^^^^^^^^^
>         require(_bounty >= 3, "Little amount");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProofUtilityToken
Line:        342
Source: 
>     function fnEth() external {
>         uint256 _amount = smart.balance;
>         ^^^^^^^^^^^^^^^
>         require(_amount >= 10, "Little amount");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ProofUtilityToken
Line:        171
Source: 
>     modifier onlyFounders() {
>         for(uint256 i = 0; i < founders.length; i++) {
>             ^^^^^^^^^
>             if(founders[i] == msg.sender) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ProofUtilityToken
Line:        344
Source: 
>         require(_amount >= 10, "Little amount");
>         payable(insurance).transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ProofUtilityToken
Line:        345
Source: 
>         payable(insurance).transfer(_amount / 10);
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ProofUtilityToken
Line:        344
Source: 
>         require(_amount >= 10, "Little amount");
>         payable(insurance).transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ProofUtilityToken
Line:        345
Source: 
>         payable(insurance).transfer(_amount / 10);
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ProofUtilityToken
Line:        344
Source: 
>         require(_amount >= 10, "Little amount");
>         payable(insurance).transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ProofUtilityToken
Line:        345
Source: 
>         payable(insurance).transfer(_amount / 10);
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProofUtilityToken
Line:        281
Source: 
>             if(referrers[msg.sender] == address(0)) referrers[msg.sender] = smart;
>             uint256 _rate = EthRateSource.EthToUsdRate();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_rate > 0, "Rate error");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ProofUtilityToken
Line:        348
Source: 
>     function fnBurn(uint256 amount) external { _burn(msg.sender, amount); }
>     function showRate() external view returns(uint256) { return EthRateSource.EthToUsdRate(); }
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function showTax() external view returns(uint256) { return totalSupply() / 1e13; }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        73
Source: 
>     mapping (address => mapping (address => uint256)) private _allowances;
>     uint256 private _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private _name = "PROOF UTILITY";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ProofUtilityToken
Line:        344
Source: 
>         require(_amount >= 10, "Little amount");
>         payable(insurance).transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ProofUtilityToken
Line:        345
Source: 
>         payable(insurance).transfer(_amount / 10);
>         for(uint8 i = 0; i < 3; i++) { payable(founders[i]).transfer(_amount * 3 / 10); }
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        131
Source: 
>         require(spender != address(0), "Zero spender");
>         _allowances[owner][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        117
Source: 
>         _beforeTokenTransfer(address(0), account, amount);
>         _totalSupply = _totalSupply.safeAdd(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[account] = _balances[account].safeAdd(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        118
Source: 
>         _totalSupply = _totalSupply.safeAdd(amount);
>         _balances[account] = _balances[account].safeAdd(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), account, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        124
Source: 
>         _beforeTokenTransfer(account, address(0), amount);
>         _balances[account] = _balances[account].safeSub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.safeSub(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        125
Source: 
>         _balances[account] = _balances[account].safeSub(amount);
>         _totalSupply = _totalSupply.safeSub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProofUtilityToken
Line:        270
Source: 
>         if(_userProfit > 0) {
>             holds[account] = 0;
>             ^^^^^^^^^^^^^^^^^^
>             _mint(account, _userProfit);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProofUtilityToken
Line:        259
Source: 
>             _value = _value.safeSub(tax);
>             holds[referrer] = holds[referrer].safeAdd(_value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Reward(referrer, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProofUtilityToken
Line:        241
Source: 
>                     _value = _value.safeSub(tax);
>                     holds[account] = holds[account].safeAdd(_value);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     fixes[account] = uint64(block.timestamp);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProofUtilityToken
Line:        242
Source: 
>                     holds[account] = holds[account].safeAdd(_value);
>                     fixes[account] = uint64(block.timestamp);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit Profit(account, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProofUtilityToken
Line:        338
Source: 
>         require(_bounty >= 3, "Little amount");
>         bounted = bounted.safeAdd(_delta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint8 i = 0; i < 3; i++) { _mint(founders[i], _bounty / 3); }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        110
Source: 
>         _beforeTokenTransfer(sender, recipient, amount);
>         _balances[sender] = _balances[sender].safeSub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].safeAdd(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        111
Source: 
>         _balances[sender] = _balances[sender].safeSub(amount);
>         _balances[recipient] = _balances[recipient].safeAdd(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        110
Source: 
>         _beforeTokenTransfer(sender, recipient, amount);
>         _balances[sender] = _balances[sender].safeSub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].safeAdd(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        111
Source: 
>         _balances[sender] = _balances[sender].safeSub(amount);
>         _balances[recipient] = _balances[recipient].safeAdd(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ProofUtilityToken
Line:        200
Source: 
>         if(referrers[to] == address(0) && amount > 0 && from != address(0)) referrers[to] = from;
>         uint256 _supply = totalSupply();
>                           ^^^^^^^^^^^^^
>         if(from == to) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ProofUtilityToken
Line:        349
Source: 
>     function showRate() external view returns(uint256) { return EthRateSource.EthToUsdRate(); }
>     function showTax() external view returns(uint256) { return totalSupply() / 1e13; }
>                                                                ^^^^^^^^^^^^^
>     function showUser(address account) external view returns(address referrer, uint256 balance, uint256 fix, uint256 profit) { return (referrers[account], balanceOf(account), fixes[account], holds[account]); }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ProofUtilityToken
Line:        221
Source: 
>         uint256 _balance = balanceOf(account);
>         uint256 _hold = block.timestamp - fixes[account];
>                         ^^^^^^^^^^^^^^^
>         uint256 _percent;

[0m
