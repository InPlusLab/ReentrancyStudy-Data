Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        238
Source: 
>      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * imposed by `transfer`, making them unable to receive funds via

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        659
Source: 
>     @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)
>     @param _ToBalancerPoolAddress The address of balancer pool to zapin
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _toTokenContractAddress The token with which we are adding liquidity

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        367
Source: 
>         IERC20 token,
>         address from,
>                     ^
>         address to,

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        377
Source: 
> 
>     function safeApprove(
>                         ^
>         IERC20 token,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        526
Source: 
>      * NOTE: Renouncing ownership will leave the contract without an owner,
>      * thereby removing any functionality that is only available to the owner.
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        550
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>                        ^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        560
Source: 
>         // expensive, but in exchange the refund on every call to nonReentrant
>         // will be lower in amount. Since refunds are capped to a percetange of
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // the total transaction's gas, it is best to keep them low in cases

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        550
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>                        ^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        560
Source: 
>         // expensive, but in exchange the refund on every call to nonReentrant
>         // will be lower in amount. Since refunds are capped to a percetange of
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // the total transaction's gas, it is best to keep them low in cases

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        921
Source: 
> 
>     // - to withdraw any ETH balance sitting in the contract
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function withdraw() public onlyOwner {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        925
Source: 
>         address payable _to = owner().toPayable();
>         _to.transfer(contractBalance);
>                                ^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }
>                                                 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                   

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                          

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        474
Source: 
>         return msg.sender;
>     }
>     ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        474
Source: 
>         return msg.sender;
>     }
>     ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        474
Source: 
>         return msg.sender;
>     }
>     ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        839
Source: 
>         address _FromTokenContractAddress,
>         uint256 tokens2Trade
>             ^^^^^^^^^^^^^^^^
>     ) internal returns (uint256 poolTokensOut) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        560
Source: 
>         // expensive, but in exchange the refund on every call to nonReentrant
>         // will be lower in amount. Since refunds are capped to a percetange of
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // the total transaction's gas, it is best to keep them low in cases

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }
>                                                 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        690
Source: 
>         if (_FromTokenContractAddress == address(0)) {
>             require(msg.value > 0, "ERR: No ETH sent");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //transfer eth to goodwill

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        925
Source: 
>         address payable _to = owner().toPayable();
>         _to.transfer(contractBalance);
>                                ^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        698
Source: 
> 
>             IERC20(_FromTokenContractAddress).safeTransferFrom(
>                                                         ^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        704
Source: 
> 
>             uint256 goodwillPortion = _transferGoodwill(
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _FromTokenContractAddress,

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        836
Source: 
>      */
>     function _enter2Balancer(
>                           ^^^
>         address _ToBalancerPoolAddress,

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        842
Source: 
>         require(
>             IBPool(_ToBalancerPoolAddress).isBound(_FromTokenContractAddress),
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Token not bound"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        284
Source: 
>      */
>     function transfer(address recipient, uint256 amount)
>                                              ^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        653
Source: 
>             _;
>         }
>  ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        659
Source: 
>     @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)
>     @param _ToBalancerPoolAddress The address of balancer pool to zapin
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _toTokenContractAddress The token with which we are adding liquidity

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        690
Source: 
>         if (_FromTokenContractAddress == address(0)) {
>             require(msg.value > 0, "ERR: No ETH sent");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //transfer eth to goodwill

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        838
Source: 
>         address _ToBalancerPoolAddress,
>         address _FromTokenContractAddress,
>                                      ^^^^^
>         uint256 tokens2Trade

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        921
Source: 
> 
>     // - to withdraw any ETH balance sitting in the contract
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function withdraw() public onlyOwner {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        925
Source: 
>         address payable _to = owner().toPayable();
>         _to.transfer(contractBalance);
>                                ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        514
Source: 
> 
>     /**
>    ^^^^
>      * @dev Returns true if the caller is the current owner.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        571
Source: 
>      * function is not supported. It is possible to prevent this from happening
>      * by making the `nonReentrant` function external, and make it call a
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>      * `private` function that does the actual work.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        658
Source: 
>     @notice This function is used to invest in given balancer pool using ETH/ERC20 Tokens
>     @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _ToBalancerPoolAddress The address of balancer pool to zapin

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        658
Source: 
>     @notice This function is used to invest in given balancer pool using ETH/ERC20 Tokens
>     @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)
>                                                                                      ^^^^^^
>     @param _ToBalancerPoolAddress The address of balancer pool to zapin

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        659
Source: 
>     @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)
>     @param _ToBalancerPoolAddress The address of balancer pool to zapin
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _toTokenContractAddress The token with which we are adding liquidity

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        660
Source: 
>     @param _ToBalancerPoolAddress The address of balancer pool to zapin
>     @param _toTokenContractAddress The token with which we are adding liquidity
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _amount The amount of ERC to invest

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        839
Source: 
>         address _FromTokenContractAddress,
>         uint256 tokens2Trade
>             ^^^^^^^^^^^^^^^^
>     ) internal returns (uint256 poolTokensOut) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }


[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        839
Source: 
>         address _FromTokenContractAddress,
>         uint256 tokens2Trade
>             ^^^^^^^^^^^^^^^^
>     ) internal returns (uint256 poolTokensOut) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }


[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        839
Source: 
>         address _FromTokenContractAddress,
>         uint256 tokens2Trade
>             ^^^^^^^^^^^^^^^^
>     ) internal returns (uint256 poolTokensOut) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }


[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        698
Source: 
> 
>             IERC20(_FromTokenContractAddress).safeTransferFrom(
>                                                         ^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        704
Source: 
> 
>             uint256 goodwillPortion = _transferGoodwill(
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _FromTokenContractAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        774
Source: 
>                 _toTokenContractAddress,
>                 tokenBought
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        868
Source: 
>     /**
>     @notice This function is used to calculate and transfer goodwill
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _tokenContractAddress Token in which goodwill is deducted

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        870
Source: 
>     @param _tokenContractAddress Token in which goodwill is deducted
>     @param tokens2Trade The total amount of tokens to be zapped in
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @return The quantity of goodwill deducted

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        882
Source: 
>         goodwillPortion = SafeMath.div(
>             SafeMath.mul(tokens2Trade, goodwill),
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             10000

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        415
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        831
Source: 
>     @notice This function is used to zapin to balancer pool
>     @param _ToBalancerPoolAddress The address of balancer pool to zap in
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _FromTokenContractAddress The token used to zap in

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        931
Source: 
>     }
> }
>                                                                                                                                              

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        836
Source: 
>      */
>     function _enter2Balancer(
>                           ^^^
>         address _ToBalancerPoolAddress,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Balancer_ZapIn_General_V2_6
Line:        842
Source: 
>         require(
>             IBPool(_ToBalancerPoolAddress).isBound(_FromTokenContractAddress),
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Token not bound"

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        239
Source: 
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>      * imposed by `transfer`, making them unable to receive funds via
>          ^^^^^^^^
>      * `transfer`. {sendValue} removes this limitation.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Balancer_ZapIn_General_V2_6
Line:        839
Source: 
>         address _FromTokenContractAddress,
>         uint256 tokens2Trade
>             ^^^^^^^^^^^^^^^^
>     ) internal returns (uint256 poolTokensOut) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        606
Source: 
> 
>     function getDenormalizedWeight(address token)
>                                                 ^
>         external

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        613
Source: 
> 
>     function getSwapFee() external view returns (uint256);
>                                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        468
Source: 
>     // an instance of this contract, which should be used via inheritance.
>     constructor() internal {}
>          ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        474
Source: 
>         return msg.sender;
>     }
>     ^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        415
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        429
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        439
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        468
Source: 
>     // an instance of this contract, which should be used via inheritance.
>     constructor() internal {}
>          ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        474
Source: 
>         return msg.sender;
>     }
>     ^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        415
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        429
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        439
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        285
Source: 
>     function transfer(address recipient, uint256 amount)
>         external
>       ^^^^^^^^^^
>         returns (bool);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        468
Source: 
>     // an instance of this contract, which should be used via inheritance.
>     constructor() internal {}
>          ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        474
Source: 
>         return msg.sender;
>     }
>     ^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        415
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        429
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        439
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        429
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        439
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        571
Source: 
>      * function is not supported. It is possible to prevent this from happening
>      * by making the `nonReentrant` function external, and make it call a
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>      * `private` function that does the actual work.

[0m
