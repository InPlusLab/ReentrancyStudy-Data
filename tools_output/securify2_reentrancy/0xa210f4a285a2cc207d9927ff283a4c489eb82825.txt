Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        156
Source: 
> 
>     function deployCollector() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(collector == ZERO && address(shelf) != ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        162
Source: 
> 
>     function deployPile() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pile == ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        168
Source: 
> 
>     function deployTitle() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(title == ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        174
Source: 
> 
>     function deployShelf() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        180
Source: 
> 
>     function deployFeed() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feed = feedFab.newFeed();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        185
Source: 
> 
>     function deploy() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // ensures all required deploy methods were called

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        158
Source: 
>         require(collector == ZERO && address(shelf) != ZERO);
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(collector).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        159
Source: 
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>         AuthLike(collector).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        164
Source: 
>         require(pile == ZERO);
>         pile = pilefab.newPile();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike(pile).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        165
Source: 
>         pile = pilefab.newPile();
>         AuthLike(pile).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        170
Source: 
>         require(title == ZERO);
>         title = titlefab.newTitle(titleName, titleSymbol);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(title).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        171
Source: 
>         title = titlefab.newTitle(titleName, titleSymbol);
>         AuthLike(title).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        176
Source: 
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(shelf).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        177
Source: 
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>         AuthLike(shelf).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        181
Source: 
>     function deployFeed() public {
>         feed = feedFab.newFeed();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike(feed).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        182
Source: 
>         feed = feedFab.newFeed();
>         AuthLike(feed).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        20
Source: 
> 
> pragma solidity >=0.5.15 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        38
Source: 
> 
> pragma solidity >=0.5.15 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        75
Source: 
> 
> pragma solidity >=0.5.15 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BorrowerDeployer
Line:        126
Source: 
> 
>     address constant ZERO = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        158
Source: 
>         require(collector == ZERO && address(shelf) != ZERO);
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(collector).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        164
Source: 
>         require(pile == ZERO);
>         pile = pilefab.newPile();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike(pile).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        170
Source: 
>         require(title == ZERO);
>         title = titlefab.newTitle(titleName, titleSymbol);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(title).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        176
Source: 
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(shelf).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        181
Source: 
>     function deployFeed() public {
>         feed = feedFab.newFeed();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike(feed).rely(root);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        159
Source: 
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>         AuthLike(collector).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        165
Source: 
>         pile = pilefab.newPile();
>         AuthLike(pile).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        171
Source: 
>         title = titlefab.newTitle(titleName, titleSymbol);
>         AuthLike(title).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        177
Source: 
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>         AuthLike(shelf).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        182
Source: 
>         feed = feedFab.newFeed();
>         AuthLike(feed).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        190
Source: 
>         // shelf allowed to call
>         AuthLike(pile).rely(shelf);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        192
Source: 
> 
>         DependLike(feed).depend("shelf", address(shelf));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DependLike(feed).depend("pile", address(pile));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        193
Source: 
>         DependLike(feed).depend("shelf", address(shelf));
>         DependLike(feed).depend("pile", address(pile));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        196
Source: 
>         // allow nftFeed to update rate groups
>         AuthLike(pile).rely(feed);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         NFTFeedLike(feed).init();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        197
Source: 
>         AuthLike(pile).rely(feed);
>         NFTFeedLike(feed).init();
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        199
Source: 
> 
>         DependLike(shelf).depend("subscriber", address(feed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        201
Source: 
> 
>         AuthLike(feed).rely(shelf);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(title).rely(shelf);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        202
Source: 
>         AuthLike(feed).rely(shelf);
>         AuthLike(title).rely(shelf);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        205
Source: 
>         // collector allowed to call
>         AuthLike(shelf).rely(collector);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        207
Source: 
> 
>         FileLike(feed).file("discountRate", discountRate.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        115
Source: 
> 
>     address public title;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public shelf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        116
Source: 
>     address public title;
>     address public shelf;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public pile;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        117
Source: 
>     address public shelf;
>     address public pile;
>     ^^^^^^^^^^^^^^^^^^^
>     address public collector;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        118
Source: 
>     address public pile;
>     address public collector;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public currency;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        120
Source: 
>     address public currency;
>     address public feed;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        158
Source: 
>         require(collector == ZERO && address(shelf) != ZERO);
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(collector).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        164
Source: 
>         require(pile == ZERO);
>         pile = pilefab.newPile();
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(pile).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        170
Source: 
>         require(title == ZERO);
>         title = titlefab.newTitle(titleName, titleSymbol);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(title).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        176
Source: 
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(shelf).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        181
Source: 
>     function deployFeed() public {
>         feed = feedFab.newFeed();
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike(feed).rely(root);

[0m
