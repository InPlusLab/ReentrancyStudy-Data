[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Sale
Line:        168
Source: 
>     function getPrice()public view returns(uint256){
>         if(startDate==0)
>            ^^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Sale
Line:        225
Source: 
>     function startSale()public{
>         require(msg.sender==owner && startDate==0);
>                                      ^^^^^^^^^^^^
>         startDate=now;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Sale
Line:        167
Source: 
>     
>     function getPrice()public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(startDate==0)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Sale
Line:        198
Source: 
>     
>     function changeOwner(address payable _owner) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Sale
Line:        206
Source: 
>      
>     function withdrawETH()public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner && address(this).balance>0 && collectedETH>0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Sale
Line:        216
Source: 
>      
>     function withdrawJUL()public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender==owner && Token.balanceOf(address(this))>0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Sale
Line:        224
Source: 
>      
>     function startSale()public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner && startDate==0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Sale
Line:        230
Source: 
>     //function to return the available JUL in the contract
>     function availableJUL()public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Token.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Sale
Line:        198
Source: 
>     
>     function changeOwner(address payable _owner) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Sale
Line:        210
Source: 
>         collectedETH=0;
>         owner.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Sale
Line:        77
Source: 
>     uint256 public totalSold;
>     ERC20 public Token;
>     ^^^^^^^^^^^^^^^^^^
>     address payable public owner;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1
Source: 
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Sale
Line:        210
Source: 
>         collectedETH=0;
>         owner.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Sale
Line:        210
Source: 
>         collectedETH=0;
>         owner.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Sale
Line:        210
Source: 
>         collectedETH=0;
>         owner.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Sale
Line:        97
Source: 
>         require(startDate>0 && now.sub(startDate) <= 7 days);
>         require(Token.balanceOf(address(this))>0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value>= 1 ether && msg.value <= 50 ether);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Sale
Line:        122
Source: 
>       }
>         require(amount<=Token.balanceOf(address(this)));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSold =totalSold.add(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Sale
Line:        133
Source: 
>        require(startDate>0 && now.sub(startDate) <= 7 days);
>         require(Token.balanceOf(address(this))>0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value>= 1 ether && msg.value <= 50 ether);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Sale
Line:        159
Source: 
>    
>         require(amount<=Token.balanceOf(address(this)));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSold =totalSold.add(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Sale
Line:        217
Source: 
>     function withdrawJUL()public{
>          require(msg.sender==owner && Token.balanceOf(address(this))>0);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          Token.transfer(owner,Token.balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Sale
Line:        125
Source: 
>         collectedETH=collectedETH.add(msg.value);
>         Token.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Sale
Line:        162
Source: 
>         collectedETH=collectedETH.add(msg.value);
>         Token.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Sale
Line:        218
Source: 
>          require(msg.sender==owner && Token.balanceOf(address(this))>0);
>          Token.transfer(owner,Token.balanceOf(address(this)));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Sale
Line:        218
Source: 
>          require(msg.sender==owner && Token.balanceOf(address(this))>0);
>          Token.transfer(owner,Token.balanceOf(address(this)));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Sale
Line:        231
Source: 
>     function availableJUL()public view returns(uint256){
>         return Token.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Sale
Line:        76
Source: 
>   
>     uint256 public totalSold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     ERC20 public Token;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Sale
Line:        80
Source: 
>   
>     uint256 public collectedETH;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public startDate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Sale
Line:        81
Source: 
>     uint256 public collectedETH;
>     uint256 public startDate;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Sale
Line:        123
Source: 
>         require(amount<=Token.balanceOf(address(this)));
>         totalSold =totalSold.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         collectedETH=collectedETH.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Sale
Line:        124
Source: 
>         totalSold =totalSold.add(amount);
>         collectedETH=collectedETH.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Token.transfer(msg.sender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Sale
Line:        160
Source: 
>         require(amount<=Token.balanceOf(address(this)));
>         totalSold =totalSold.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         collectedETH=collectedETH.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Sale
Line:        161
Source: 
>         totalSold =totalSold.add(amount);
>         collectedETH=collectedETH.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Token.transfer(msg.sender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Sale
Line:        125
Source: 
>         collectedETH=collectedETH.add(msg.value);
>         Token.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Sale
Line:        162
Source: 
>         collectedETH=collectedETH.add(msg.value);
>         Token.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Sale
Line:        218
Source: 
>          require(msg.sender==owner && Token.balanceOf(address(this))>0);
>          Token.transfer(owner,Token.balanceOf(address(this)));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
