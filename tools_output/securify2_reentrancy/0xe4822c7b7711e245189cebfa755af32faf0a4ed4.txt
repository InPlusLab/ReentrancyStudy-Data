Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        78
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dcStake
Line:        130
Source: 
> 
>     function stakeWithEth() public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0, "!eth value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dcStake
Line:        146
Source: 
> 
>     function withdraw() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint storedEth = ethRecords[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dcStake
Line:        161
Source: 
> 
>     function balanceOf(address _addr) public view returns (uint balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ethRecords[_addr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dcStake
Line:        165
Source: 
> 
>     function setOracle(address _oracle)onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oracle = Oracle(_oracle);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dcStake
Line:        169
Source: 
> 
>     function setBurnRate(uint _burnRate)onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_burnRate < 100, "!range");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dcStake
Line:        174
Source: 
> 
>     function govWithdrawEther(uint256 _amount)onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > 0, "!zero input");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dcStake
Line:        180
Source: 
> 
>     function govWithdrawToken(uint256 _amount)onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > 0, "!zero input");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dcStake
Line:        124
Source: 
> 
>     function priceEth2DCoin(uint inValue) public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint tmp = oracle.getUniOutput(inValue,weth,usdt);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    dcStake
Line:        161
Source: 
> 
>     function balanceOf(address _addr) public view returns (uint balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ethRecords[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    dcStake
Line:        165
Source: 
> 
>     function setOracle(address _oracle)onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oracle = Oracle(_oracle);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    dcStake
Line:        134
Source: 
>         uint needDcoin = priceEth2DCoin(msg.value);
>         uint allowed = dcoin.allowance(msg.sender,address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balanced = dcoin.balanceOf(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    dcStake
Line:        135
Source: 
>         uint allowed = dcoin.allowance(msg.sender,address(this));
>         uint balanced = dcoin.balanceOf(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed >= needDcoin, "!allowed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    dcStake
Line:        138
Source: 
>         require(balanced >= needDcoin, "!balanced");
>         dcoin.transferFrom(msg.sender,address(this), needDcoin);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    dcStake
Line:        96
Source: 
> 
> contract dcStake is Ownable{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    dcStake
Line:        101
Source: 
>     mapping (address => uint) public ethRecords;
>     uint burnRate;
>     ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    dcStake
Line:        176
Source: 
>         require(_amount > 0, "!zero input");
>         msg.sender.transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GovWithdraw(msg.sender, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    dcStake
Line:        156
Source: 
>         dcoin.transfer( address(0), burnDcoin);
>         msg.sender.transfer(storedEth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    dcStake
Line:        156
Source: 
>         dcoin.transfer( address(0), burnDcoin);
>         msg.sender.transfer(storedEth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    dcStake
Line:        156
Source: 
>         dcoin.transfer( address(0), burnDcoin);
>         msg.sender.transfer(storedEth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    dcStake
Line:        176
Source: 
>         require(_amount > 0, "!zero input");
>         msg.sender.transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GovWithdraw(msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    dcStake
Line:        125
Source: 
>     function priceEth2DCoin(uint inValue) public view returns (uint){
>         uint tmp = oracle.getUniOutput(inValue,weth,usdt);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tmp = tmp.mul(1000);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    dcStake
Line:        134
Source: 
>         uint needDcoin = priceEth2DCoin(msg.value);
>         uint allowed = dcoin.allowance(msg.sender,address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balanced = dcoin.balanceOf(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    dcStake
Line:        135
Source: 
>         uint allowed = dcoin.allowance(msg.sender,address(this));
>         uint balanced = dcoin.balanceOf(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed >= needDcoin, "!allowed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    dcStake
Line:        127
Source: 
>         tmp = tmp.mul(1000);
>         return  oracle.getUniOutput(tmp,usdg,address(dcoin));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    dcStake
Line:        138
Source: 
>         require(balanced >= needDcoin, "!balanced");
>         dcoin.transferFrom(msg.sender,address(this), needDcoin);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    dcStake
Line:        154
Source: 
>         dcoinRecords[msg.sender] = 0;
>         dcoin.transfer( msg.sender, returnDcoin);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dcoin.transfer( address(0), burnDcoin);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    dcStake
Line:        155
Source: 
>         dcoin.transfer( msg.sender, returnDcoin);
>         dcoin.transfer( address(0), burnDcoin);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(storedEth);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    dcStake
Line:        182
Source: 
>         require(_amount > 0, "!zero input");
>         dcoin.transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GovWithdrawToken(msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dcStake
Line:        101
Source: 
>     mapping (address => uint) public ethRecords;
>     uint burnRate;
>     ^^^^^^^^^^^^^
> 

[0m
