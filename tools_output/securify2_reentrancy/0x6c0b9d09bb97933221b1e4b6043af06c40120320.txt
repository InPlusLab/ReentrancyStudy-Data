[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SafeTransfer
Line:        619
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SimplifiedDistributor
Line:        724
Source: 
>     /// @param _recipient The address to be checked for eligibility
>     function eligible(address _recipient) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SimplifiedDistributor
Line:        850
Source: 
>     /// @return attribCount Number of referrals
>     function getReferralReward(address _account, bool _isPromo) public view returns (uint ethAmount, uint tokenLen, uint maxThreshold, uint attribCount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isPromo != true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SimplifiedDistributor
Line:        869
Source: 
>     /// @return tokenAmount Amount of token configured in the attribution
>     function getReferralRewardTokens(address _account, bool _isPromo, uint _idx) public view returns (address token, uint tokenAmount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isPromo != true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SimplifiedDistributor
Line:        895
Source: 
>     /// @param _newPack starter pack configuration
>     function changeStarterPack(Pack memory _newPack) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newPack.tokens.length == _newPack.tokenAmounts.length, "Mismatch with Tokens & Amounts");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SimplifiedDistributor
Line:        913
Source: 
>     /// @param _newSigner The new Signer of the contract
>     function changeSigner(address _newSigner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newSigner != address(0), "zero_address not allowed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeTransfer
Line:        586
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeTransfer: low-level call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenWithdrawer
Line:        667
Source: 
>             ERC20Token token = ERC20Token(_token);
>             balance = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _safeTransfer(token, _destination, balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        774
Source: 
>         // .transfer bad post Istanbul fork :|
>         (bool success, ) = _recipient.call.value(pack.ethAmount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "ETH Transfer failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        832
Source: 
>             
>             (bool success, ) = msg.sender.call.value(totalETHToPay)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        769
Source: 
>             uint256 amount = pack.tokenAmounts[i];
>             require(token.transfer(_recipient, amount), "ERC20 operation did not succeed");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        774
Source: 
>         // .transfer bad post Istanbul fork :|
>         (bool success, ) = _recipient.call.value(pack.ethAmount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "ETH Transfer failed");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        832
Source: 
>             
>             (bool success, ) = msg.sender.call.value(totalETHToPay)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeTransfer
Line:        586
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeTransfer: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeTransfer
Line:        586
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeTransfer: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SimplifiedDistributor
Line:        774
Source: 
>         // .transfer bad post Istanbul fork :|
>         (bool success, ) = _recipient.call.value(pack.ethAmount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SimplifiedDistributor
Line:        832
Source: 
>             
>             (bool success, ) = msg.sender.call.value(totalETHToPay)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "ETH Transfer failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        757
Source: 
>     /// @param _attribution A payable address who referred the starterpack purchaser 
>     function distributePack(address payable _recipient, address payable _attribution) external reentrancyGuard {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!pause, "Paused");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        888
Source: 
>     /// @dev setPause must be called before Signer can call distributePack()
>     function setPause(bool _pause) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause = _pause;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        906
Source: 
>     /// @notice Safety function allowing the owner to immediately pause starterpack distribution and withdraw all balances in the the contract
>     function withdraw(address[] calldata _tokens) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        968
Source: 
>     /// @notice Set SNT address
>     function setSntToken(address _sntToken) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sntToken = ERC20Token(_sntToken);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        724
Source: 
>     /// @param _recipient The address to be checked for eligibility
>     function eligible(address _recipient) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        869
Source: 
>     /// @return tokenAmount Amount of token configured in the attribution
>     function getReferralRewardTokens(address _account, bool _isPromo, uint _idx) public view returns (address token, uint tokenAmount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isPromo != true);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        930
Source: 
>     /// @param _assignedTo Use a valid address here to set custom settings. To set the default payout and threshold, use address(0);
>     function setPayoutAndThreshold(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool _isPromo,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        961
Source: 
>     /// @param _isPromo Indicates if the configuration to delete is the promo or default
>     function removePayoutAndThreshold(address[] calldata _assignedTo, bool _isPromo) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < _assignedTo.length; i++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SimplifiedDistributor
Line:        769
Source: 
>             uint256 amount = pack.tokenAmounts[i];
>             require(token.transfer(_recipient, amount), "ERC20 operation did not succeed");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>              ^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        774
Source: 
>         // .transfer bad post Istanbul fork :|
>         (bool success, ) = _recipient.call.value(pack.ethAmount)("");
>          ^^^^^^^^^^^^
>         require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        832
Source: 
>             
>             (bool success, ) = msg.sender.call.value(totalETHToPay)("");
>              ^^^^^^^^^^^^
>             require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.6.0 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SimplifiedDistributor
Line:        707
Source: 
>     
>     mapping(address => Attribution) defaultAttributionSettings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => Attribution) promoAttributionSettings;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SimplifiedDistributor
Line:        708
Source: 
>     mapping(address => Attribution) defaultAttributionSettings;
>     mapping(address => Attribution) promoAttributionSettings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        774
Source: 
>         // .transfer bad post Istanbul fork :|
>         (bool success, ) = _recipient.call.value(pack.ethAmount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        832
Source: 
>             
>             (bool success, ) = msg.sender.call.value(totalETHToPay)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "ETH Transfer failed");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        774
Source: 
>         // .transfer bad post Istanbul fork :|
>         (bool success, ) = _recipient.call.value(pack.ethAmount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        774
Source: 
>         // .transfer bad post Istanbul fork :|
>         (bool success, ) = _recipient.call.value(pack.ethAmount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "ETH Transfer failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        832
Source: 
>             
>             (bool success, ) = msg.sender.call.value(totalETHToPay)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "ETH Transfer failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenWithdrawer
Line:        667
Source: 
>             ERC20Token token = ERC20Token(_token);
>             balance = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _safeTransfer(token, _destination, balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        769
Source: 
>             uint256 amount = pack.tokenAmounts[i];
>             require(token.transfer(_recipient, amount), "ERC20 operation did not succeed");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeTransfer
Line:        620
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                 ^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SimplifiedDistributor
Line:        688
Source: 
> 
>     Pack public defaultPack;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        68
Source: 
>         require(!reentranceLock, "Reentrant call detected!");
>         reentranceLock = true; // No no no, you naughty naughty!
>         ^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        586
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeTransfer: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        583
Source: 
>         // solhint-disable-next-line max-line-length
>         require(_isContract(address(token)), "SafeTransfer: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        586
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeTransfer: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenWithdrawer
Line:        663
Source: 
>             balance = address(this).balance;
>             (bool success, ) = _destination.call.value(balance)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenWithdrawer
Line:        667
Source: 
>             ERC20Token token = ERC20Token(_token);
>             balance = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _safeTransfer(token, _destination, balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        61
Source: 
> 
>     bool internal reentranceLock = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SimplifiedDistributor
Line:        708
Source: 
>     mapping(address => Attribution) defaultAttributionSettings;
>     mapping(address => Attribution) promoAttributionSettings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
