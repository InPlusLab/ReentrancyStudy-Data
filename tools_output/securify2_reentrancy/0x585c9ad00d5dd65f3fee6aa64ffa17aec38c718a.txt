Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FeeDistributor
Line:        1294
Source: 
>   */
>   function changePayees(address[] memory _payees, uint256[] memory _shares) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_payees.length == _shares.length, "Payees and shares mismatched");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FeeDistributor
Line:        1318
Source: 
>   */
>   function getPayees() public view override returns (address[] memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return payees;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1330
Source: 
>     uint256 payment = _totalIncomeReceived.mul(shares[_payee]).div(totalShares);
>     a.stablex().mint(_payee, payment);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        397
Source: 
> 
>   function MANAGER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        399
Source: 
> 
>   function MINTER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ITimelock
Line:        1018
Source: 
> 
>   function GRACE_PERIOD() external view returns (uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IVaultsCore
Line:        1172
Source: 
> 
>   function WETH() external view returns (IWETH);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1330
Source: 
>     uint256 payment = _totalIncomeReceived.mul(shares[_payee]).div(totalShares);
>     a.stablex().mint(_payee, payment);
>     ^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1330
Source: 
>     uint256 payment = _totalIncomeReceived.mul(shares[_payee]).div(totalShares);
>     a.stablex().mint(_payee, payment);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FeeDistributor
Line:        1253
Source: 
> 
>   uint256 public override lastReleasedAt;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   IAddressProvider public override a;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FeeDistributor
Line:        1256
Source: 
> 
>   uint256 public override totalShares;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => uint256) public override shares;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        237
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        238
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        240
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        241
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        243
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        237
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        238
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        240
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        241
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        243
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        218
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _status = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeDistributor
Line:        1278
Source: 
>     require(payees.length > 0, "Payees not configured yet");
>     lastReleasedAt = now;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        224
Source: 
>         // https://eips.ethereum.org/EIPS/eip-2200)
>         _status = _NOT_ENTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeDistributor
Line:        1306
Source: 
>     }
>     delete payees;
>     ^^^^^^^^^^^^^
>     totalShares = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeDistributor
Line:        1307
Source: 
>     delete payees;
>     totalShares = 0;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeDistributor
Line:        1344
Source: 
> 
>     payees.push(_payee);
>     ^^^^^^^^^^^^^^^^^^^
>     shares[_payee] = _shares;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeDistributor
Line:        1345
Source: 
>     payees.push(_payee);
>     shares[_payee] = _shares;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     totalShares = totalShares.add(_shares);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeDistributor
Line:        1346
Source: 
>     shares[_payee] = _shares;
>     totalShares = totalShares.add(_shares);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit PayeeAdded(_payee, _shares);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeDistributor
Line:        1275
Source: 
>   function release() public override nonReentrant {
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^
>     require(income > 0, "income is 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeDistributor
Line:        1330
Source: 
>     uint256 payment = _totalIncomeReceived.mul(shares[_payee]).div(totalShares);
>     a.stablex().mint(_payee, payment);
>     ^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeDistributor
Line:        1261
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeDistributor
Line:        1298
Source: 
> 
>     uint256 income = a.core().state().availableIncome();
>                      ^^^^^^^^^^^^^^^^
>     if (income > 0 && payees.length > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        198
Source: 
>     uint256 private constant _NOT_ENTERED = 1;
>     uint256 private constant _ENTERED = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        200
Source: 
> 
>     uint256 private _status;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        237
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        238
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        240
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        241
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        243
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        237
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        238
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        240
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        241
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        243
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
