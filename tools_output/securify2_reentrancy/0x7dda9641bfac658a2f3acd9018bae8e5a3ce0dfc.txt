Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        229
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PresalePool
Line:        314
Source: 
> 
>     function start(address _presale_token, address _currency_token, uint256 _price) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_presale_token != address(0), "Token is non-contract");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PresalePool
Line:        327
Source: 
> 
>     function buy(uint256 token_amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canBuy, "Buy not start yet, please wait...");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PresalePool
Line:        341
Source: 
> 
>     function sell(uint256 token_amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canSell, "Not end yet, please wait...");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PresalePool
Line:        356
Source: 
> 
>     function end() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canBuy, "Not start yet, please wait...");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PresalePool
Line:        362
Source: 
> 
>     function finish(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canSell, "Not end yet, please wait...");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        274
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PresalePool
Line:        314
Source: 
> 
>     function start(address _presale_token, address _currency_token, uint256 _price) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_presale_token != address(0), "Token is non-contract");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PresalePool
Line:        362
Source: 
> 
>     function finish(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canSell, "Not end yet, please wait...");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PresalePool
Line:        332
Source: 
>         
>         uint256 currency_amount = token_amount * price / PRICE_UNIT;
>                                   ^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransferFrom(msg.sender, address(this), currency_amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PresalePool
Line:        347
Source: 
>         
>         uint256 currency_amount = token_amount * price / PRICE_UNIT;
>                                   ^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransfer(msg.sender, currency_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PresalePool
Line:        330
Source: 
>         require(token_amount >= LIMIT_AMOUNT, "Subscribe amount must be larger than 1000");
>         require(token_amount <= presale_token.balanceOf(address(this)), "The subscription quota is insufficient");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PresalePool
Line:        364
Source: 
>         require(canSell, "Not end yet, please wait...");
>         uint256 left = presale_token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (left > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PresalePool
Line:        290
Source: 
> 
>     IERC20 public presale_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public currency_token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PresalePool
Line:        291
Source: 
>     IERC20 public presale_token;
>     IERC20 public currency_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PresalePool
Line:        332
Source: 
>         
>         uint256 currency_amount = token_amount * price / PRICE_UNIT;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransferFrom(msg.sender, address(this), currency_amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PresalePool
Line:        347
Source: 
>         
>         uint256 currency_amount = token_amount * price / PRICE_UNIT;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransfer(msg.sender, currency_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PresalePool
Line:        297
Source: 
>     bool public canSell;
>     uint256 constant PRICE_UNIT = 1e8;   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant LIMIT_AMOUNT = 1000 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PresalePool
Line:        298
Source: 
>     uint256 constant PRICE_UNIT = 1e8;   
>     uint256 constant LIMIT_AMOUNT = 1000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balanceOf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PresalePool
Line:        330
Source: 
>         require(token_amount >= LIMIT_AMOUNT, "Subscribe amount must be larger than 1000");
>         require(token_amount <= presale_token.balanceOf(address(this)), "The subscription quota is insufficient");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PresalePool
Line:        364
Source: 
>         require(canSell, "Not end yet, please wait...");
>         uint256 left = presale_token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (left > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        230
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PresalePool
Line:        290
Source: 
> 
>     IERC20 public presale_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public currency_token;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PresalePool
Line:        291
Source: 
>     IERC20 public presale_token;
>     IERC20 public currency_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PresalePool
Line:        293
Source: 
>     
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PresalePool
Line:        294
Source: 
>     uint256 public totalSupply;
>     uint256 public price;
>     ^^^^^^^^^^^^^^^^^^^^
>     bool public canBuy;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PresalePool
Line:        295
Source: 
>     uint256 public price;
>     bool public canBuy;
>     ^^^^^^^^^^^^^^^^^^
>     bool public canSell;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PresalePool
Line:        296
Source: 
>     bool public canBuy;
>     bool public canSell;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 constant PRICE_UNIT = 1e8;   

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PresalePool
Line:        335
Source: 
>         presale_token.safeTransfer(msg.sender, token_amount);
>         totalSupply = totalSupply.add(token_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[msg.sender] = balanceOf[msg.sender].add(token_amount);

[0m
