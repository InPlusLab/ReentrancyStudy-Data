pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        233
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        294
Source: 
> contract IFdcRewardDnsPool {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public rewards;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        86
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        91
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        341
Source: 
> 
>     function start(address stake_token, address reward_token, address pool_addr) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!started, "already started");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        368
Source: 
> 
>     function stake(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(started, "Not start yet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        457
Source: 
> 
>     function refoudStakeToken(address account, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeToken.safeTransfer(account, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        461
Source: 
> 
>     function refoudRewardToken(address account, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardToken.safeTransfer(account, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        465
Source: 
>     
>     function canHarvest(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return earned(account) > 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        475
Source: 
> 
>     function totalSupply_() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        479
Source: 
>     
>     function rewards_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.rewards(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        483
Source: 
> 
>     function balanceOf_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.balanceOf(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        487
Source: 
> 
>     function stakeStartOf_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeStartOf(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        491
Source: 
> 
>     function stakeCount_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeCount(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        495
Source: 
> 
>     function stakeAmount_(address account, uint256 idx) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeAmount(account, idx);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        499
Source: 
> 
>     function stakeTime_(address account, uint256 idx) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeTime(account, idx);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        507
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.balanceOf(account).add(_balanceOf[account]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        511
Source: 
> 
>     function stakeStartOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        529
Source: 
>         uint256 count = pool.stakeCount(account);
>         return idx < count ? pool.stakeTime(account, idx) 
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : ((idx < count.add(_stakeCount[account])) ? _stakeTime[account][idx.sub(count)] : 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        523
Source: 
>         uint256 count = pool.stakeCount(account);
>         return idx < count ? pool.stakeAmount(account, idx) 
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : ((idx < count.add(_stakeCount[account])) ? _stakeAmount[account][idx.sub(count)] : 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        518
Source: 
>     function stakeCount(address account) public view returns (uint256) {
>         return pool.stakeCount(account).add(_stakeCount[account]);
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        371
Source: 
>         require(amount > 0, "Cannot stake 0");
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 beforeT = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        372
Source: 
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        378
Source: 
>         
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Staked(msg.sender, amount, beforeT, afterT);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        504
Source: 
>     function totalSupply() public view returns (uint256) {
>         return pool.totalSupply().add(_totalSupply);
>                ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        278
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        426
Source: 
> 
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        432
Source: 
> 
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardRate = totalSupply().mul(100).div(160 days);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        449
Source: 
>             rewardedOf[msg.sender] = rewardedOf[msg.sender].add(reward);
>             uint256 beforeT = rewardToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //rewardToken.mint(msg.sender, reward);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        452
Source: 
>             rewardToken.safeTransfer(msg.sender, reward);
>             uint256 afterT = rewardToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit RewardPaid(msg.sender, reward, beforeT, afterT);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        476
Source: 
>     function totalSupply_() public view returns (uint256) {
>         return pool.totalSupply();
>                ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        480
Source: 
>     function rewards_(address account) public view returns (uint256) {
>         return pool.rewards(account);
>                ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        484
Source: 
>     function balanceOf_(address account) public view returns (uint256) {
>         return pool.balanceOf(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        488
Source: 
>     function stakeStartOf_(address account) public view returns (uint256) {
>         return pool.stakeStartOf(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        492
Source: 
>     function stakeCount_(address account) public view returns (uint256) {
>         return pool.stakeCount(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        496
Source: 
>     function stakeAmount_(address account, uint256 idx) public view returns (uint256) {
>         return pool.stakeAmount(account, idx);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        500
Source: 
>     function stakeTime_(address account, uint256 idx) public view returns (uint256) {
>         return pool.stakeTime(account, idx);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        508
Source: 
>     function balanceOf(address account) public view returns (uint256) {
>         return pool.balanceOf(account).add(_balanceOf[account]);
>                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        512
Source: 
>     function stakeStartOf(address account) public view returns (uint256) {
>         return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        513
Source: 
>         return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : (_stakeStartOf[account] > 0 ? _stakeStartOf[account] : pool.stakeStartOf(account));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        513
Source: 
>         return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : (_stakeStartOf[account] > 0 ? _stakeStartOf[account] : pool.stakeStartOf(account));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        514
Source: 
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))
>             : (_stakeStartOf[account] > 0 ? _stakeStartOf[account] : pool.stakeStartOf(account));
>                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        528
Source: 
>     function stakeTime(address account, uint256 idx) public view returns (uint256) {
>         uint256 count = pool.stakeCount(account);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return idx < count ? pool.stakeTime(account, idx) 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        522
Source: 
>     function stakeAmount(address account, uint256 idx) public view returns (uint256) {
>         uint256 count = pool.stakeCount(account);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return idx < count ? pool.stakeAmount(account, idx) 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        278
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        357
Source: 
> 
>     function earned(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 r = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        457
Source: 
> 
>     function refoudStakeToken(address account, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeToken.safeTransfer(account, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        461
Source: 
> 
>     function refoudRewardToken(address account, uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardToken.safeTransfer(account, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        465
Source: 
>     
>     function canHarvest(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return earned(account) > 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        479
Source: 
>     
>     function rewards_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.rewards(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        483
Source: 
> 
>     function balanceOf_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.balanceOf(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        487
Source: 
> 
>     function stakeStartOf_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeStartOf(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        491
Source: 
> 
>     function stakeCount_(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeCount(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        495
Source: 
> 
>     function stakeAmount_(address account, uint256 idx) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeAmount(account, idx);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        499
Source: 
> 
>     function stakeTime_(address account, uint256 idx) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeTime(account, idx);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        507
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.balanceOf(account).add(_balanceOf[account]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        517
Source: 
> 
>     function stakeCount(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pool.stakeCount(account).add(_stakeCount[account]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        521
Source: 
> 
>     function stakeAmount(address account, uint256 idx) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 count = pool.stakeCount(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        527
Source: 
> 
>     function stakeTime(address account, uint256 idx) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 count = pool.stakeCount(account);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        341
Source: 
> 
>     function start(address stake_token, address reward_token, address pool_addr) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!started, "already started");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        392
Source: 
> 
>     function calcReward(uint256 amount, uint256 startTime, uint256 endTime) public pure returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 day = endTime.sub(startTime).div(1 days);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        470
Source: 
>     // Add Lock Time Begin:
>     function canWithdraw(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return started && (_balanceOf[account] > 0) && false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        371
Source: 
>         require(amount > 0, "Cannot stake 0");
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 beforeT = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        372
Source: 
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        378
Source: 
>         
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Staked(msg.sender, amount, beforeT, afterT);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        449
Source: 
>             rewardedOf[msg.sender] = rewardedOf[msg.sender].add(reward);
>             uint256 beforeT = rewardToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //rewardToken.mint(msg.sender, reward);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        452
Source: 
>             rewardToken.safeTransfer(msg.sender, reward);
>             uint256 afterT = rewardToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit RewardPaid(msg.sender, reward, beforeT, afterT);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        313
Source: 
>     bool public started;
>     uint256 public _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardFinishTime = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        318
Source: 
>     mapping(address => uint256) public rewardedOf;
>     mapping(address => uint256) public _balanceOf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public _stakeStartOf;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        319
Source: 
>     mapping(address => uint256) public _balanceOf;
>     mapping(address => uint256) public _stakeStartOf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public _stakeCount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        320
Source: 
>     mapping(address => uint256) public _stakeStartOf;
>     mapping(address => uint256) public _stakeCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(uint256 => uint256)) public _stakeAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        321
Source: 
>     mapping(address => uint256) public _stakeCount;
>     mapping(address => mapping(uint256 => uint256)) public _stakeAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(uint256 => uint256)) public _stakeTime;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        322
Source: 
>     mapping(address => mapping(uint256 => uint256)) public _stakeAmount;
>     mapping(address => mapping(uint256 => uint256)) public _stakeTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private governance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        528
Source: 
>     function stakeTime(address account, uint256 idx) public view returns (uint256) {
>         uint256 count = pool.stakeCount(account);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return idx < count ? pool.stakeTime(account, idx) 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        522
Source: 
>     function stakeAmount(address account, uint256 idx) public view returns (uint256) {
>         uint256 count = pool.stakeCount(account);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return idx < count ? pool.stakeAmount(account, idx) 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        518
Source: 
>     function stakeCount(address account) public view returns (uint256) {
>         return pool.stakeCount(account).add(_stakeCount[account]);
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        371
Source: 
>         require(amount > 0, "Cannot stake 0");
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 beforeT = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        504
Source: 
>     function totalSupply() public view returns (uint256) {
>         return pool.totalSupply().add(_totalSupply);
>                ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        508
Source: 
>     function balanceOf(address account) public view returns (uint256) {
>         return pool.balanceOf(account).add(_balanceOf[account]);
>                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        512
Source: 
>     function stakeStartOf(address account) public view returns (uint256) {
>         return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        513
Source: 
>         return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : (_stakeStartOf[account] > 0 ? _stakeStartOf[account] : pool.stakeStartOf(account));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        529
Source: 
>         uint256 count = pool.stakeCount(account);
>         return idx < count ? pool.stakeTime(account, idx) 
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : ((idx < count.add(_stakeCount[account])) ? _stakeTime[account][idx.sub(count)] : 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        523
Source: 
>         uint256 count = pool.stakeCount(account);
>         return idx < count ? pool.stakeAmount(account, idx) 
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : ((idx < count.add(_stakeCount[account])) ? _stakeAmount[account][idx.sub(count)] : 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        372
Source: 
>         require(stakeToken.balanceOf(msg.sender) >= amount, "insufficient balance to stake");
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        378
Source: 
>         
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Staked(msg.sender, amount, beforeT, afterT);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        426
Source: 
> 
>         uint256 beforeT = stakeToken.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        432
Source: 
> 
>         uint256 afterT = stakeToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardRate = totalSupply().mul(100).div(160 days);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        449
Source: 
>             rewardedOf[msg.sender] = rewardedOf[msg.sender].add(reward);
>             uint256 beforeT = rewardToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //rewardToken.mint(msg.sender, reward);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        452
Source: 
>             rewardToken.safeTransfer(msg.sender, reward);
>             uint256 afterT = rewardToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit RewardPaid(msg.sender, reward, beforeT, afterT);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        476
Source: 
>     function totalSupply_() public view returns (uint256) {
>         return pool.totalSupply();
>                ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        480
Source: 
>     function rewards_(address account) public view returns (uint256) {
>         return pool.rewards(account);
>                ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        484
Source: 
>     function balanceOf_(address account) public view returns (uint256) {
>         return pool.balanceOf(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        488
Source: 
>     function stakeStartOf_(address account) public view returns (uint256) {
>         return pool.stakeStartOf(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        492
Source: 
>     function stakeCount_(address account) public view returns (uint256) {
>         return pool.stakeCount(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        496
Source: 
>     function stakeAmount_(address account, uint256 idx) public view returns (uint256) {
>         return pool.stakeAmount(account, idx);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        500
Source: 
>     function stakeTime_(address account, uint256 idx) public view returns (uint256) {
>         return pool.stakeTime(account, idx);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        513
Source: 
>         return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             : (_stakeStartOf[account] > 0 ? _stakeStartOf[account] : pool.stakeStartOf(account));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        514
Source: 
>             ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))
>             : (_stakeStartOf[account] > 0 ? _stakeStartOf[account] : pool.stakeStartOf(account));
>                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        234
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        309
Source: 
> 
>     IERC20 public stakeToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public rewardToken;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        310
Source: 
>     IERC20 public stakeToken;
>     IERC20 public rewardToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        312
Source: 
>     
>     bool public started;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public _totalSupply;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        313
Source: 
>     bool public started;
>     uint256 public _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardFinishTime = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        324
Source: 
>     address private governance;
>     IFdcRewardDnsPool private pool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        294
Source: 
> contract IFdcRewardDnsPool {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public rewards;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        375
Source: 
>         stakeToken.safeTransferFrom(msg.sender, address(this), amount);
>         _totalSupply = _totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balanceOf[msg.sender] = _balanceOf[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakeFdcRewardDnsPool
Line:        388
Source: 
>         _stakeCount[msg.sender] = _stakeCount[msg.sender].add(1);
>         rewardRate = totalSupply().mul(100).div(160 days);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit StakeItem(msg.sender, stakeIndex, block.timestamp, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        275
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        278
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        294
Source: 
> contract IFdcRewardDnsPool {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public rewards;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        295
Source: 
>     uint256 public totalSupply;
>     mapping(address => uint256) public rewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balanceOf;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        296
Source: 
>     mapping(address => uint256) public rewards;
>     mapping(address => uint256) public balanceOf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public stakeStartOf;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        297
Source: 
>     mapping(address => uint256) public balanceOf;
>     mapping(address => uint256) public stakeStartOf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public stakeCount;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        298
Source: 
>     mapping(address => uint256) public stakeStartOf;
>     mapping(address => uint256) public stakeCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(uint256 => uint256)) public stakeAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        299
Source: 
>     mapping(address => uint256) public stakeCount;
>     mapping(address => mapping(uint256 => uint256)) public stakeAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(uint256 => uint256)) public stakeTime;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IFdcRewardDnsPool
Line:        300
Source: 
>     mapping(address => mapping(uint256 => uint256)) public stakeAmount;
>     mapping(address => mapping(uint256 => uint256)) public stakeTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        315
Source: 
>     uint256 public rewardFinishTime = 0;
>     uint256 public rewardRate = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public rewards;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        350
Source: 
>         pool = IFdcRewardDnsPool(pool_addr);
>         rewardFinishTime = block.timestamp.add(10 * 365.25 days);
>                            ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        354
Source: 
>     function lastTimeRewardApplicable() internal view returns (uint256) {
>         return block.timestamp < rewardFinishTime ? block.timestamp : rewardFinishTime;
>                ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakeFdcRewardDnsPool
Line:        354
Source: 
>     function lastTimeRewardApplicable() internal view returns (uint256) {
>         return block.timestamp < rewardFinishTime ? block.timestamp : rewardFinishTime;
>                                                     ^^^^^^^^^^^^^^^
>     }

[0m
