pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        227
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        246
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        255
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        300
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        227
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        246
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        255
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        300
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SparkleRewardTiers
Line:        636
Source: 
>     */
>   function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SparkleRewardTiers
Line:        670
Source: 
>     */
>   function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SparkleRewardTiers
Line:        699
Source: 
>     */
>   function deleteTier(uint256 _index)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SparkleRewardTiers
Line:        725
Source: 
>     */
>   function getRate(uint256 _index)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SparkleRewardTiers
Line:        741
Source: 
>     */
>   function getPrice(uint256 _index)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SparkleRewardTiers
Line:        757
Source: 
>     */
>   function getEnabled(uint256 _index)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SparkleRewardTiers
Line:        772
Source: 
>     */
>   function withdrawEth()
>   ^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        636
Source: 
>     */
>   function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        670
Source: 
>     */
>   function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        725
Source: 
>     */
>   function getRate(uint256 _index)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        741
Source: 
>     */
>   function getPrice(uint256 _index)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        757
Source: 
>     */
>   function getEnabled(uint256 _index)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        785
Source: 
>     /// Transfer the ether to owner address
>     msg.sender.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        587
Source: 
>   // tiers mapping of available reward tiers
>   mapping(uint256 => Tier) private g_tiers;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        600
Source: 
>     Tier memory tier0;
>     tier0._rate = uint256(1.00000000 * 10e7);
>                           ^^^^^^^^^^
>     tier0._price = 0 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        785
Source: 
>     /// Transfer the ether to owner address
>     msg.sender.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        785
Source: 
>     /// Transfer the ether to owner address
>     msg.sender.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        600
Source: 
>     Tier memory tier0;
>     tier0._rate = uint256(1.00000000 * 10e7);
>     ^^^^^
>     tier0._price = 0 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SparkleRewardTiers
Line:        650
Source: 
>     /// Initialize structure to specified data
>     newTier._rate = _rate;
>     ^^^^^^^
>     newTier._price = _price;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        337
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        349
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        337
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        349
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        386
Source: 
>     uint256 private constant _NOT_ENTERED = 1;
>     uint256 private constant _ENTERED = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        388
Source: 
> 
>     uint256 private _status;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
