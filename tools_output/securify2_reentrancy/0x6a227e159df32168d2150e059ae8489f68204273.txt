Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        143
Source: 
>         uint256 public maxCap;
>         uint public rate=20000000000000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        146
Source: 
>         //Tokens for presale
>         uint256 public presaleToken=50000000000000000000000000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Presale
Line:        235
Source: 
>          */
>         function closePresale() public onlyOwner{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             presaleEndDate=block.timestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Presale
Line:        251
Source: 
>         // Check Presale is Closed
>         function checkPresaleClosed() public view returns(bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (block.timestamp>=presaleEndDate);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Presale
Line:        256
Source: 
>         //check presale failed
>         function checkPresaleFailed() public view returns(bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return block.timestamp >= presaleEndDate && amountRaisedPresale < minCap;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Presale
Line:        223
Source: 
>             amountRaisedPresale=amountRaisedPresale.add(amount);
>             tokens=tokens.mul(bonus)*1000000000000000000;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             token.transfer(_beneficiary,tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        39
Source: 
>         }
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Presale
Line:        224
Source: 
>             tokens=tokens.mul(bonus)*1000000000000000000;
>             token.transfer(_beneficiary,tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenSoldInPresale=tokenSoldInPresale.add(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Presale
Line:        228
Source: 
>             presaleInvestors[_beneficiary]=amountDeposited.add(amount);
>             wallet.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             emit TokenPurchase(_beneficiary,amount,tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.6;
> ^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Presale
Line:        143
Source: 
>         uint256 public maxCap;
>         uint public rate=20000000000000;
>                          ^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Presale
Line:        146
Source: 
>         //Tokens for presale
>         uint256 public presaleToken=50000000000000000000000000;
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Presale
Line:        216
Source: 
>             uint bonus=1;
>             if(amount>=1000000000000000000)
>                        ^^^^^^^^^^^^^^^^^^^
>             {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Presale
Line:        223
Source: 
>             amountRaisedPresale=amountRaisedPresale.add(amount);
>             tokens=tokens.mul(bonus)*1000000000000000000;
>                                      ^^^^^^^^^^^^^^^^^^^
>             token.transfer(_beneficiary,tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Presale
Line:        228
Source: 
>             presaleInvestors[_beneficiary]=amountDeposited.add(amount);
>             wallet.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             emit TokenPurchase(_beneficiary,amount,tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Presale
Line:        228
Source: 
>             presaleInvestors[_beneficiary]=amountDeposited.add(amount);
>             wallet.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             emit TokenPurchase(_beneficiary,amount,tokens);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Presale
Line:        224
Source: 
>             tokens=tokens.mul(bonus)*1000000000000000000;
>             token.transfer(_beneficiary,tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenSoldInPresale=tokenSoldInPresale.add(tokens);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Presale
Line:        133
Source: 
>         // Amount raised in presale
>         uint256 public amountRaisedPresale;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Presale
Line:        149
Source: 
>         //Tokens distributed in presale
>         uint256 public tokenSoldInPresale;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Presale
Line:        228
Source: 
>             presaleInvestors[_beneficiary]=amountDeposited.add(amount);
>             wallet.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             emit TokenPurchase(_beneficiary,amount,tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Presale
Line:        222
Source: 
>            
>             amountRaisedPresale=amountRaisedPresale.add(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens=tokens.mul(bonus)*1000000000000000000;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Presale
Line:        225
Source: 
>             token.transfer(_beneficiary,tokens);
>             tokenSoldInPresale=tokenSoldInPresale.add(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 amountDeposited= presaleInvestors[_beneficiary];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Presale
Line:        227
Source: 
>             uint256 amountDeposited= presaleInvestors[_beneficiary];
>             presaleInvestors[_beneficiary]=amountDeposited.add(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             wallet.transfer(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Presale
Line:        224
Source: 
>             tokens=tokens.mul(bonus)*1000000000000000000;
>             token.transfer(_beneficiary,tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenSoldInPresale=tokenSoldInPresale.add(tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        110
Source: 
>         function safeTransfer(IERC20 token, address to, uint256 value) internal {
>             require(token.transfer(to, value));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        114
Source: 
>         function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>             require(token.transferFrom(from, to, value));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Presale
Line:        252
Source: 
>         function checkPresaleClosed() public view returns(bool) {
>             return (block.timestamp>=presaleEndDate);
>                     ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Presale
Line:        257
Source: 
>         function checkPresaleFailed() public view returns(bool) {
>             return block.timestamp >= presaleEndDate && amountRaisedPresale < minCap;
>                    ^^^^^^^^^^^^^^^
>         }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Presale
Line:        169
Source: 
>             wallet=_targetWallet;
>             presaleEndDate = block.timestamp+(60*60*24*_endDate);
>                              ^^^^^^^^^^^^^^^
>             presaleStartDate = block.timestamp;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Presale
Line:        170
Source: 
>             presaleEndDate = block.timestamp+(60*60*24*_endDate);
>             presaleStartDate = block.timestamp;
>                                ^^^^^^^^^^^^^^^
>             minContribution = _minContribution;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Presale
Line:        185
Source: 
>         modifier onlyBeforeEnd() {
>             require(block.timestamp>=presaleStartDate && block.timestamp <= presaleEndDate,"Closed");
>                     ^^^^^^^^^^^^^^^
>             _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Presale
Line:        185
Source: 
>         modifier onlyBeforeEnd() {
>             require(block.timestamp>=presaleStartDate && block.timestamp <= presaleEndDate,"Closed");
>                                                          ^^^^^^^^^^^^^^^
>             _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Presale
Line:        236
Source: 
>         function closePresale() public onlyOwner{
>             presaleEndDate=block.timestamp;
>                            ^^^^^^^^^^^^^^^
>         }

[0m
