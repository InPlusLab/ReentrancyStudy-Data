Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        78
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Gswap_stake
Line:        113
Source: 
> 
>     function ipo(string memory _symbol, string memory _name, string memory _icon,uint _goal) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint allowed = usdg.allowance(msg.sender,address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Gswap_stake
Line:        124
Source: 
> 
>     function addFile(uint _tokenId, string memory _file)public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenHolders[_tokenId] == msg.sender, "not authorized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Gswap_stake
Line:        129
Source: 
> 
>     function govWithdraUsdg(uint256 _amount)onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > 0, "!zero input");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Gswap_stake
Line:        124
Source: 
> 
>     function addFile(uint _tokenId, string memory _file)public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenHolders[_tokenId] == msg.sender, "not authorized");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Gswap_stake
Line:        113
Source: 
> 
>     function ipo(string memory _symbol, string memory _name, string memory _icon,uint _goal) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint allowed = usdg.allowance(msg.sender,address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Gswap_stake
Line:        135
Source: 
> 
>     function setParams(address _usdg,address _nft, uint _cost)onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdg = ERC20(_usdg);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Gswap_stake
Line:        114
Source: 
>     function ipo(string memory _symbol, string memory _name, string memory _icon,uint _goal) public {
>         uint allowed = usdg.allowance(msg.sender,address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balanced = usdg.balanceOf(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Gswap_stake
Line:        115
Source: 
>         uint allowed = usdg.allowance(msg.sender,address(this));
>         uint balanced = usdg.balanceOf(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed >= cost, "!allowed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Gswap_stake
Line:        118
Source: 
>         require(balanced >= cost, "!balanced");
>         usdg.transferFrom( msg.sender,address(this), cost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Gswap_stake
Line:        120
Source: 
> 
>         uint tokenId = nft.mintNft(msg.sender,_symbol,_name,_icon,_goal);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenHolders[tokenId] = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Gswap_stake
Line:        98
Source: 
> 
> contract Gswap_stake is Ownable{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Gswap_stake
Line:        114
Source: 
>     function ipo(string memory _symbol, string memory _name, string memory _icon,uint _goal) public {
>         uint allowed = usdg.allowance(msg.sender,address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balanced = usdg.balanceOf(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Gswap_stake
Line:        115
Source: 
>         uint allowed = usdg.allowance(msg.sender,address(this));
>         uint balanced = usdg.balanceOf(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed >= cost, "!allowed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Gswap_stake
Line:        118
Source: 
>         require(balanced >= cost, "!balanced");
>         usdg.transferFrom( msg.sender,address(this), cost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Gswap_stake
Line:        120
Source: 
> 
>         uint tokenId = nft.mintNft(msg.sender,_symbol,_name,_icon,_goal);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenHolders[tokenId] = msg.sender;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Gswap_stake
Line:        126
Source: 
>         require(tokenHolders[_tokenId] == msg.sender, "not authorized");
>         nft.addFile(_tokenId,_file);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Gswap_stake
Line:        131
Source: 
>         require(_amount > 0, "!zero input");
>         usdg.transfer( msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GovWithdrawToken(address(usdg), msg.sender, _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Gswap_stake
Line:        121
Source: 
>         uint tokenId = nft.mintNft(msg.sender,_symbol,_name,_icon,_goal);
>         tokenHolders[tokenId] = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
