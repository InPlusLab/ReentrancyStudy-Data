Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        146
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        165
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        174
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        146
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        165
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        174
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdFund
Line:        434
Source: 
> 
>     function updateClaimCondtions(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory _canClaimIfHasTokens,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CrowdFund
Line:        404
Source: 
>             if (canClaim(msg.sender)) {
>                 require(yfethToken.transfer(msg.sender, claimRewardAmount));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 isClaimed[msg.sender] = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CrowdFund
Line:        447
Source: 
>         if (now < startTime || yfePerWei == 0 || now >= endTime) {
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CrowdFund
Line:        461
Source: 
>             emit EthContributed(msg.sender, msg.value, yfeToTransfer);
>             require(yfethToken.transfer(msg.sender, yfeToTransfer));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //limit for refferer to earn maximum of 25 yfe tokens

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CrowdFund
Line:        471
Source: 
>                 );
>                 require(yfethToken.transfer(_referrer, referralRewardAmount));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CrowdFund
Line:        497
Source: 
>     {
>         uint256 _balance = IERC20(_tokenAddress).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenWithdrawn(_tokenAddress, _balance, _dest);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CrowdFund
Line:        499
Source: 
>         emit TokenWithdrawn(_tokenAddress, _balance, _dest);
>         require(IERC20(_tokenAddress).transfer(_dest, _balance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CrowdFund
Line:        509
Source: 
>         emit TokenWithdrawn(ETH_TOKEN_PLACHOLDER, _balance, _dest);
>         _dest.transfer(_balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CrowdFund
Line:        413
Source: 
>             if (
>                 IERC20(canClaimIfHasTokens[i]).balanceOf(_who) >=
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 canClaimIfHasThisMuchTokens[i]

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CrowdFund
Line:        410
Source: 
> 
>     function canClaim(address _who) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint8 i = 0; i < canClaimIfHasTokens.length; i++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CrowdFund
Line:        434
Source: 
> 
>     function updateClaimCondtions(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory _canClaimIfHasTokens,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CrowdFund
Line:        493
Source: 
>      */
>     function withdrawToken(address _tokenAddress, address _dest)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CrowdFund
Line:        506
Source: 
>      */
>     function withdrawEther(address payable _dest) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _balance = address(this).balance;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdFund
Line:        404
Source: 
>             if (canClaim(msg.sender)) {
>                 require(yfethToken.transfer(msg.sender, claimRewardAmount));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 isClaimed[msg.sender] = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdFund
Line:        461
Source: 
>             emit EthContributed(msg.sender, msg.value, yfeToTransfer);
>             require(yfethToken.transfer(msg.sender, yfeToTransfer));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //limit for refferer to earn maximum of 25 yfe tokens

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdFund
Line:        471
Source: 
>                 );
>                 require(yfethToken.transfer(_referrer, referralRewardAmount));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    CrowdFund
Line:        447
Source: 
>         if (now < startTime || yfePerWei == 0 || now >= endTime) {
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdFund
Line:        355
Source: 
>     mapping(address => uint256) public ethContributed;
>     mapping(address => uint256) public refferer_earnings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdFund
Line:        361
Source: 
>     uint256 public immutable endTime;
>     uint256 public constant referralRewardAmount = 500 finney; //0.5 yfeth
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant claimRewardAmount = 3 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdFund
Line:        362
Source: 
>     uint256 public constant referralRewardAmount = 500 finney; //0.5 yfeth
>     uint256 public constant claimRewardAmount = 3 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public yfePerWei = 100; //stage 1

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdFund
Line:        497
Source: 
>     {
>         uint256 _balance = IERC20(_tokenAddress).balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^
>         emit TokenWithdrawn(_tokenAddress, _balance, _dest);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdFund
Line:        507
Source: 
>     function withdrawEther(address payable _dest) external onlyOwner {
>         uint256 _balance = address(this).balance;
>         ^^^^^^^^^^^^^^^^
>         emit TokenWithdrawn(ETH_TOKEN_PLACHOLDER, _balance, _dest);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CrowdFund
Line:        357
Source: 
> 
>     address constant ETH_TOKEN_PLACHOLDER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CrowdFund
Line:        509
Source: 
>         emit TokenWithdrawn(ETH_TOKEN_PLACHOLDER, _balance, _dest);
>         _dest.transfer(_balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CrowdFund
Line:        509
Source: 
>         emit TokenWithdrawn(ETH_TOKEN_PLACHOLDER, _balance, _dest);
>         _dest.transfer(_balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CrowdFund
Line:        447
Source: 
>         if (now < startTime || yfePerWei == 0 || now >= endTime) {
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CrowdFund
Line:        447
Source: 
>         if (now < startTime || yfePerWei == 0 || now >= endTime) {
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CrowdFund
Line:        509
Source: 
>         emit TokenWithdrawn(ETH_TOKEN_PLACHOLDER, _balance, _dest);
>         _dest.transfer(_balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CrowdFund
Line:        404
Source: 
>             if (canClaim(msg.sender)) {
>                 require(yfethToken.transfer(msg.sender, claimRewardAmount));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 isClaimed[msg.sender] = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CrowdFund
Line:        413
Source: 
>             if (
>                 IERC20(canClaimIfHasTokens[i]).balanceOf(_who) >=
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 canClaimIfHasThisMuchTokens[i]

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CrowdFund
Line:        461
Source: 
>             emit EthContributed(msg.sender, msg.value, yfeToTransfer);
>             require(yfethToken.transfer(msg.sender, yfeToTransfer));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //limit for refferer to earn maximum of 25 yfe tokens

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CrowdFund
Line:        471
Source: 
>                 );
>                 require(yfethToken.transfer(_referrer, referralRewardAmount));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CrowdFund
Line:        497
Source: 
>     {
>         uint256 _balance = IERC20(_tokenAddress).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenWithdrawn(_tokenAddress, _balance, _dest);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CrowdFund
Line:        499
Source: 
>         emit TokenWithdrawn(_tokenAddress, _balance, _dest);
>         require(IERC20(_tokenAddress).transfer(_dest, _balance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CrowdFund
Line:        364
Source: 
>     uint256 public yfePerWei = 100; //stage 1
>     uint256 public totalEthContributed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CrowdFund
Line:        447
Source: 
>         if (now < startTime || yfePerWei == 0 || now >= endTime) {
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdFund
Line:        449
Source: 
>         } else {
>             totalEthContributed = totalEthContributed.add(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ethContributed[msg.sender] = ethContributed[msg.sender].add(

[0m
