Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        31
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Flipper
Line:        145
Source: 
>     // --- Auction ---
>     function kick(address usr, address gal, uint256 tab, uint256 lot, uint256 bid)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public auth returns (uint256 id)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FlipFab
Line:        224
Source: 
> contract FlipFab {
>     function newFlip(address vat, address cat, bytes32 ilk) public returns (Flipper flip) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         flip = new Flipper(vat, cat, ilk);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Flipper
Line:        75
Source: 
>     mapping (address => uint256) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Flipper
Line:        76
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Flipper
Line:        133
Source: 
>     // --- Admin ---
>     function file(bytes32 what, uint256 data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "beg") beg = data;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Flipper
Line:        139
Source: 
>     }
>     function file(bytes32 what, address data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "cat") cat = CatLike(data);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Flipper
Line:        145
Source: 
>     // --- Auction ---
>     function kick(address usr, address gal, uint256 tab, uint256 lot, uint256 bid)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public auth returns (uint256 id)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FlipFab
Line:        224
Source: 
> contract FlipFab {
>     function newFlip(address vat, address cat, bytes32 ilk) public returns (Flipper flip) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         flip = new Flipper(vat, cat, ilk);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Flipper
Line:        159
Source: 
> 
>         vat.flux(ilk, msg.sender, address(this), lot);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> 
> pragma solidity >=0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Flipper
Line:        99
Source: 
> 
>     uint256 constant ONE = 1.00E18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public   beg = 1.05E18;  // 5% minimum bid increase

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        159
Source: 
> 
>         vat.flux(ilk, msg.sender, address(this), lot);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        179
Source: 
>         if (msg.sender != bids[id].guy) {
>             vat.move(msg.sender, bids[id].guy, bids[id].bid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             bids[id].guy = msg.sender;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        182
Source: 
>         }
>         vat.move(msg.sender, bids[id].gal, bid - bids[id].bid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        198
Source: 
>         if (msg.sender != bids[id].guy) {
>             vat.move(msg.sender, bids[id].guy, bid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             bids[id].guy = msg.sender;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        201
Source: 
>         }
>         vat.flux(ilk, address(this), bids[id].usr, bids[id].lot - lot);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        208
Source: 
>         require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), "Flipper/not-finished");
>         cat.claw(bids[id].tab);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         vat.flux(ilk, address(this), bids[id].guy, bids[id].lot);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        209
Source: 
>         cat.claw(bids[id].tab);
>         vat.flux(ilk, address(this), bids[id].guy, bids[id].lot);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete bids[id];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        216
Source: 
>         require(bids[id].bid < bids[id].tab, "Flipper/already-dent-phase");
>         cat.claw(bids[id].tab);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         vat.flux(ilk, address(this), msg.sender, bids[id].lot);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        217
Source: 
>         cat.claw(bids[id].tab);
>         vat.flux(ilk, address(this), msg.sender, bids[id].lot);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vat.move(msg.sender, bids[id].guy, bids[id].bid);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Flipper
Line:        218
Source: 
>         vat.flux(ilk, address(this), msg.sender, bids[id].lot);
>         vat.move(msg.sender, bids[id].guy, bids[id].bid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete bids[id];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FlipFab
Line:        226
Source: 
>         flip = new Flipper(vat, cat, ilk);
>         flip.rely(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^
>         flip.deny(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FlipFab
Line:        227
Source: 
>         flip.rely(msg.sender);
>         flip.deny(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Flipper
Line:        126
Source: 
>     function add(uint48 x, uint48 y) internal pure returns (uint48 z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Flipper
Line:        129
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Flipper
Line:        166
Source: 
>         require(bids[id].tic == 0, "Flipper/bid-already-placed");
>         bids[id].end = add(uint48(now), tau);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Flipper
Line:        184
Source: 
> 
>         bids[id].bid = bid;
>         ^^^^^^^^^^^^^^^^^^
>         bids[id].tic = add(uint48(now), ttl);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Flipper
Line:        185
Source: 
>         bids[id].bid = bid;
>         bids[id].tic = add(uint48(now), ttl);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Flipper
Line:        203
Source: 
> 
>         bids[id].lot = lot;
>         ^^^^^^^^^^^^^^^^^^
>         bids[id].tic = add(uint48(now), ttl);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Flipper
Line:        204
Source: 
>         bids[id].lot = lot;
>         bids[id].tic = add(uint48(now), ttl);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Flipper
Line:        210
Source: 
>         vat.flux(ilk, address(this), bids[id].guy, bids[id].lot);
>         delete bids[id];
>         ^^^^^^^^^^^^^^^
>     }

[0m
