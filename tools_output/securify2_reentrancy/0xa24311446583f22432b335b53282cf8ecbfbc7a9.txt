Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DssSpell
Line:        497
Source: 
>         address _action = action;
>         assembly { _tag := extcodehash(_action) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tag = _tag;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DssSpell
Line:        477
Source: 
> contract DssSpell {
>     DSPauseAbstract public pause =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DssSpell
Line:        512
Source: 
>         require(now <= expiration, "This contract has expired");
>         require(eta == 0, "This spell has already been scheduled");
>                 ^^^^^^^^
>         eta = now + DSPauseAbstract(pause).delay();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssSpell
Line:        510
Source: 
> 
>     function schedule() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now <= expiration, "This contract has expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssSpell
Line:        517
Source: 
> 
>     function cast() public officeHours {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!done, "spell-already-cast");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        513
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + DSPauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        514
Source: 
>         eta = now + DSPauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        520
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    SpellAction
Line:        448
Source: 
>         // Set the global debt ceiling
>         VatAbstract(MCD_VAT).file("Line", 1_468_750_000 * RAD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A debt ceiling

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    SpellAction
Line:        450
Source: 
>         // Set the GUSD-A debt ceiling
>         VatAbstract(MCD_VAT).file(ilk, "line", 5 * MILLION * RAD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A dust

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    SpellAction
Line:        452
Source: 
>         // Set the GUSD-A dust
>         VatAbstract(MCD_VAT).file(ilk, "dust", 100 * RAD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the Lot size

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VatAbstract
Line:        294
Source: 
>     function vice() external view returns (uint256);
>     function Line() external view returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function live() external view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        376
Source: 
>     function execute() external {
>         address MCD_VAT      = CHANGELOG.getAddress("MCD_VAT");
>         ^^^^^^^^^^^^^^^
>         address MCD_CAT      = CHANGELOG.getAddress("MCD_CAT");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        377
Source: 
>         address MCD_VAT      = CHANGELOG.getAddress("MCD_VAT");
>         address MCD_CAT      = CHANGELOG.getAddress("MCD_CAT");
>         ^^^^^^^^^^^^^^^
>         address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        378
Source: 
>         address MCD_CAT      = CHANGELOG.getAddress("MCD_CAT");
>         address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");
>         ^^^^^^^^^^^^^^^
>         address MCD_SPOT     = CHANGELOG.getAddress("MCD_SPOT");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        379
Source: 
>         address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");
>         address MCD_SPOT     = CHANGELOG.getAddress("MCD_SPOT");
>         ^^^^^^^^^^^^^^^^
>         address MCD_END      = CHANGELOG.getAddress("MCD_END");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        380
Source: 
>         address MCD_SPOT     = CHANGELOG.getAddress("MCD_SPOT");
>         address MCD_END      = CHANGELOG.getAddress("MCD_END");
>         ^^^^^^^^^^^^^^^
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        381
Source: 
>         address MCD_END      = CHANGELOG.getAddress("MCD_END");
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>         ^^^^^^^^^^^^^^^^^^^
>         //address OSM_MOM      = CHANGELOG.getAddress("OSM_MOM");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        383
Source: 
>         //address OSM_MOM      = CHANGELOG.getAddress("OSM_MOM");
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>         ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        489
Source: 
>     // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/a67032a357000839ae08c7523abcf9888c8cca3a/governance/votes/Executive%20vote%20-%20November%2013%2C%202020.md -q -O - 2>/dev/null)"
>     string constant public description =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         "2020-11-13 MakerDAO Executive Spell | Hash: 0xa2b54a94b44575d01239378e48f966c4e583b965172be0a8c4b59b74523683ff";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        495
Source: 
>         action = address(new SpellAction());
>         bytes32 _tag;
>         ^^^^^^^^^^^^
>         address _action = action;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        496
Source: 
>         bytes32 _tag;
>         address _action = action;
>         ^^^^^^^^^^^^^^^
>         assembly { _tag := extcodehash(_action) }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // hevm: flattened sources of src/DssSpell.sol
> pragma solidity =0.5.12 >=0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        349
Source: 
>     //     https://changelog.makerdao.com/releases/mainnet/1.1.4/contracts.json
>     ChainlogAbstract constant CHANGELOG = ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        351
Source: 
> 
>     address constant FLIP_FAB        = 0x4ACdbe9dd0d00b36eC2050E805012b8Fc9974f2b;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        353
Source: 
> 
>     address constant GUSD            = 0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant MCD_JOIN_GUSD_A = 0xe29A14bcDeA40d83675aa43B72dF07f649738C8b;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        354
Source: 
>     address constant GUSD            = 0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd;
>     address constant MCD_JOIN_GUSD_A = 0xe29A14bcDeA40d83675aa43B72dF07f649738C8b;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant MCD_FLIP_GUSD_A = 0xCAa8D152A8b98229fB77A213BE16b234cA4f612f;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        355
Source: 
>     address constant MCD_JOIN_GUSD_A = 0xe29A14bcDeA40d83675aa43B72dF07f649738C8b;
>     address constant MCD_FLIP_GUSD_A = 0xCAa8D152A8b98229fB77A213BE16b234cA4f612f;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_GUSD        = 0xf45Ae69CcA1b9B043dAE2C83A5B65Bc605BEc5F5;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        356
Source: 
>     address constant MCD_FLIP_GUSD_A = 0xCAa8D152A8b98229fB77A213BE16b234cA4f612f;
>     address constant PIP_GUSD        = 0xf45Ae69CcA1b9B043dAE2C83A5B65Bc605BEc5F5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        359
Source: 
>     // Decimals & precision
>     uint256 constant THOUSAND = 10 ** 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant MILLION  = 10 ** 6;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        360
Source: 
>     uint256 constant THOUSAND = 10 ** 3;
>     uint256 constant MILLION  = 10 ** 6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant WAD      = 10 ** 18;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        361
Source: 
>     uint256 constant MILLION  = 10 ** 6;
>     uint256 constant WAD      = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAY      = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        362
Source: 
>     uint256 constant WAD      = 10 ** 18;
>     uint256 constant RAY      = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAD      = 10 ** 45;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        363
Source: 
>     uint256 constant RAY      = 10 ** 27;
>     uint256 constant RAD      = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        373
Source: 
>     //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW
>     uint256 constant FOUR_PERCENT_RATE = 1000000001243680656318820312;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpell
Line:        503
Source: 
>     modifier officeHours {
>         uint day = (now / 1 days + 3) % 7;
>         ^^^^^^^^
>         require(day < 5, "Can only be cast on a weekday");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpell
Line:        505
Source: 
>         require(day < 5, "Can only be cast on a weekday");
>         uint hour = now / 1 hours % 24;
>         ^^^^^^^^^
>         require(hour >= 14 && hour < 21, "Outside office hours");

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SpellAction
Line:        373
Source: 
>     //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW
>     uint256 constant FOUR_PERCENT_RATE = 1000000001243680656318820312;
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        376
Source: 
>     function execute() external {
>         address MCD_VAT      = CHANGELOG.getAddress("MCD_VAT");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address MCD_CAT      = CHANGELOG.getAddress("MCD_CAT");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        377
Source: 
>         address MCD_VAT      = CHANGELOG.getAddress("MCD_VAT");
>         address MCD_CAT      = CHANGELOG.getAddress("MCD_CAT");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        399
Source: 
>         // Sanity checks
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).vat() == MCD_VAT, "join-vat-not-match");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).ilk() == ilk, "join-ilk-not-match");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        400
Source: 
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).vat() == MCD_VAT, "join-vat-not-match");
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).ilk() == ilk, "join-ilk-not-match");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).gem() == GUSD, "join-gem-not-match");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        401
Source: 
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).ilk() == ilk, "join-ilk-not-match");
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).gem() == GUSD, "join-gem-not-match");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).dec() == 2, "join-dec-not-match");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        402
Source: 
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).gem() == GUSD, "join-gem-not-match");
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).dec() == 2, "join-dec-not-match");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(FlipAbstract(MCD_FLIP_GUSD_A).vat() == MCD_VAT, "flip-vat-not-match");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        403
Source: 
>         require(GemJoinAbstract(MCD_JOIN_GUSD_A).dec() == 2, "join-dec-not-match");
>         require(FlipAbstract(MCD_FLIP_GUSD_A).vat() == MCD_VAT, "flip-vat-not-match");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(FlipAbstract(MCD_FLIP_GUSD_A).cat() == MCD_CAT, "flip-cat-not-match");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        404
Source: 
>         require(FlipAbstract(MCD_FLIP_GUSD_A).vat() == MCD_VAT, "flip-vat-not-match");
>         require(FlipAbstract(MCD_FLIP_GUSD_A).cat() == MCD_CAT, "flip-cat-not-match");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(FlipAbstract(MCD_FLIP_GUSD_A).ilk() == ilk, "flip-ilk-not-match");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        405
Source: 
>         require(FlipAbstract(MCD_FLIP_GUSD_A).cat() == MCD_CAT, "flip-cat-not-match");
>         require(FlipAbstract(MCD_FLIP_GUSD_A).ilk() == ilk, "flip-ilk-not-match");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpell
Line:        513
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + DSPauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        378
Source: 
>         address MCD_CAT      = CHANGELOG.getAddress("MCD_CAT");
>         address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address MCD_SPOT     = CHANGELOG.getAddress("MCD_SPOT");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        379
Source: 
>         address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");
>         address MCD_SPOT     = CHANGELOG.getAddress("MCD_SPOT");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address MCD_END      = CHANGELOG.getAddress("MCD_END");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        380
Source: 
>         address MCD_SPOT     = CHANGELOG.getAddress("MCD_SPOT");
>         address MCD_END      = CHANGELOG.getAddress("MCD_END");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        381
Source: 
>         address MCD_END      = CHANGELOG.getAddress("MCD_END");
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //address OSM_MOM      = CHANGELOG.getAddress("OSM_MOM");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        383
Source: 
>         //address OSM_MOM      = CHANGELOG.getAddress("OSM_MOM");
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        386
Source: 
>         // Add the flipper factory to the changelog
>         CHANGELOG.setAddress("FLIP_FAB", FLIP_FAB);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        389
Source: 
>         // Add GUSD contracts to the changelog
>         CHANGELOG.setAddress("GUSD", GUSD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         CHANGELOG.setAddress("MCD_JOIN_GUSD_A", MCD_JOIN_GUSD_A);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        390
Source: 
>         CHANGELOG.setAddress("GUSD", GUSD);
>         CHANGELOG.setAddress("MCD_JOIN_GUSD_A", MCD_JOIN_GUSD_A);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         CHANGELOG.setAddress("MCD_FLIP_GUSD_A", MCD_FLIP_GUSD_A);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        391
Source: 
>         CHANGELOG.setAddress("MCD_JOIN_GUSD_A", MCD_JOIN_GUSD_A);
>         CHANGELOG.setAddress("MCD_FLIP_GUSD_A", MCD_FLIP_GUSD_A);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         CHANGELOG.setAddress("PIP_GUSD", PIP_GUSD);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        392
Source: 
>         CHANGELOG.setAddress("MCD_FLIP_GUSD_A", MCD_FLIP_GUSD_A);
>         CHANGELOG.setAddress("PIP_GUSD", PIP_GUSD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        394
Source: 
> 
>         CHANGELOG.setVersion("1.1.5");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        408
Source: 
>         // Set the GUSD PIP in the Spotter
>         SpotAbstract(MCD_SPOT).file(ilk, "pip", PIP_GUSD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        411
Source: 
>         // Set the GUSD-A Flipper in the Cat
>         CatAbstract(MCD_CAT).file(ilk, "flip", MCD_FLIP_GUSD_A);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        414
Source: 
>         // Init GUSD-A ilk in Vat & Jug
>         VatAbstract(MCD_VAT).init(ilk);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         JugAbstract(MCD_JUG).init(ilk);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        415
Source: 
>         VatAbstract(MCD_VAT).init(ilk);
>         JugAbstract(MCD_JUG).init(ilk);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        418
Source: 
>         // Allow GUSD-A Join to modify Vat registry
>         VatAbstract(MCD_VAT).rely(MCD_JOIN_GUSD_A);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Allow the GUSD-A Flipper to reduce the Cat litterbox on deal()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        420
Source: 
>         // Allow the GUSD-A Flipper to reduce the Cat litterbox on deal()
>         CatAbstract(MCD_CAT).rely(MCD_FLIP_GUSD_A);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Allow Cat to kick auctions in GUSD-A Flipper

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        422
Source: 
>         // Allow Cat to kick auctions in GUSD-A Flipper
>         FlipAbstract(MCD_FLIP_GUSD_A).rely(MCD_CAT);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Allow End to yank auctions in GUSD-A Flipper

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        424
Source: 
>         // Allow End to yank auctions in GUSD-A Flipper
>         FlipAbstract(MCD_FLIP_GUSD_A).rely(MCD_END);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Allow FlipperMom to access to the GUSD-A Flipper

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        426
Source: 
>         // Allow FlipperMom to access to the GUSD-A Flipper
>         FlipAbstract(MCD_FLIP_GUSD_A).rely(FLIPPER_MOM);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Disallow Cat to kick auctions in GUSD-A Flipper

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        429
Source: 
>         // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)
>         FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_GUSD_A);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        448
Source: 
>         // Set the global debt ceiling
>         VatAbstract(MCD_VAT).file("Line", 1_468_750_000 * RAD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A debt ceiling

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        450
Source: 
>         // Set the GUSD-A debt ceiling
>         VatAbstract(MCD_VAT).file(ilk, "line", 5 * MILLION * RAD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A dust

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        452
Source: 
>         // Set the GUSD-A dust
>         VatAbstract(MCD_VAT).file(ilk, "dust", 100 * RAD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the Lot size

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        454
Source: 
>         // Set the Lot size
>         CatAbstract(MCD_CAT).file(ilk, "dunk", 50 * THOUSAND * RAD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A liquidation penalty (e.g. 13% => X = 113)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        456
Source: 
>         // Set the GUSD-A liquidation penalty (e.g. 13% => X = 113)
>         CatAbstract(MCD_CAT).file(ilk, "chop", 113 * WAD / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A stability fee (e.g. 1% = 1000000000315522921573372069)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        458
Source: 
>         // Set the GUSD-A stability fee (e.g. 1% = 1000000000315522921573372069)
>         JugAbstract(MCD_JUG).file(ilk, "duty", FOUR_PERCENT_RATE);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A percentage between bids (e.g. 3% => X = 103)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        460
Source: 
>         // Set the GUSD-A percentage between bids (e.g. 3% => X = 103)
>         FlipAbstract(MCD_FLIP_GUSD_A).file("beg", 103 * WAD / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A time max time between bids

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        462
Source: 
>         // Set the GUSD-A time max time between bids
>         FlipAbstract(MCD_FLIP_GUSD_A).file("ttl", 6 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A max auction duration to

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        464
Source: 
>         // Set the GUSD-A max auction duration to
>         FlipAbstract(MCD_FLIP_GUSD_A).file("tau", 6 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the GUSD-A min collateralization ratio (e.g. 150% => X = 150)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        466
Source: 
>         // Set the GUSD-A min collateralization ratio (e.g. 150% => X = 150)
>         SpotAbstract(MCD_SPOT).file(ilk, "mat", 101 * RAY / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        469
Source: 
>         // Update GUSD-A spot value in Vat
>         SpotAbstract(MCD_SPOT).poke(ilk);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        472
Source: 
>         // Add new ilk to the IlkRegistry
>         IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_GUSD_A);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        514
Source: 
>         eta = now + DSPauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        520
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DssSpell
Line:        498
Source: 
>         assembly { _tag := extcodehash(_action) }
>         tag = _tag;
>               ^^^^
>         expiration = now + 30 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        481
Source: 
>     bytes32         public tag;
>     uint256         public eta;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes           public sig;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        484
Source: 
>     uint256         public expiration;
>     bool            public done;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssSpell
Line:        513
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + DSPauseAbstract(pause).delay();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssSpell
Line:        519
Source: 
>         require(!done, "spell-already-cast");
>         done = true;
>         ^^^^^^^^^^^
>         pause.exec(action, tag, sig, eta);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DssSpell
Line:        520
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssSpell
Line:        489
Source: 
>     // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/a67032a357000839ae08c7523abcf9888c8cca3a/governance/votes/Executive%20vote%20-%20November%2013%2C%202020.md -q -O - 2>/dev/null)"
>     string constant public description =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         "2020-11-13 MakerDAO Executive Spell | Hash: 0xa2b54a94b44575d01239378e48f966c4e583b965172be0a8c4b59b74523683ff";

[0m
