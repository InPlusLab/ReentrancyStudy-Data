Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        404
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) } // solium-disable-line security/no-inline-assembly
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    InauguralGateKeeper
Line:        767
Source: 
>     function destroy() external onlyCOO {
>         require(address(this).balance == 0, "Drain the funds first");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(tournament) == address(0), "Destroy Tournament first");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        507
Source: 
>             (setTournament != address(0)) &&
>             tournament.supportsInterface(_INTERFACE_ID_TOURNAMENT), "Invalid Tournament");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        509
Source: 
> 
>         tournamentPowerScale = tournament.powerScale();
>                                ^^^^^^^^^^^^^^^^^^^^^^^
>         require(tournamentPowerScale <= MAX_POWER_SCALE, "Power scale too high");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        550
Source: 
>         // Mint the requested Wizards in the guild contract, assigning ownership to the sender
>         wizardIds = WIZARD_GUILD.mintWizards(powers, affinities, msg.sender);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        553
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, powers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        796
Source: 
>         if (refund > (tx.gasprice * (9000+700))) {
>             msg.sender.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        610
Source: 
>         // Mint the requested Wizards via the guild contract
>         WIZARD_GUILD.mintReservedWizards(wizardIds, localPowers, affinities, owner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        613
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        693
Source: 
>              uint8[] memory affinities
>         ) = WIZARD_PRESALE.absorbWizardMulti(wizardIds);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        706
Source: 
>         // Mint the requested Wizards in the guild contract
>         WIZARD_GUILD.mintReservedWizards(wizardIds, localPowers, affinities, theOwner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        709
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        482
Source: 
>     modifier onlyWizardController(uint256 wizardId) {
>         require(WIZARD_GUILD.isApprovedOrOwner(msg.sender, wizardId), "Must be Wizard controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        722
Source: 
> 
>         tournament.revive.value(potContributionValue)(wizardId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        482
Source: 
>     modifier onlyWizardController(uint256 wizardId) {
>         require(WIZARD_GUILD.isApprovedOrOwner(msg.sender, wizardId), "Must be Wizard controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        732
Source: 
>         // The guild will enforce the Wizard doesn't already have an affinity set.
>         WIZARD_GUILD.setAffinity(wizardId, newAffinity);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        760
Source: 
>         // we can safely withdraw everything, with no hold-backs.
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        776
Source: 
>         if (address(tournament) != address(0)) {
>             require(tournament.isActive() == false, "Tournament active");
>                     ^^^^^^^^^^^^^^^^^^^^^
>             tournament.destroy();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        777
Source: 
>             require(tournament.isActive() == false, "Tournament active");
>             tournament.destroy();
>             ^^^^^^^^^^^^^^^^^^^^
>             tournament = TournamentInterface(0);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        561
Source: 
>             for (uint256 i = 0; i < wizardIds.length; i++) {
>                 bytes4 transferAccepted = IERC721Receiver(msg.sender).onERC721Received(msg.sender, address(0), wizardIds[i], "");
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(transferAccepted == _ERC721_RECEIVED, "Contract owner didn't accept ERC721 transfer");

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        621
Source: 
>             for (uint256 i = 0; i < wizardIds.length; i++) {
>                 bytes4 transferAccepted = IERC721Receiver(owner).onERC721Received(msg.sender, address(0), wizardIds[i], "");
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(transferAccepted == _ERC721_RECEIVED, "Contract owner didn't accept ERC721 transfer");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        295
Source: 
>     /// @param newCeo The address of the new CEO
>     function setCeo(address newCeo) external onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCeo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        309
Source: 
>     /// @param newCoo The address of the new COO
>     function setCoo(address newCoo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCoo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        317
Source: 
>     /// @param newCfo The address of the new CFO
>     function setCfo(address payable newCfo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCfo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        295
Source: 
>     /// @param newCeo The address of the new CEO
>     function setCeo(address newCeo) external onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCeo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        309
Source: 
>     /// @param newCoo The address of the new COO
>     function setCoo(address newCoo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCoo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        317
Source: 
>     /// @param newCfo The address of the new CFO
>     function setCfo(address payable newCfo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCfo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        542
Source: 
>     ///        `ELEMENT_`. ELEMENT_NOTSET is not valid for regular Wizards (unlike Exclusive Wizards).
>     function conjureWizardMulti(uint8[] memory affinities) public payable
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             returns (uint256[] memory wizardIds)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        685
Source: 
>     /// @param wizardIds The IDs of the presale Wizards; note that all Wizards MUST have the same owner.
>     function absorbPresaleWizards(uint256[] calldata wizardIds) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Bulk fetch the Wizards from the presale contract. Note that this will also delete those Wizards from the

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        715
Source: 
>     /// @param wizardId The ID of the Wizard to revive.
>     function revive(uint256 wizardId) external payable onlyWizardController(wizardId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We don't need to do any validation here, we can let the Tournament decide

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        728
Source: 
>     ///         have their affinity set when they are conjured.
>     function setAffinity(uint256 wizardId, uint8 newAffinity) external onlyWizardController(wizardId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newAffinity > ELEMENT_NOTSET && newAffinity <= MAX_ELEMENT, "Must choose a valid affinity");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        524
Source: 
>     ///        ELEMENT_NOTSET is not valid for regular Wizards (unlike Exclusive Wizards).
>     function conjureWizard(uint8 affinity) external payable returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8[] memory affinities = new uint8[](1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        581
Source: 
>     /// @param owner The recipient address of the newly conjured Cheeze Wizards.
>     function conjureExclusiveMulti(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] calldata wizardIds,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        738
Source: 
>     /// @return The power of the Wizard (cast to uint88).
>     function costToPower(uint256 cost) public pure returns (uint88 power) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint88(cost / MAX_POWER_SCALE);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        744
Source: 
>     /// @return The cost of the Wizard in wei.
>     function powerToCost(uint88 power) public pure returns (uint256 cost) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return power * MAX_POWER_SCALE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    InauguralGateKeeper
Line:        753
Source: 
>     function _potContribution(uint88 wizardPower) internal view returns (uint256) {
>         return wizardPower * tournamentPowerScale;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    InauguralGateKeeper
Line:        664
Source: 
>                 //       be in the valid range.
>                 elementalWizardCost += (elementalWizardCost * elementalWizardIncrement) / TENTH_BASIS_POINTS;
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    InauguralGateKeeper
Line:        507
Source: 
>             (setTournament != address(0)) &&
>             tournament.supportsInterface(_INTERFACE_ID_TOURNAMENT), "Invalid Tournament");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    InauguralGateKeeper
Line:        509
Source: 
> 
>         tournamentPowerScale = tournament.powerScale();
>                                ^^^^^^^^^^^^^^^^^^^^^^^
>         require(tournamentPowerScale <= MAX_POWER_SCALE, "Power scale too high");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    InauguralGateKeeper
Line:        776
Source: 
>         if (address(tournament) != address(0)) {
>             require(tournament.isActive() == false, "Tournament active");
>                     ^^^^^^^^^^^^^^^^^^^^^
>             tournament.destroy();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    InauguralGateKeeper
Line:        777
Source: 
>             require(tournament.isActive() == false, "Tournament active");
>             tournament.destroy();
>             ^^^^^^^^^^^^^^^^^^^^
>             tournament = TournamentInterface(0);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.6 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    InauguralGateKeeper
Line:        481
Source: 
> 
>     modifier onlyWizardController(uint256 wizardId) {
>                                   ^^^^^^^^^^^^^^^^
>         require(WIZARD_GUILD.isApprovedOrOwner(msg.sender, wizardId), "Must be Wizard controller");

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        439
Source: 
>     /// @dev The constant conversion factor used for elementalWizardIncrement
>     uint256 private constant TENTH_BASIS_POINTS = 100000;
>                                                   ^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        796
Source: 
>         if (refund > (tx.gasprice * (9000+700))) {
>             msg.sender.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        709
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        722
Source: 
> 
>         tournament.revive.value(potContributionValue)(wizardId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        553
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, powers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        613
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        760
Source: 
>         // we can safely withdraw everything, with no hold-backs.
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        553
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, powers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        613
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        709
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        722
Source: 
> 
>         tournament.revive.value(potContributionValue)(wizardId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        553
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, powers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        796
Source: 
>         if (refund > (tx.gasprice * (9000+700))) {
>             msg.sender.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        613
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        709
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        722
Source: 
> 
>         tournament.revive.value(potContributionValue)(wizardId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        760
Source: 
>         // we can safely withdraw everything, with no hold-backs.
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        507
Source: 
>             (setTournament != address(0)) &&
>             tournament.supportsInterface(_INTERFACE_ID_TOURNAMENT), "Invalid Tournament");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        509
Source: 
> 
>         tournamentPowerScale = tournament.powerScale();
>                                ^^^^^^^^^^^^^^^^^^^^^^^
>         require(tournamentPowerScale <= MAX_POWER_SCALE, "Power scale too high");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        550
Source: 
>         // Mint the requested Wizards in the guild contract, assigning ownership to the sender
>         wizardIds = WIZARD_GUILD.mintWizards(powers, affinities, msg.sender);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        561
Source: 
>             for (uint256 i = 0; i < wizardIds.length; i++) {
>                 bytes4 transferAccepted = IERC721Receiver(msg.sender).onERC721Received(msg.sender, address(0), wizardIds[i], "");
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(transferAccepted == _ERC721_RECEIVED, "Contract owner didn't accept ERC721 transfer");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        621
Source: 
>             for (uint256 i = 0; i < wizardIds.length; i++) {
>                 bytes4 transferAccepted = IERC721Receiver(owner).onERC721Received(msg.sender, address(0), wizardIds[i], "");
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(transferAccepted == _ERC721_RECEIVED, "Contract owner didn't accept ERC721 transfer");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        693
Source: 
>              uint8[] memory affinities
>         ) = WIZARD_PRESALE.absorbWizardMulti(wizardIds);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        482
Source: 
>     modifier onlyWizardController(uint256 wizardId) {
>         require(WIZARD_GUILD.isApprovedOrOwner(msg.sender, wizardId), "Must be Wizard controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        776
Source: 
>         if (address(tournament) != address(0)) {
>             require(tournament.isActive() == false, "Tournament active");
>                     ^^^^^^^^^^^^^^^^^^^^^
>             tournament.destroy();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        553
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, powers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        610
Source: 
>         // Mint the requested Wizards via the guild contract
>         WIZARD_GUILD.mintReservedWizards(wizardIds, localPowers, affinities, owner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        613
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        706
Source: 
>         // Mint the requested Wizards in the guild contract
>         WIZARD_GUILD.mintReservedWizards(wizardIds, localPowers, affinities, theOwner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        709
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        722
Source: 
> 
>         tournament.revive.value(potContributionValue)(wizardId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        732
Source: 
>         // The guild will enforce the Wizard doesn't already have an affinity set.
>         WIZARD_GUILD.setAffinity(wizardId, newAffinity);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        777
Source: 
>             require(tournament.isActive() == false, "Tournament active");
>             tournament.destroy();
>             ^^^^^^^^^^^^^^^^^^^^
>             tournament = TournamentInterface(0);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        405
Source: 
>         assembly { size := extcodesize(account) } // solium-disable-line security/no-inline-assembly
>         return size > 0;
>                ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AccessControl
Line:        251
Source: 
>     ///      computer.
>     address payable public cfoAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        419
Source: 
>     // The Tournament contract.
>     TournamentInterface public tournament;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        432
Source: 
>     uint256 internal constant MAX_POWER_SCALE = 1000;
>     uint256 internal tournamentPowerScale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        553
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, powers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        709
Source: 
>         // Enter the new Wizards into the Tournament
>         tournament.enterWizards.value(contribution)(wizardIds, localPowers);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    InauguralGateKeeper
Line:        722
Source: 
> 
>         tournament.revive.value(potContributionValue)(wizardId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        796
Source: 
>         if (refund > (tx.gasprice * (9000+700))) {
>             msg.sender.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InauguralGateKeeper
Line:        678
Source: 
>         // the value isn't actually changed.
>         wizardCosts.elementalWizardCost = uint96(elementalWizardCost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        12
Source: 
>     // In this case the affinity can be set by the owner.
>     uint8 internal constant ELEMENT_NOTSET = 0; //000
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // A neutral Wizard has no particular strength or weakness with specific

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        15
Source: 
>     // elements.
>     uint8 internal constant ELEMENT_NEUTRAL = 1; //001
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The fire, water and wind elements are used both to reflect an affinity

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        21
Source: 
>     // ThreeAffinityDuelResolver would need to be updated accordingly.
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WATER = 3; //011

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        22
Source: 
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     uint8 internal constant ELEMENT_WATER = 3; //011
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WIND = 4; //100

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        24
Source: 
>     uint8 internal constant ELEMENT_WIND = 4; //100
>     uint8 internal constant MAX_ELEMENT = ELEMENT_WIND;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardGuildInterfaceId
Line:        75
Source: 
> contract WizardGuildInterfaceId {
>     bytes4 internal constant _INTERFACE_ID_WIZARDGUILD = 0x41d4d437;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TournamentInterfaceId
Line:        210
Source: 
> contract TournamentInterfaceId {
>     bytes4 internal constant _INTERFACE_ID_TOURNAMENT = 0xbd059098;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        21
Source: 
>     // ThreeAffinityDuelResolver would need to be updated accordingly.
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WATER = 3; //011

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        22
Source: 
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     uint8 internal constant ELEMENT_WATER = 3; //011
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WIND = 4; //100

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardGuildInterfaceId
Line:        75
Source: 
> contract WizardGuildInterfaceId {
>     bytes4 internal constant _INTERFACE_ID_WIZARDGUILD = 0x41d4d437;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
