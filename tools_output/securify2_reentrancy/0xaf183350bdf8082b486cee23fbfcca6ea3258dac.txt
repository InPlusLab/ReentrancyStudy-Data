Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DeFiFirefly
Line:        121
Source: 
> 		uint32 _size;
> 		assembly {
>   ^^^^^^^^^^
> 			_size := extcodesize(_to)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DeFiFirefly
Line:        34
Source: 
> 	}
> 	Info public info;
>  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DeFiFirefly
Line:        137
Source: 
> 
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DeFiFirefly
Line:        141
Source: 
> 
> 	function totalStaked() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.totalStaked;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DeFiFirefly
Line:        157
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DeFiFirefly
Line:        185
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 userBalance, uint256 userStaked, uint256 userDividends,uint256 totalEarned) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ( balanceOf(_user), stakedOf(_user), dividendsOf(_user),userTotalEarned(_user));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DeFiFirefly
Line:        125
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DeFiFirefly
Line:        56
Source: 
> 
> 	function stake(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_stake(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DeFiFirefly
Line:        60
Source: 
> 
> 	function unstake(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_unstake(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DeFiFirefly
Line:        100
Source: 
> 
> 	function transfer(address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, _to, _tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DeFiFirefly
Line:        111
Source: 
> 
> 	function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(info.users[_from].allowance[msg.sender] >= _tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DeFiFirefly
Line:        118
Source: 
> 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DeFiFirefly
Line:        105
Source: 
> 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].allowance[_spender] = _tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DeFiFirefly
Line:        145
Source: 
> 
> 	function balanceOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].balance - stakedOf(_user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DeFiFirefly
Line:        149
Source: 
> 
> 	function stakedOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].staked;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DeFiFirefly
Line:        153
Source: 
> 
> 	function dividendsOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return	info.users[_user].dividend;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DeFiFirefly
Line:        157
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DeFiFirefly
Line:        161
Source: 
> 	
> 	function userTotalEarned(address _user) public view returns(uint256){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return info.users[_user].totalEarned;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DeFiFirefly
Line:        185
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 userBalance, uint256 userStaked, uint256 userDividends,uint256 totalEarned) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ( balanceOf(_user), stakedOf(_user), dividendsOf(_user),userTotalEarned(_user));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DeFiFirefly
Line:        180
Source: 
>         }
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    DeFiFirefly
Line:        67
Source: 
> 		require(_dividends >= 0, "no dividends to recieve");
> 		address(uint160(msg.sender)).transfer(_dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Collect(msg.sender, _dividends);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    DeFiFirefly
Line:        94
Source: 
>         emit POOLDDIVIDENDCALCULATE(info.totalStaked, unallocatedEth, share, count, distributed);
>         address(uint160(info.admin)).transfer(unallocatedEth - distributed);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(share > 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DeFiFirefly
Line:        15
Source: 
> 
> 	string constant public name = "Defi Firefly";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "DFF";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DeFiFirefly
Line:        16
Source: 
> 	string constant public name = "Defi Firefly";
> 	string constant public symbol = "DFF";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 8;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DeFiFirefly
Line:        17
Source: 
> 	string constant public symbol = "DFF";
> 	uint8 constant public decimals = 8;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DeFiFirefly
Line:        65
Source: 
> 	function collectDividend() public returns (uint256) {
> 	    uint256 _dividends = dividendsOf(msg.sender);
>      ^^^^^^^^^^^^^^^^^^
> 		require(_dividends >= 0, "no dividends to recieve");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DeFiFirefly
Line:        119
Source: 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens);
>   ^^^^^^^^^^^^^^^^^^^^
> 		uint32 _size;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DeFiFirefly
Line:        120
Source: 
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens);
> 		uint32 _size;
>   ^^^^^^^^^^^^
> 		assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DeFiFirefly
Line:        11
Source: 
> 	uint256 public unallocatedEth;
> 	uint256 id;
>  ^^^^^^^^^^
> 	mapping(uint256 => address) idToAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DeFiFirefly
Line:        12
Source: 
> 	uint256 id;
> 	mapping(uint256 => address) idToAddress;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) isUser;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DeFiFirefly
Line:        13
Source: 
> 	mapping(uint256 => address) idToAddress;
> 	mapping(address => bool) isUser;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DeFiFirefly
Line:        67
Source: 
> 		require(_dividends >= 0, "no dividends to recieve");
> 		address(uint160(msg.sender)).transfer(_dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Collect(msg.sender, _dividends);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DeFiFirefly
Line:        94
Source: 
>         emit POOLDDIVIDENDCALCULATE(info.totalStaked, unallocatedEth, share, count, distributed);
>         address(uint160(info.admin)).transfer(unallocatedEth - distributed);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(share > 0){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DeFiFirefly
Line:        94
Source: 
>         emit POOLDDIVIDENDCALCULATE(info.totalStaked, unallocatedEth, share, count, distributed);
>         address(uint160(info.admin)).transfer(unallocatedEth - distributed);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(share > 0){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DeFiFirefly
Line:        67
Source: 
> 		require(_dividends >= 0, "no dividends to recieve");
> 		address(uint160(msg.sender)).transfer(_dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Collect(msg.sender, _dividends);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DeFiFirefly
Line:        94
Source: 
>         emit POOLDDIVIDENDCALCULATE(info.totalStaked, unallocatedEth, share, count, distributed);
>         address(uint160(info.admin)).transfer(unallocatedEth - distributed);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(share > 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DeFiFirefly
Line:        125
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DeFiFirefly
Line:        90
Source: 
>                 distributed += mul(share, div(stakedOf(idToAddress[i]),1e8,"division error"));
>                 count++;
>                 ^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DeFiFirefly
Line:        124
Source: 
> 		}
> 		if (_size > 0) {
>       ^^^^^
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DeFiFirefly
Line:        10
Source: 
> 	uint256 constant public INITIAL_SUPPLY = 9e13; // 900,000
> 	uint256 public unallocatedEth;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 id;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DeFiFirefly
Line:        34
Source: 
> 	}
> 	Info public info;
>  ^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DeFiFirefly
Line:        67
Source: 
> 		require(_dividends >= 0, "no dividends to recieve");
> 		address(uint160(msg.sender)).transfer(_dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Collect(msg.sender, _dividends);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        204
Source: 
> 		require(balanceOf(msg.sender) >= _amount, "insufficient funds");
> 		info.totalStaked += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].staked += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        205
Source: 
> 		info.totalStaked += _amount;
> 		info.users[msg.sender].staked += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].stakeTimestamp = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        206
Source: 
> 		info.users[msg.sender].staked += _amount;
> 		info.users[msg.sender].stakeTimestamp = now;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(this), _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        69
Source: 
> 		emit Collect(msg.sender, _dividends);
> 		info.users[msg.sender].dividend = 0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].totalEarned += _dividends;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        70
Source: 
> 		info.users[msg.sender].dividend = 0;
> 		info.users[msg.sender].totalEarned += _dividends;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _dividends;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        192
Source: 
> 		if(!isUser[_to]){
> 		    idToAddress[id] = _to;
>       ^^^^^^^^^^^^^^^^^^^^^
> 		    isUser[_to] = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        193
Source: 
> 		    idToAddress[id] = _to;
> 		    isUser[_to] = true;
>       ^^^^^^^^^^^^^^^^^^
> 		    id++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        194
Source: 
> 		    isUser[_to] = true;
> 		    id++;
>       ^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        196
Source: 
> 		}
> 		info.users[_from].balance -= _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         info.users[_to].balance += _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DeFiFirefly
Line:        197
Source: 
> 		info.users[_from].balance -= _tokens;
>         info.users[_to].balance += _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DeFiFirefly
Line:        106
Source: 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
> 		info.users[msg.sender].allowance[_spender] = _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _spender, _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DeFiFirefly
Line:        15
Source: 
> 
> 	string constant public name = "Defi Firefly";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "DFF";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DeFiFirefly
Line:        16
Source: 
> 	string constant public name = "Defi Firefly";
> 	string constant public symbol = "DFF";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 8;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DeFiFirefly
Line:        17
Source: 
> 	string constant public symbol = "DFF";
> 	uint8 constant public decimals = 8;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
