Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Math
Line:        82
Source: 
>   /** @dev multiplies two numbers, reverts on overflow */
>   function times(uint x, uint y) internal pure returns (uint z) { require(y == 0 || (z = x * y) / y == x, "bad multiplication"); }
>                                                                                     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HasOwners
Line:        129
Source: 
> 
>   function getOwners() public view returns (address[] memory) { return owners; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        208
Source: 
> 
>   function transfer(address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Default assumes totalSupply can"t be over max (2^256 - 1).

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        220
Source: 
> 
>   function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //same as above. Replace this line map the following if you want to protect against wrapping uints.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        232
Source: 
> 
>   function balanceOf(address _owner) public view returns (uint balance) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        236
Source: 
> 
>   function approve(address _spender, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        242
Source: 
> 
>   function allowance(address _owner, address _spender) public view returns (uint remaining) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HasOwners
Line:        129
Source: 
> 
>   function getOwners() public view returns (address[] memory) { return owners; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        208
Source: 
> 
>   function transfer(address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Default assumes totalSupply can"t be over max (2^256 - 1).

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        220
Source: 
> 
>   function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //same as above. Replace this line map the following if you want to protect against wrapping uints.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        232
Source: 
> 
>   function balanceOf(address _owner) public view returns (uint balance) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        236
Source: 
> 
>   function approve(address _spender, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        242
Source: 
> 
>   function allowance(address _owner, address _spender) public view returns (uint remaining) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fee
Line:        286
Source: 
>   /// @param quantity Amount of tokens to delete
>   function burnTokens(uint quantity) public notZero(quantity) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(balances[msg.sender] >= quantity, "insufficient quantity to burn");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fee
Line:        297
Source: 
>   /// @param quantity The amount o
>   function sendTokens(address to, uint quantity) public onlyMinter validAddress(to) notZero(quantity) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     balances[to] = Math.plus(balances[to], quantity);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HasOwners
Line:        129
Source: 
> 
>   function getOwners() public view returns (address[] memory) { return owners; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stake
Line:        452
Source: 
> 
>   function transferToWalletAfterHalt() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(halted, "Stake is not halted yet.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stake
Line:        460
Source: 
> 
>   function transferToken(address token) public validAddress(token) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (token == address(FEE)) return;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stake
Line:        492
Source: 
> 
>   function registerApiKey(address registry, address apiKey, bytes32 userAgreement) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Registry(registry).registerWithUserAgreement(apiKey, userAgreement);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stake
Line:        496
Source: 
> 
>   function withdrawFromCustodian(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address custodian,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stake
Line:        507
Source: 
> 
>   function exitOnHaltFromCustodian(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address custodian,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        388
Source: 
>     FEE2Distribute = FEE2Distribute.plus(interval.generatedFEE);
>     if (ethEarned.div(weiPerFEE) > 0) FEE.sendTokens(address(this), ethEarned.div(weiPerFEE));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        390
Source: 
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        486
Source: 
>   function calculateIntervalEarning(uint start, uint end) public view returns (uint earnedFEE, uint earnedETH) {
>     earnedFEE = FEE.balanceOf(address(this)).minus(FEE2Distribute);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     earnedETH = address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        475
Source: 
>       FEE2Distribute = FEE2Distribute.minus(earnedFEE);
>       require(FEE.transfer(msg.sender, earnedFEE), "Fee transfer to account failed");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        479
Source: 
>       totalStakedLEV = totalStakedLEV.minus(howMuchLEV);
>       require(LEV.transfer(msg.sender, howMuchLEV), "Redeeming LEV token to account failed.");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        428
Source: 
>   function stakeInCurrentPeriod(uint quantity) private {
>     require(LEV.allowance(msg.sender, address(this)) >= quantity, "Approve LEV tokens first");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Interval storage interval = intervals[latest];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        434
Source: 
>     interval.worth = interval.worth.plus(quantity.times(interval.end.minus(block.number)));
>     require(LEV.transferFrom(msg.sender, address(this), quantity), "LEV token transfer was not successful");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalStakedLEV = totalStakedLEV.plus(quantity);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        454
Source: 
>     require(halted, "Stake is not halted yet.");
>     uint feeEarned = FEE.balanceOf(address(this)).minus(FEE2Distribute);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint ethEarned = address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        456
Source: 
>     uint ethEarned = address(this).balance;
>     if (feeEarned > 0) FEE.transfer(wallet, feeEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        457
Source: 
>     if (feeEarned > 0) FEE.transfer(wallet, feeEarned);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        463
Source: 
> 
>     uint balance = Token(token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (token == address(LEV)) balance = balance.minus(totalStakedLEV);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        465
Source: 
>     if (token == address(LEV)) balance = balance.minus(totalStakedLEV);
>     if (balance > 0) Token(token).transfer(wallet, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        493
Source: 
>   function registerApiKey(address registry, address apiKey, bytes32 userAgreement) public onlyOwner {
>     Registry(registry).registerWithUserAgreement(apiKey, userAgreement);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        504
Source: 
>   ) public {
>     Withdrawing(custodian).withdraw(addresses, uints, signature, proof, root);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Stake
Line:        515
Source: 
>   ) public {
>     Withdrawing(custodian).exitOnHalt(addresses, uints, signature, proof, root);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HasOwners
Line:        131
Source: 
> 
>   function addOwner(address owner) external onlyOwner {  _addOwner_(owner); }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stake
Line:        370
Source: 
> 
>   function setWallet(address payable _wallet) external validAddress(_wallet) onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ensureInterval();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stake
Line:        375
Source: 
> 
>   function setIntervalSize(uint _intervalSize) external notZero(_intervalSize) onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ensureInterval();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stake
Line:        419
Source: 
> 
>   function stake(int signedQuantity) external notHalted {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ensureInterval();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        208
Source: 
> 
>   function transfer(address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Default assumes totalSupply can"t be over max (2^256 - 1).

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        220
Source: 
> 
>   function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //same as above. Replace this line map the following if you want to protect against wrapping uints.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        232
Source: 
> 
>   function balanceOf(address _owner) public view returns (uint balance) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        236
Source: 
> 
>   function approve(address _spender, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        242
Source: 
> 
>   function allowance(address _owner, address _spender) public view returns (uint remaining) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        208
Source: 
> 
>   function transfer(address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //Default assumes totalSupply can"t be over max (2^256 - 1).

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        220
Source: 
> 
>   function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //same as above. Replace this line map the following if you want to protect against wrapping uints.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        232
Source: 
> 
>   function balanceOf(address _owner) public view returns (uint balance) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        236
Source: 
> 
>   function approve(address _spender, uint _value) public returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        242
Source: 
> 
>   function allowance(address _owner, address _spender) public view returns (uint remaining) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stake
Line:        485
Source: 
>   // public for testing purposes only. not intended to be called directly
>   function calculateIntervalEarning(uint start, uint end) public view returns (uint earnedFEE, uint earnedETH) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     earnedFEE = FEE.balanceOf(address(this)).minus(FEE2Distribute);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stake
Line:        492
Source: 
> 
>   function registerApiKey(address registry, address apiKey, bytes32 userAgreement) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Registry(registry).registerWithUserAgreement(apiKey, userAgreement);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stake
Line:        496
Source: 
> 
>   function withdrawFromCustodian(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address custodian,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stake
Line:        507
Source: 
> 
>   function exitOnHaltFromCustodian(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address custodian,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Math
Line:        82
Source: 
>   /** @dev multiplies two numbers, reverts on overflow */
>   function times(uint x, uint y) internal pure returns (uint z) { require(y == 0 || (z = x * y) / y == x, "bad multiplication"); }
>                                                                                          ^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Stake
Line:        404
Source: 
>     uint lev = stake.quantity;
>     uint withdrawLev = signedQuantity >= 0 ? 0 : (stake.quantity).min(uint(signedQuantity * -1));
>                                                                            ^^^^^^^^^^^^^^^^^^^
>     redeem(withdrawLev);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Stake
Line:        388
Source: 
>     FEE2Distribute = FEE2Distribute.plus(interval.generatedFEE);
>     if (ethEarned.div(weiPerFEE) > 0) FEE.sendTokens(address(this), ethEarned.div(weiPerFEE));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Stake
Line:        390
Source: 
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Stake
Line:        329
Source: 
>   event NewInterval(uint start, uint end, uint intervalId);
>   event Halted(uint block, uint intervalId);
>                ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Fee
Line:        270
Source: 
> 
>   constructor(address[] memory owners, string memory tokenName, uint8 decimalUnits, string memory tokenSymbol, string memory _version)
>               ^^^^^^^^^^^^^^^^^^^^^^^
>     HasOwners(owners)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Stake
Line:        400
Source: 
>   function restake(int signedQuantity) private {
>     UserStake storage stake = stakes[msg.sender];
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     if (stake.intervalId == latest || stake.intervalId == 0) return;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        310
Source: 
>   uint public weiPerFEE; // Wei for each Fee token
>   Token public LEV;
>   ^^^^^^^^^^^^^^^^
>   Fee public FEE;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        311
Source: 
>   Token public LEV;
>   Fee public FEE;
>   ^^^^^^^^^^^^^^
>   address payable public wallet;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        317
Source: 
>   bool public halted;
>   uint public FEE2Distribute;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public totalStakedLEV;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Validating
Line:        109
Source: 
> 
>   modifier notZero(uint number) { require(number != 0, "invalid 0 value"); _; }
>                    ^^^^^^^^^^^
>   modifier notEmpty(string memory text) { require(bytes(text).length != 0, "invalid empty string"); _; }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Validating
Line:        110
Source: 
>   modifier notZero(uint number) { require(number != 0, "invalid 0 value"); _; }
>   modifier notEmpty(string memory text) { require(bytes(text).length != 0, "invalid empty string"); _; }
>                     ^^^^^^^^^^^^^^^^^^
>   modifier validAddress(address value) { require(value != address(0x0), "invalid address");  _; }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Validating
Line:        111
Source: 
>   modifier notEmpty(string memory text) { require(bytes(text).length != 0, "invalid empty string"); _; }
>   modifier validAddress(address value) { require(value != address(0x0), "invalid address");  _; }
>                         ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StandardToken
Line:        246
Source: 
> 
>   mapping(address => uint) balances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StandardToken
Line:        247
Source: 
>   mapping(address => uint) balances;
>   mapping(address => mapping(address => uint)) allowed;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Stake
Line:        390
Source: 
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stake
Line:        457
Source: 
>     if (feeEarned > 0) FEE.transfer(wallet, feeEarned);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Stake
Line:        390
Source: 
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stake
Line:        457
Source: 
>     if (feeEarned > 0) FEE.transfer(wallet, feeEarned);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stake
Line:        390
Source: 
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stake
Line:        457
Source: 
>     if (feeEarned > 0) FEE.transfer(wallet, feeEarned);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        486
Source: 
>   function calculateIntervalEarning(uint start, uint end) public view returns (uint earnedFEE, uint earnedETH) {
>     earnedFEE = FEE.balanceOf(address(this)).minus(FEE2Distribute);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     earnedETH = address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        475
Source: 
>       FEE2Distribute = FEE2Distribute.minus(earnedFEE);
>       require(FEE.transfer(msg.sender, earnedFEE), "Fee transfer to account failed");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        479
Source: 
>       totalStakedLEV = totalStakedLEV.minus(howMuchLEV);
>       require(LEV.transfer(msg.sender, howMuchLEV), "Redeeming LEV token to account failed.");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        428
Source: 
>   function stakeInCurrentPeriod(uint quantity) private {
>     require(LEV.allowance(msg.sender, address(this)) >= quantity, "Approve LEV tokens first");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Interval storage interval = intervals[latest];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        434
Source: 
>     interval.worth = interval.worth.plus(quantity.times(interval.end.minus(block.number)));
>     require(LEV.transferFrom(msg.sender, address(this), quantity), "LEV token transfer was not successful");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalStakedLEV = totalStakedLEV.plus(quantity);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        454
Source: 
>     require(halted, "Stake is not halted yet.");
>     uint feeEarned = FEE.balanceOf(address(this)).minus(FEE2Distribute);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint ethEarned = address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        463
Source: 
> 
>     uint balance = Token(token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (token == address(LEV)) balance = balance.minus(totalStakedLEV);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        363
Source: 
>     operator = _operator;
>     Registry(registry).registerWithUserAgreement(apiKey, userAgreement);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        388
Source: 
>     FEE2Distribute = FEE2Distribute.plus(interval.generatedFEE);
>     if (ethEarned.div(weiPerFEE) > 0) FEE.sendTokens(address(this), ethEarned.div(weiPerFEE));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        456
Source: 
>     uint ethEarned = address(this).balance;
>     if (feeEarned > 0) FEE.transfer(wallet, feeEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        465
Source: 
>     if (token == address(LEV)) balance = balance.minus(totalStakedLEV);
>     if (balance > 0) Token(token).transfer(wallet, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        493
Source: 
>   function registerApiKey(address registry, address apiKey, bytes32 userAgreement) public onlyOwner {
>     Registry(registry).registerWithUserAgreement(apiKey, userAgreement);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        504
Source: 
>   ) public {
>     Withdrawing(custodian).withdraw(addresses, uints, signature, proof, root);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        515
Source: 
>   ) public {
>     Withdrawing(custodian).exitOnHalt(addresses, uints, signature, proof, root);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        75
Source: 
>   /** @dev adds two numbers, reverts on overflow */
>   function plus(uint x, uint y) internal pure returns (uint z) { require((z = x + y) >= x, "bad addition"); }
>                                                                           ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        78
Source: 
>   /** @dev subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend) */
>   function minus(uint x, uint y) internal pure returns (uint z) { require((z = x - y) <= x, "bad subtraction"); }
>                                                                            ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        82
Source: 
>   /** @dev multiplies two numbers, reverts on overflow */
>   function times(uint x, uint y) internal pure returns (uint z) { require(y == 0 || (z = x * y) / y == x, "bad multiplication"); }
>                                                                                      ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        92
Source: 
>   function dividePerfectlyBy(uint x, uint y) internal pure returns (uint z) {
>     require((z = x / y) * y == x, "bad division; leaving a reminder");
>              ^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Token
Line:        28
Source: 
>   /// total amount of tokens
>   uint public totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fee
Line:        266
Source: 
>   string public symbol;                 //An identifier: eg SBX
>   address public minter;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Stake
Line:        316
Source: 
> 
>   bool public halted;
>   ^^^^^^^^^^^^^^^^^^
>   uint public FEE2Distribute;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Stake
Line:        317
Source: 
>   bool public halted;
>   uint public FEE2Distribute;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public totalStakedLEV;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Stake
Line:        318
Source: 
>   uint public FEE2Distribute;
>   uint public totalStakedLEV;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public latest = 1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Token
Line:        28
Source: 
>   /// total amount of tokens
>   uint public totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Stake
Line:        390
Source: 
>     emit FeeCalculated(interval.generatedFEE, feeEarned, ethEarned, interval.start, interval.end, latest);
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        386
Source: 
>     (uint feeEarned, uint ethEarned) = calculateIntervalEarning(interval.start, interval.end);
>     interval.generatedFEE = feeEarned.plus(ethEarned.div(weiPerFEE));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     FEE2Distribute = FEE2Distribute.plus(interval.generatedFEE);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        387
Source: 
>     interval.generatedFEE = feeEarned.plus(ethEarned.div(weiPerFEE));
>     FEE2Distribute = FEE2Distribute.plus(interval.generatedFEE);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (ethEarned.div(weiPerFEE) > 0) FEE.sendTokens(address(this), ethEarned.div(weiPerFEE));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        393
Source: 
>     uint diff = (block.number - intervals[latest].end) % intervalSize;
>     latest += 1;
>     ^^^^^^^^^^^
>     intervals[latest].start = intervals[latest - 1].end;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        394
Source: 
>     latest += 1;
>     intervals[latest].start = intervals[latest - 1].end;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     intervals[latest].end = block.number - diff + intervalSize;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        395
Source: 
>     intervals[latest].start = intervals[latest - 1].end;
>     intervals[latest].end = block.number - diff + intervalSize;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit NewInterval(intervals[latest].start, intervals[latest].end, latest);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        472
Source: 
>     uint earnedFEE = stakes[msg.sender].worth.times(interval.generatedFEE).div(interval.worth);
>     delete stakes[msg.sender];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (earnedFEE > 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        474
Source: 
>     if (earnedFEE > 0) {
>       FEE2Distribute = FEE2Distribute.minus(earnedFEE);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(FEE.transfer(msg.sender, earnedFEE), "Fee transfer to account failed");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        478
Source: 
>     if (howMuchLEV > 0) {
>       totalStakedLEV = totalStakedLEV.minus(howMuchLEV);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(LEV.transfer(msg.sender, howMuchLEV), "Redeeming LEV token to account failed.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        430
Source: 
>     Interval storage interval = intervals[latest];
>     stakes[msg.sender].intervalId = latest;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     stakes[msg.sender].worth = stakes[msg.sender].worth.plus(quantity.times(intervals[latest].end.minus(block.number)));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        431
Source: 
>     stakes[msg.sender].intervalId = latest;
>     stakes[msg.sender].worth = stakes[msg.sender].worth.plus(quantity.times(intervals[latest].end.minus(block.number)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     stakes[msg.sender].quantity = stakes[msg.sender].quantity.plus(quantity);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        432
Source: 
>     stakes[msg.sender].worth = stakes[msg.sender].worth.plus(quantity.times(intervals[latest].end.minus(block.number)));
>     stakes[msg.sender].quantity = stakes[msg.sender].quantity.plus(quantity);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     interval.worth = interval.worth.plus(quantity.times(interval.end.minus(block.number)));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        433
Source: 
>     stakes[msg.sender].quantity = stakes[msg.sender].quantity.plus(quantity);
>     interval.worth = interval.worth.plus(quantity.times(interval.end.minus(block.number)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(LEV.transferFrom(msg.sender, address(this), quantity), "LEV token transfer was not successful");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Stake
Line:        435
Source: 
>     require(LEV.transferFrom(msg.sender, address(this), quantity), "LEV token transfer was not successful");
>     totalStakedLEV = totalStakedLEV.plus(quantity);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Staked(msg.sender, quantity, interval.start, interval.end, latest);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        237
Source: 
>   function approve(address _spender, uint _value) public returns (bool success) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stake
Line:        456
Source: 
>     uint ethEarned = address(this).balance;
>     if (feeEarned > 0) FEE.transfer(wallet, feeEarned);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (ethEarned > 0) address(wallet).transfer(ethEarned);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stake
Line:        465
Source: 
>     if (token == address(LEV)) balance = balance.minus(totalStakedLEV);
>     if (balance > 0) Token(token).transfer(wallet, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Versioned
Line:        163
Source: 
> contract Versioned {
>   string public version;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        28
Source: 
>   /// total amount of tokens
>   uint public totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Versioned
Line:        163
Source: 
> contract Versioned {
>   string public version;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Fee
Line:        262
Source: 
> 
>   string public name;                   //fancy name: eg Simon Bucks
>   ^^^^^^^^^^^^^^^^^^
>   uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals.

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Fee
Line:        263
Source: 
>   string public name;                   //fancy name: eg Simon Bucks
>   uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals.
>   ^^^^^^^^^^^^^^^^^^^^^
>                                         //Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Fee
Line:        265
Source: 
>                                         //Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.
>   string public symbol;                 //An identifier: eg SBX
>   ^^^^^^^^^^^^^^^^^^^^
>   address public minter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Versioned
Line:        163
Source: 
> contract Versioned {
>   string public version;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Stake
Line:        313
Source: 
>   address payable public wallet;
>   address public operator;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   uint public intervalSize;

[0m
