Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenFarm
Line:        192
Source: 
>     address public owner;
>     string public name = "Dapp Token Farm";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20Mintable public dappToken;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ClashPay
Line:        355
Source: 
>     using SafeMath for uint256;
>     string  public name = "Clash Pay";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string  public symbol = "SCP";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ClashPay
Line:        356
Source: 
>     string  public name = "Clash Pay";
>     string  public symbol = "SCP";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply = 10000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ClashPay
Line:        358
Source: 
>     uint256 public totalSupply = 10000000000000000000;
>     uint8   public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClashPay
Line:        413
Source: 
>     }
>     function mint(address _to,uint256 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==Tokenfarm,"only Tokenfarm contract can mint tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClashPay
Line:        419
Source: 
>     }
>     function burn(uint256 _value) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[msg.sender] =balanceOf[msg.sender].sub( _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenFarm
Line:        237
Source: 
>         // Transfer Mock Dai tokens to this contract for staking
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenFarm
Line:        314
Source: 
>         }
>         IERC20Mintable(dappToken).mint(msg.sender, rewardbal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    TokenFarm
Line:        283
Source: 
>                 }
>                 IERC20(tokenPools[i]).transfer(msg.sender, balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;35mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Conflict
Contract:    TokenFarm
Line:        281
Source: 
>                     balance = balance.sub(fee);
>                     IERC20(tokenPools[i]).transfer(owner, fee);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenFarm
Line:        228
Source: 
>     // 1. Stakes Tokens(Deposit)
>     function stakeTokens(uint256 _amount,IERC20 token) external { // remove payable
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Require amount greater than 0

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenFarm
Line:        248
Source: 
> 
>     function unstakeToken(IERC20 token) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Fetch staking balance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenFarm
Line:        316
Source: 
>     }
>     function claimToken(address token) public { // For sure an issue
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakers[msg.sender].balance[token]>0,"you have no balance and cant claim");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenFarm
Line:        331
Source: 
> 
>     function transferOwnership(address _newOwner) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner=_newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ClashPay
Line:        386
Source: 
>     }
>     function setContract(address _contract) external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner,"must be owner");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ClashPay
Line:        391
Source: 
> 
>     function transfer(address _to, uint256 _value) external returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(0)!= _to,"to burn tokens use the burn function");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ClashPay
Line:        413
Source: 
>     }
>     function mint(address _to,uint256 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==Tokenfarm,"only Tokenfarm contract can mint tokens");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ClashPay
Line:        424
Source: 
>     }
>     function transferOwnership(address _newOwner) external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner,"only the owner an call this function");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenFarm
Line:        288
Source: 
> 
> 	function earned(address token) public view returns(uint256){ // this is fine
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 multiplier =100000000;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenFarm
Line:        323
Source: 
>     
>     function setMinimumLockup(uint256 _days) external onlyModerators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimumDaysLockup =_days;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenFarm
Line:        327
Source: 
>     
>     function setPenaltyFee(uint256 _fee) external onlyModerators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         penaltyFee =_fee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenFarm
Line:        335
Source: 
> 
>     function setCoinRate(address coin,uint256 Rate) public onlyModerators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         RatePerCoin[coin].rate =Rate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenFarm
Line:        343
Source: 
> 
> 	function setAdmin(address addy,bool value) external onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Admins[addy]= value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenFarm
Line:        346
Source: 
> 	}
>     function stakingBalance(address token) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stakers[msg.sender].balance[token];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClashPay
Line:        399
Source: 
> 
>     function approve(address _spender, uint256 _value) external returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClashPay
Line:        405
Source: 
> 
>     function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(0)!= _to,"to burn tokens use the burn function");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClashPay
Line:        419
Source: 
>     }
>     function burn(uint256 _value) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[msg.sender] =balanceOf[msg.sender].sub( _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenFarm
Line:        290
Source: 
>         uint256 multiplier =100000000;
> 		return (stakers[msg.sender].balance[token]* 
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (RatePerCoin[token].rate) * //coin earn rate in percentage so should be divided by 100

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenFarm
Line:        293
Source: 
>                 ( 
>                     (stakers[msg.sender].balance[token]*multiplier)/(totalStaked[token]) //calculate token share percentage
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 )/(365*24*60*60)// 31 536 000

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenFarm
Line:        290
Source: 
>         uint256 multiplier =100000000;
> 		return (stakers[msg.sender].balance[token]* 
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (RatePerCoin[token].rate) * //coin earn rate in percentage so should be divided by 100

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenFarm
Line:        237
Source: 
>         // Transfer Mock Dai tokens to this contract for staking
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenFarm
Line:        196
Source: 
>     
>     struct staker {
>     ^^^^^^^^^^^^^^^
>         uint256 id;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenFarm
Line:        204
Source: 
> 
>     struct rate {
>     ^^^^^^^^^^^^^
>         uint256 rate;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenFarm
Line:        213
Source: 
>     mapping(address => staker) stakers;
>     mapping(address => rate) public RatePerCoin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping (address=>bool) Admins;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenFarm
Line:        214
Source: 
>     mapping(address => rate) public RatePerCoin;
> 	mapping (address=>bool) Admins;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minimumDaysLockup=3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ClashPay
Line:        360
Source: 
>     address public owner;
>     address public Tokenfarm;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        351
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenFarm
Line:        212
Source: 
>     address[] private tokenPools; 
>     mapping(address => staker) stakers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => rate) public RatePerCoin;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenFarm
Line:        214
Source: 
>     mapping(address => rate) public RatePerCoin;
> 	mapping (address=>bool) Admins;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minimumDaysLockup=3;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenFarm
Line:        289
Source: 
> 	function earned(address token) public view returns(uint256){ // this is fine
>         uint256 multiplier =100000000;
>                             ^^^^^^^^^
> 		return (stakers[msg.sender].balance[token]* 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ClashPay
Line:        357
Source: 
>     string  public symbol = "SCP";
>     uint256 public totalSupply = 10000000000000000000;
>                                  ^^^^^^^^^^^^^^^^^^^^
>     uint8   public decimals = 18;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenFarm
Line:        237
Source: 
>         // Transfer Mock Dai tokens to this contract for staking
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenFarm
Line:        320
Source: 
>         stakers[msg.sender].timestamp[token]=block.timestamp;
>         IERC20Mintable(dappToken).mint(msg.sender, earnings);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenFarm
Line:        257
Source: 
>             uint256 fee = (balance.mul(100).div(penaltyFee)).div(100);
>             token.transfer(owner, fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance = balance.sub(fee); 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenFarm
Line:        266
Source: 
>         //transfer unstaked coins
>         token.transfer(msg.sender, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenFarm
Line:        314
Source: 
>         }
>         IERC20Mintable(dappToken).mint(msg.sender, rewardbal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenFarm
Line:        281
Source: 
>                     balance = balance.sub(fee);
>                     IERC20(tokenPools[i]).transfer(owner, fee);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenFarm
Line:        283
Source: 
>                 }
>                 IERC20(tokenPools[i]).transfer(msg.sender, balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ClashPay
Line:        360
Source: 
>     address public owner;
>     address public Tokenfarm;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenFarm
Line:        240
Source: 
>         // Update staking balance
>         stakers[msg.sender].balance[address(token)] = stakers[msg.sender].balance[address(token)].add( _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalStaked[address(token)] = totalStaked[address(token)].add( _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenFarm
Line:        241
Source: 
>         stakers[msg.sender].balance[address(token)] = stakers[msg.sender].balance[address(token)].add( _amount);
>         totalStaked[address(token)] = totalStaked[address(token)].add( _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakers[msg.sender].timestamp[address(token)] = block.timestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenFarm
Line:        242
Source: 
>         totalStaked[address(token)] = totalStaked[address(token)].add( _amount);
>         stakers[msg.sender].timestamp[address(token)] = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakers[msg.sender].timefeestartstamp[address(token)] = block.timestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenFarm
Line:        243
Source: 
>         stakers[msg.sender].timestamp[address(token)] = block.timestamp;
>         stakers[msg.sender].timefeestartstamp[address(token)] = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ClashPay
Line:        394
Source: 
>         balanceOf[msg.sender] =balanceOf[msg.sender].sub( _value);
>         balanceOf[_to] = balanceOf[_to].add( _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(msg.sender, _to, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ClashPay
Line:        400
Source: 
>     function approve(address _spender, uint256 _value) external returns (bool success) {
>         allowance[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ClashPay
Line:        407
Source: 
>         require(address(0)!= _to,"to burn tokens use the burn function");
>         balanceOf[_from] = balanceOf[_from].sub( _value); // msg.sender => _from
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[_to] = balanceOf[_to].add( _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ClashPay
Line:        408
Source: 
>         balanceOf[_from] = balanceOf[_from].sub( _value); // msg.sender => _from
>         balanceOf[_to] = balanceOf[_to].add( _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[_from][msg.sender] =allowance[_from][msg.sender].sub(_value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenFarm
Line:        237
Source: 
>         // Transfer Mock Dai tokens to this contract for staking
>         token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenFarm
Line:        257
Source: 
>             uint256 fee = (balance.mul(100).div(penaltyFee)).div(100);
>             token.transfer(owner, fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance = balance.sub(fee); 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenFarm
Line:        266
Source: 
>         //transfer unstaked coins
>         token.transfer(msg.sender, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenFarm
Line:        281
Source: 
>                     balance = balance.sub(fee);
>                     IERC20(tokenPools[i]).transfer(owner, fee);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenFarm
Line:        283
Source: 
>                 }
>                 IERC20(tokenPools[i]).transfer(msg.sender, balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenFarm
Line:        192
Source: 
>     address public owner;
>     string public name = "Dapp Token Farm";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20Mintable public dappToken;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ClashPay
Line:        355
Source: 
>     using SafeMath for uint256;
>     string  public name = "Clash Pay";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string  public symbol = "SCP";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ClashPay
Line:        356
Source: 
>     string  public name = "Clash Pay";
>     string  public symbol = "SCP";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply = 10000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ClashPay
Line:        358
Source: 
>     uint256 public totalSupply = 10000000000000000000;
>     uint8   public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
