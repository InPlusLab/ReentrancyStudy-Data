Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AirdropWithdraw
Line:        422
Source: 
> 
>     function showBalance() public view returns(uint256) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rewardToken.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AirdropWithdraw
Line:        426
Source: 
> 
>     function setClaimEqual(address[] calldata _claimers, uint256 balance) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint8 i = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AirdropWithdraw
Line:        435
Source: 
>     
>     function setClaim(address[] calldata _claimers, uint256[] calldata balances) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint8 i = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AirdropWithdraw
Line:        442
Source: 
>     }
>     function withdraw() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint amount = rewardBalance[msg.sender];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AirdropWithdraw
Line:        423
Source: 
>     function showBalance() public view returns(uint256) {
>         return rewardToken.balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AirdropWithdraw
Line:        446
Source: 
>             
>             uint256 tokenBalance = rewardToken.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(tokenBalance > 0, "No reward in contract");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AirdropWithdraw
Line:        452
Source: 
>                 requiredBalance = requiredBalance.sub(tokenBalance);
>                 rewardToken.transfer(msg.sender, tokenBalance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, tokenBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AirdropWithdraw
Line:        457
Source: 
>                 requiredBalance = requiredBalance.sub(amount);
>                 rewardToken.transfer(msg.sender, amount);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AirdropWithdraw
Line:        426
Source: 
> 
>     function setClaimEqual(address[] calldata _claimers, uint256 balance) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint8 i = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AirdropWithdraw
Line:        435
Source: 
>     
>     function setClaim(address[] calldata _claimers, uint256[] calldata balances) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint8 i = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AirdropWithdraw
Line:        446
Source: 
>             
>             uint256 tokenBalance = rewardToken.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(tokenBalance > 0, "No reward in contract");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AirdropWithdraw
Line:        452
Source: 
>                 requiredBalance = requiredBalance.sub(tokenBalance);
>                 rewardToken.transfer(msg.sender, tokenBalance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, tokenBalance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AirdropWithdraw
Line:        457
Source: 
>                 requiredBalance = requiredBalance.sub(amount);
>                 rewardToken.transfer(msg.sender, amount);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        88
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        116
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        187
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AirdropWithdraw
Line:        446
Source: 
>             
>             uint256 tokenBalance = rewardToken.balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(tokenBalance > 0, "No reward in contract");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AirdropWithdraw
Line:        423
Source: 
>     function showBalance() public view returns(uint256) {
>         return rewardToken.balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AirdropWithdraw
Line:        452
Source: 
>                 requiredBalance = requiredBalance.sub(tokenBalance);
>                 rewardToken.transfer(msg.sender, tokenBalance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, tokenBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AirdropWithdraw
Line:        457
Source: 
>                 requiredBalance = requiredBalance.sub(amount);
>                 rewardToken.transfer(msg.sender, amount);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AirdropWithdraw
Line:        410
Source: 
>     using SafeMath for uint256;
>     uint256 public requiredBalance; // The balance need to send to this contract
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public rewardBalance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AirdropWithdraw
Line:        452
Source: 
>                 requiredBalance = requiredBalance.sub(tokenBalance);
>                 rewardToken.transfer(msg.sender, tokenBalance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, tokenBalance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AirdropWithdraw
Line:        457
Source: 
>                 requiredBalance = requiredBalance.sub(amount);
>                 rewardToken.transfer(msg.sender, amount);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Withdraw(msg.sender, amount);

[0m
