pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PLS_Stake
Line:        233
Source: 
>     
>     uint256 private rewardPerPLS = 10000000000000000; // 0.01
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PLS_Stake
Line:        235
Source: 
>     
>     uint256 public  minStakingPeriod = 3 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PLS_Stake
Line:        283
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimReward() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PLS_Stake
Line:        307
Source: 
>     // ------------------------------------------------------------------------
>     function UnStake() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 stakedAmount = stakers[msg.sender].stakedAmount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PLS_Stake
Line:        264
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE_PLS(uint256 _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PLS_Stake
Line:        325
Source: 
>     // ------------------------------------------------------------------------
>     function pendingReward(address user) public view returns (uint256 _pendingReward) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalDays = (block.timestamp.sub(stakers[user].stakeDate)).div(1 days);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PLS_Stake
Line:        337
Source: 
>     // ------------------------------------------------------------------------
>     function claimableReward(address user, uint256 _pendingReward) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalDays = (block.timestamp.sub(stakers[user].stakeDate)).div(1 days);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        88
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        165
Source: 
>         require(m != 0, "SafeMath: to ceil number shall not be zero");
>         return (a + m - 1) / m * m;
>                ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PLS_Stake
Line:        273
Source: 
>         // transfer the tokens from caller to staking contract
>         IERC20(PLS).transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PLS_Stake
Line:        297
Source: 
>         // transfer the reward tokens
>         IRW(RW).sendRewards(msg.sender, claimableReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PLS_Stake
Line:        287
Source: 
>         
>         uint256 pendingReward = pendingReward(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 claimableReward = claimableReward(msg.sender, pendingReward);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    PLS_Stake
Line:        288
Source: 
>         uint256 pendingReward = pendingReward(msg.sender);
>         uint256 claimableReward = claimableReward(msg.sender, pendingReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PLS_Stake
Line:        227
Source: 
> 
> contract PLS_Stake is Owned {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PLS_Stake
Line:        230
Source: 
>     
>     address public PLS;
>     ^^^^^^^^^^^^^^^^^^
>     address public RW;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PLS_Stake
Line:        231
Source: 
>     address public PLS;
>     address public RW;
>     ^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PLS_Stake
Line:        264
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE_PLS(uint256 _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PLS_Stake
Line:        283
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimReward() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PLS_Stake
Line:        307
Source: 
>     // ------------------------------------------------------------------------
>     function UnStake() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 stakedAmount = stakers[msg.sender].stakedAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PLS_Stake
Line:        233
Source: 
>     
>     uint256 private rewardPerPLS = 10000000000000000; // 0.01
>                                    ^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PLS_Stake
Line:        273
Source: 
>         // transfer the tokens from caller to staking contract
>         IERC20(PLS).transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PLS_Stake
Line:        297
Source: 
>         // transfer the reward tokens
>         IRW(RW).sendRewards(msg.sender, claimableReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PLS_Stake
Line:        317
Source: 
>         // transfer staked tokens
>         IERC20(PLS).transfer(msg.sender, stakedAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PLS_Stake
Line:        237
Source: 
>     
>     uint256 public  totalClaimedRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public  totalStaked;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PLS_Stake
Line:        238
Source: 
>     uint256 public  totalClaimedRewards;
>     uint256 public  totalStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PLS_Stake
Line:        266
Source: 
> 
>         totalStaked = totalStaked.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PLS_Stake
Line:        291
Source: 
>         // add claimed reward to global stats
>         totalClaimedRewards = totalClaimedRewards.add(claimableReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PLS_Stake
Line:        294
Source: 
>         // add the reward to total claimed rewards
>         stakers[msg.sender].rewardsClaimed = stakers[msg.sender].rewardsClaimed.add(claimableReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PLS_Stake
Line:        269
Source: 
>         // record it in contract's storage
>         stakers[msg.sender].stakedAmount = stakers[msg.sender].stakedAmount.add(_amount); // add to the stake or fresh stake
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakers[msg.sender].stakeDate = block.timestamp; // update the stake date

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PLS_Stake
Line:        270
Source: 
>         stakers[msg.sender].stakedAmount = stakers[msg.sender].stakedAmount.add(_amount); // add to the stake or fresh stake
>         stakers[msg.sender].stakeDate = block.timestamp; // update the stake date
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PLS_Stake
Line:        273
Source: 
>         // transfer the tokens from caller to staking contract
>         IERC20(PLS).transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PLS_Stake
Line:        317
Source: 
>         // transfer staked tokens
>         IERC20(PLS).transfer(msg.sender, stakedAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    PLS_Stake
Line:        285
Source: 
>         
>         require(block.timestamp > stakers[msg.sender].stakeDate.add(minStakingPeriod), "claim date has not reached");
>                 ^^^^^^^^^^^^^^^
>         

[0m
