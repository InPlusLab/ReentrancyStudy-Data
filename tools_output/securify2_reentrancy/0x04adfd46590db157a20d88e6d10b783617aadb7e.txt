[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Owned
Line:        43
Source: 
>   address public owner;
>   address public newOwner;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PRESALE
Line:        80
Source: 
>  
>  function _setSalesPool(address _setPool, uint _OTC, address payable _salewallet) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PRESALE
Line:        106
Source: 
>   
> function buysales() public payable{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PRESALE
Line:        80
Source: 
>  
>  function _setSalesPool(address _setPool, uint _OTC, address payable _salewallet) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PRESALE
Line:        94
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / 0.00022 ether)*10**18;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PRESALE
Line:        113
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / 0.00022 ether)*10**18;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PRESALE
Line:        95
Source: 
>     _tkns = (_eth / 0.00022 ether)*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PRESALE
Line:        96
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PRESALE
Line:        100
Source: 
>     saleswallet.transfer(msg.value);
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tSales += _tkns;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PRESALE
Line:        114
Source: 
>     _tkns = (_eth / 0.00022 ether)*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PRESALE
Line:        115
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PRESALE
Line:        119
Source: 
>      saleswallet.transfer(msg.value);
>      token.transferFrom(tokensalepool, msg.sender, _tkns);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tSales += _tkns;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PRESALE
Line:        99
Source: 
> 
>     saleswallet.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PRESALE
Line:        118
Source: 
> 
>      saleswallet.transfer(msg.value);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PRESALE
Line:        65
Source: 
>    
>   uint256 public _tkns;
>   ^^^^^^^^^^^^^^^^^^^^
>   address tokensalepool;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PRESALE
Line:        80
Source: 
>  
>  function _setSalesPool(address _setPool, uint _OTC, address payable _salewallet) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PRESALE
Line:        93
Source: 
>     
>     uint _eth = msg.value;
>     ^^^^^^^^^
>     _tkns = (_eth / 0.00022 ether)*10**18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PRESALE
Line:        112
Source: 
>     
>     uint _eth = msg.value;
>     ^^^^^^^^^
>     _tkns = (_eth / 0.00022 ether)*10**18;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PRESALE
Line:        66
Source: 
>   uint256 public _tkns;
>   address tokensalepool;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint256 public tSales;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PRESALE
Line:        69
Source: 
>   uint public otc;
>   address payable saleswallet;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PRESALE
Line:        99
Source: 
> 
>     saleswallet.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PRESALE
Line:        118
Source: 
> 
>      saleswallet.transfer(msg.value);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PRESALE
Line:        99
Source: 
> 
>     saleswallet.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PRESALE
Line:        118
Source: 
> 
>      saleswallet.transfer(msg.value);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PRESALE
Line:        95
Source: 
>     _tkns = (_eth / 0.00022 ether)*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PRESALE
Line:        96
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PRESALE
Line:        114
Source: 
>     _tkns = (_eth / 0.00022 ether)*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PRESALE
Line:        115
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PRESALE
Line:        100
Source: 
>     saleswallet.transfer(msg.value);
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tSales += _tkns;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PRESALE
Line:        119
Source: 
>      saleswallet.transfer(msg.value);
>      token.transferFrom(tokensalepool, msg.sender, _tkns);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tSales += _tkns;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PRESALE
Line:        65
Source: 
>    
>   uint256 public _tkns;
>   ^^^^^^^^^^^^^^^^^^^^
>   address tokensalepool;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PRESALE
Line:        66
Source: 
>   uint256 public _tkns;
>   address tokensalepool;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint256 public tSales;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PRESALE
Line:        67
Source: 
>   address tokensalepool;
>   uint256 public tSales;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint public otc;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PRESALE
Line:        68
Source: 
>   uint256 public tSales;
>   uint public otc;
>   ^^^^^^^^^^^^^^^
>   address payable saleswallet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PRESALE
Line:        69
Source: 
>   uint public otc;
>   address payable saleswallet;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Owned
Line:        43
Source: 
>   address public owner;
>   address public newOwner;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    PRESALE
Line:        99
Source: 
> 
>     saleswallet.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    PRESALE
Line:        118
Source: 
> 
>      saleswallet.transfer(msg.value);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      token.transferFrom(tokensalepool, msg.sender, _tkns);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PRESALE
Line:        94
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / 0.00022 ether)*10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PRESALE
Line:        101
Source: 
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     tSales += _tkns;
>     ^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PRESALE
Line:        113
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / 0.00022 ether)*10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PRESALE
Line:        120
Source: 
>      token.transferFrom(tokensalepool, msg.sender, _tkns);
>     tSales += _tkns;
>     ^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PRESALE
Line:        100
Source: 
>     saleswallet.transfer(msg.value);
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tSales += _tkns;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PRESALE
Line:        119
Source: 
>      saleswallet.transfer(msg.value);
>      token.transferFrom(tokensalepool, msg.sender, _tkns);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tSales += _tkns;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Owned
Line:        42
Source: 
> contract Owned {
>   address public owner;
>   ^^^^^^^^^^^^^^^^^^^^
>   address public newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Owned
Line:        43
Source: 
>   address public owner;
>   address public newOwner;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
