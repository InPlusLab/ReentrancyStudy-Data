Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        63
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        68
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        121
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        134
Source: 
> 
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        139
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        121
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        134
Source: 
> 
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        139
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Professional_v8
Line:        516
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ourAllowance, "Make sure to add enough allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Professional_v8
Line:        505
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         return ERC20Interface.transferFrom(allower, receiver, amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Professional_v8
Line:        516
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ourAllowance, "Make sure to add enough allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Professional_v8
Line:        510
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         return ERC20Interface.transfer(to, amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        139
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Professional_v8
Line:        264
Source: 
>      */
>     function changeLockDuration(uint256 lockduration_) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lockDuration = lockduration_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Professional_v8
Line:        283
Source: 
>      */
>     function addReward(uint256 rewardAmount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Professional_v8
Line:        334
Source: 
>      */
>     function stake(uint256 amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Professional_v8
Line:        442
Source: 
>      */
>     function calculate(address from) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _calculate(from);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Professional_v8
Line:        253
Source: 
>      */
>     function setEligibilityAmount(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 eligibilityAmount_ //external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Professional_v8
Line:        273
Source: 
>      */
>     function eligibility(address user_) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return deposits[user_].eligible;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        67
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Professional_v8
Line:        516
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ourAllowance, "Make sure to add enough allowance");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Professional_v8
Line:        155
Source: 
> 
> contract Professional_v8 is Ownable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Professional_v8
Line:        193
Source: 
> 
>     IERC20 public ERC20Interface;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Professional_v8
Line:        463
Source: 
>         uint256 interest;
>         uint256 _lockduration = endTime.sub(depositTime);
>         ^^^^^^^^^^^^^^^^^^^^^
>         for (uint64 i = userIndex; i < index; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Professional_v8
Line:        513
Source: 
> 
>     modifier _hasAllowance(address allower, uint256 amount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Make sure the allower has provided the right allowance.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Professional_v8
Line:        513
Source: 
> 
>     modifier _hasAllowance(address allower, uint256 amount) {
>                            ^^^^^^^^^^^^^^^
>         // Make sure the allower has provided the right allowance.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Professional_v8
Line:        513
Source: 
> 
>     modifier _hasAllowance(address allower, uint256 amount) {
>                                             ^^^^^^^^^^^^^^
>         // Make sure the allower has provided the right allowance.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Professional_v8
Line:        516
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));
>         ^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ourAllowance, "Make sure to add enough allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Professional_v8
Line:        516
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ourAllowance, "Make sure to add enough allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Professional_v8
Line:        505
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         return ERC20Interface.transferFrom(allower, receiver, amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Professional_v8
Line:        516
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= ourAllowance, "Make sure to add enough allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Professional_v8
Line:        510
Source: 
>         ERC20Interface = IERC20(tokenAddress);
>         return ERC20Interface.transfer(to, amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Professional_v8
Line:        183
Source: 
>     address public tokenAddress;
>     uint256 public stakedBalance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardBalance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Professional_v8
Line:        184
Source: 
>     uint256 public stakedBalance;
>     uint256 public rewardBalance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public stakedTotal;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Professional_v8
Line:        185
Source: 
>     uint256 public rewardBalance;
>     uint256 public stakedTotal;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalReward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Professional_v8
Line:        186
Source: 
>     uint256 public stakedTotal;
>     uint256 public totalReward;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint64 public index;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Professional_v8
Line:        187
Source: 
>     uint256 public totalReward;
>     uint64 public index;
>     ^^^^^^^^^^^^^^^^^^^
>     uint64 public rate;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Professional_v8
Line:        190
Source: 
>     uint256 public lockDuration;
>     uint256 public eligibilityAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Professional_v8
Line:        193
Source: 
> 
>     IERC20 public ERC20Interface;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Professional_v8
Line:        295
Source: 
> 
>         totalReward = totalReward.add(rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardBalance = rewardBalance.add(rewardAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Professional_v8
Line:        296
Source: 
>         totalReward = totalReward.add(rewardAmount);
>         rewardBalance = rewardBalance.add(rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Professional_v8
Line:        509
Source: 
>     function _payDirect(address to, uint256 amount) private returns (bool) {
>         ERC20Interface = IERC20(tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20Interface.transfer(to, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Professional_v8
Line:        515
Source: 
>         // Make sure the allower has provided the right allowance.
>         ERC20Interface = IERC20(tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Professional_v8
Line:        504
Source: 
>     ) private _hasAllowance(allower, amount) returns (bool) {
>         ERC20Interface = IERC20(tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20Interface.transferFrom(allower, receiver, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Professional_v8
Line:        515
Source: 
>         // Make sure the allower has provided the right allowance.
>         ERC20Interface = IERC20(tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Professional_v8
Line:        191
Source: 
>     uint256 public eligibilityAmount;
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Professional_v8
Line:        359
Source: 
>             block.timestamp,
>             block.timestamp.add((lockDuration.mul(86400))), //lockDuration * 24 * 3600
>             ^^^^^^^^^^^^^^^
>             index,

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Professional_v8
Line:        379
Source: 
>         require(
>             block.timestamp >= deposits[from].endTime,
>             ^^^^^^^^^^^^^^^
>             "Requesting before lock time"

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Professional_v8
Line:        411
Source: 
>         require(
>             block.timestamp >= deposits[from].endTime,
>             ^^^^^^^^^^^^^^^
>             "Requesting before lock time"

[0m
