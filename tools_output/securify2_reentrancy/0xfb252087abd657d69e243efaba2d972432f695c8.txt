Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Etherclear
Line:        886
Source: 
>         uint x;
>         assembly {
>         ^^^^^^^^^^
>             x := mload(add(bs, add(0x20, start)))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        364
Source: 
>     // Used to test the sign and recover functionality.
>     function getSignerForPaymentCompleteRequest(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        420
Source: 
>     */
>     function setENS(address reverseRegistrarAddr, string memory name)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        460
Source: 
> 
>     function disableRetrieveFunds(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         retrieveFundsEnabled = !disabled;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        464
Source: 
> 
>     function disableCreatePayment(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         createPaymentEnabled = !disabled;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        744
Source: 
>     // Will only work if the correct signature is passed in.
>     function completePaymentAsProxy(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        801
Source: 
>     // Meant to be called by the recipient.
>     function retrieveFundsAsRecipient(uint txnId, string memory code) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Payment memory txn = openPayments[txnId];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        453
Source: 
>     // (once a suitable starting fee is reached).
>     function changeBaseFee(uint newFee) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         baseFee = newFee;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        456
Source: 
>     }
>     function changePaymentFee(uint newFee) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paymentFee = newFee;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        460
Source: 
> 
>     function disableRetrieveFunds(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         retrieveFundsEnabled = !disabled;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        464
Source: 
> 
>     function disableCreatePayment(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         createPaymentEnabled = !disabled;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        626
Source: 
> 
>     function getPaymentId(address recipient, bytes memory codeHash)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        801
Source: 
>     // Meant to be called by the recipient.
>     function retrieveFundsAsRecipient(uint txnId, string memory code) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Payment memory txn = openPayments[txnId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        364
Source: 
>     // Used to test the sign and recover functionality.
>     function getSignerForPaymentCompleteRequest(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        420
Source: 
>     */
>     function setENS(address reverseRegistrarAddr, string memory name)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        443
Source: 
> 
>     function viewBalance(address token, address user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        468
Source: 
> 
>     function getPaymentInfo(uint paymentID)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        600
Source: 
>     // TODO check order of execution.
>     function createPayment(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        622
Source: 
>     // TODO: ensure this value will be correct.
>     function getBalance(address token) external view returns (uint amt) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokens[token][msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        643
Source: 
>     // the original amount + payment fee.
>     function createTokenPayment(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        744
Source: 
>     // Will only work if the correct signature is passed in.
>     function completePaymentAsProxy(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        880
Source: 
>     // This is apparently not reversible.
>     function sliceUint(bytes memory bs) public pure returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint start = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherclear
Line:        434
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherclear
Line:        529
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Etherclear
Line:        853
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherclear
Line:        325
Source: 
> 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherclear
Line:        326
Source: 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant COMPLETE_PAYMENT_REQUEST_TYPE = "CompletePaymentRequest(uint256 txnId,address sender,address recipient,string passphrase,uint256 requestType)";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherclear
Line:        335
Source: 
>     );
>     bytes32 private DOMAIN_SEPARATOR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The chainId is public because it differs between

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.9;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        288
Source: 
> 
>     ReverseRegistrar reverseRegistrar;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        306
Source: 
>     // Payments are looked up with a uint UUID generated within the contract.
>     mapping(uint => Payment) openPayments;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        325
Source: 
> 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        326
Source: 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant COMPLETE_PAYMENT_REQUEST_TYPE = "CompletePaymentRequest(uint256 txnId,address sender,address recipient,string passphrase,uint256 requestType)";

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherclear
Line:        853
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        434
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        529
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherclear
Line:        853
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        434
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        529
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherclear
Line:        434
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherclear
Line:        529
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherclear
Line:        853
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Etherclear
Line:        437
Source: 
>             require(
>                 IERC20(token).transfer(owner, total),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Could not successfully withdraw token"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Etherclear
Line:        594
Source: 
>         require(token != address(0));
>         require(IERC20(token).transfer(userTo, amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens[token][userFrom] = SafeMath.sub(tokens[token][userFrom], amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Etherclear
Line:        570
Source: 
>         require(
>             IERC20(token).transferFrom(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 user,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Etherclear
Line:        425
Source: 
>         reverseRegistrar = ReverseRegistrar(reverseRegistrarAddr);
>         reverseRegistrar.setName(name);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Etherclear
Line:        288
Source: 
> 
>     ReverseRegistrar reverseRegistrar;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherclear
Line:        853
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Etherclear
Line:        529
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        577
Source: 
>         //depositingTokenFlag = false;
>         tokens[token][user] = SafeMath.add(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[token][msg.sender],

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        699
Source: 
> 
>         openPayments[txnId] = txn;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        847
Source: 
> 
>         delete openPayments[txnId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        854
Source: 
>             txn.recipient.transfer(txn.sendAmount);
>             tokens[address(0)][txn.sender] = SafeMath.sub(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 tokens[address(0)][txn.sender],

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Etherclear
Line:        521
Source: 
> 
>         delete openPayments[txnId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Etherclear
Line:        525
Source: 
>         if (txn.token == address(0)) {
>             tokens[address(0)][txn.sender] = SafeMath.sub(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 tokens[address(0)][txn.sender],

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Etherclear
Line:        595
Source: 
>         require(IERC20(token).transfer(userTo, amount));
>         tokens[token][userFrom] = SafeMath.sub(tokens[token][userFrom], amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Etherclear
Line:        425
Source: 
>         reverseRegistrar = ReverseRegistrar(reverseRegistrarAddr);
>         reverseRegistrar.setName(name);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
