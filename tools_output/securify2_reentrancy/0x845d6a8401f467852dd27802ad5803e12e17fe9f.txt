Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        311
Source: 
>     // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        316
Source: 
>     uint256 c = a * b;
>     require(c / a == b, "SafeMath: multiplication overflow");
>             ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        35
Source: 
> 
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        38
Source: 
>   }
>   function acceptOwnership() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        35
Source: 
> 
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        38
Source: 
>   }
>   function acceptOwnership() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        92
Source: 
> 
>   function buyTokens(address inputrefer) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= buyMinimum, "Does not meet buy minimum");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        131
Source: 
> 
>   function sellTokens(uint256 amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 eth = getTokenSellResult(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        140
Source: 
> 
>   function openCD(uint256 amount, uint256 durration) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(amount >= cdGLXMin, "Token amount less than minimum");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        156
Source: 
> 
>   function closeCD(uint256 index) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(accountCD[msg.sender][index].tokenAmount != 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        175
Source: 
>   //returns the spot price in terms of eth / token
>   function spotprice() public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(glaretoken.totalSupply() == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        199
Source: 
> 
>   function getAccountCDLength(address account) public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return(accountCD[account].length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        212
Source: 
>   //ADMIN FUNCTIONS
>   function setBuyMinimum(uint256 eth) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     buyMinimum = eth;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        215
Source: 
>   }
>   function setSellMinimum(uint256 eth) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     sellMinimum = eth;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        218
Source: 
>   }
>   function setMasternode(address account, bool status) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     masternode[account] = status;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        221
Source: 
>   }
>   function setGlareToken(IERC20 _glaretoken) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     glaretoken = _glaretoken;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        224
Source: 
>   }
>   function setCdGLXMin(uint256 amount) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     cdGLXMin = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    glare
Line:        227
Source: 
>   }
>   function setCdDurrationMax(uint256 durration) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     cdDurrationMax = durration;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        35
Source: 
> 
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    glare
Line:        156
Source: 
> 
>   function closeCD(uint256 index) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(accountCD[msg.sender][index].tokenAmount != 0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    glare
Line:        212
Source: 
>   //ADMIN FUNCTIONS
>   function setBuyMinimum(uint256 eth) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     buyMinimum = eth;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    glare
Line:        224
Source: 
>   }
>   function setCdGLXMin(uint256 amount) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     cdGLXMin = amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    glare
Line:        227
Source: 
>   }
>   function setCdDurrationMax(uint256 durration) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     cdDurrationMax = durration;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    glare
Line:        190
Source: 
>   }
>   function getTokenSellResult(uint256 amount) public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _ethold = address(this).balance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    glare
Line:        199
Source: 
> 
>   function getAccountCDLength(address account) public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return(accountCD[account].length);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    glare
Line:        215
Source: 
>   }
>   function setSellMinimum(uint256 eth) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     sellMinimum = eth;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    glare
Line:        218
Source: 
>   }
>   function setMasternode(address account, bool status) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     masternode[account] = status;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    glare
Line:        221
Source: 
>   }
>   function setGlareToken(IERC20 _glaretoken) public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     glaretoken = _glaretoken;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        315
Source: 
> 
>     uint256 c = a * b;
>                 ^^^^^
>     require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    glare
Line:        144
Source: 
>     require(durration <= cdDurrationMax, "CD durration longer than maximum");
>     require(glaretoken.balanceOf(msg.sender) >= amount, "Lock amount exceeds balance");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(glaretoken.transferFrom(msg.sender, address(this), amount));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    glare
Line:        145
Source: 
>     require(glaretoken.balanceOf(msg.sender) >= amount, "Lock amount exceeds balance");
>     require(glaretoken.transferFrom(msg.sender, address(this), amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tokenTime = amount.mul(durration).div(10**13).add(tokenTime);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        46
Source: 
> 
> contract glare is Owned {
> ^^^^^^^^^^^^^^^^^^^^^^^^^
>   using SafeMath for uint;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        63
Source: 
> 
>   struct accountCDStruct {
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 tokenAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        184
Source: 
>   function getTokenBuyResult() public view returns(uint256) {
>     uint256 _sold = glaretoken.totalSupply();
>     ^^^^^^^^^^^^^
>     uint256 _ethnew = address(this).balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        185
Source: 
>     uint256 _sold = glaretoken.totalSupply();
>     uint256 _ethnew = address(this).balance;
>     ^^^^^^^^^^^^^^^
>     uint256 _snew = sqrt(_ethnew.mul(2 * 10**18).div(scalefactor)).mul(10**9);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        186
Source: 
>     uint256 _ethnew = address(this).balance;
>     uint256 _snew = sqrt(_ethnew.mul(2 * 10**18).div(scalefactor)).mul(10**9);
>     ^^^^^^^^^^^^^
>     uint256 _sout = _snew - _sold;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        187
Source: 
>     uint256 _snew = sqrt(_ethnew.mul(2 * 10**18).div(scalefactor)).mul(10**9);
>     uint256 _sout = _snew - _sold;
>     ^^^^^^^^^^^^^
>     return(_sout);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        191
Source: 
>   function getTokenSellResult(uint256 amount) public view returns(uint256) {
>     uint256 _ethold = address(this).balance;
>     ^^^^^^^^^^^^^^^
>     uint256 _sold = glaretoken.totalSupply();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        192
Source: 
>     uint256 _ethold = address(this).balance;
>     uint256 _sold = glaretoken.totalSupply();
>     ^^^^^^^^^^^^^
>     uint256 _snew = _sold.sub(amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        193
Source: 
>     uint256 _sold = glaretoken.totalSupply();
>     uint256 _snew = _sold.sub(amount);
>     ^^^^^^^^^^^^^
>     uint256 _ethnew = scalefactor.mul(_snew**2).div(2*10**36);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        194
Source: 
>     uint256 _snew = _sold.sub(amount);
>     uint256 _ethnew = scalefactor.mul(_snew**2).div(2*10**36);
>     ^^^^^^^^^^^^^^^
>     uint256 _ethout = _ethold - _ethnew;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    glare
Line:        195
Source: 
>     uint256 _ethnew = scalefactor.mul(_snew**2).div(2*10**36);
>     uint256 _ethout = _ethold - _ethnew;
>     ^^^^^^^^^^^^^^^
>     return(_ethout);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >= 0.6.4;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    glare
Line:        137
Source: 
>     burnGlareToken(account, amount);
>     account.transfer(eth);
>     ^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    glare
Line:        137
Source: 
>     burnGlareToken(account, amount);
>     account.transfer(eth);
>     ^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    glare
Line:        135
Source: 
>     require(eth >= sellMinimum, "Does not meet sell minimum");
>     require(glaretoken.balanceOf(msg.sender) >= amount, "Sell amount exceeds balance");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     burnGlareToken(account, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    glare
Line:        144
Source: 
>     require(durration <= cdDurrationMax, "CD durration longer than maximum");
>     require(glaretoken.balanceOf(msg.sender) >= amount, "Lock amount exceeds balance");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(glaretoken.transferFrom(msg.sender, address(this), amount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    glare
Line:        145
Source: 
>     require(glaretoken.balanceOf(msg.sender) >= amount, "Lock amount exceeds balance");
>     require(glaretoken.transferFrom(msg.sender, address(this), amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tokenTime = amount.mul(durration).div(10**13).add(tokenTime);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    glare
Line:        161
Source: 
>     uint256 contractTokenTime = accountCD[msg.sender][index].contractDurration.mul(accountCD[msg.sender][index].tokenAmount).div(10**13);
>     uint256 tokensdue = contractTokenTime.mul(glaretoken.balanceOf(address(this))).div(tokenTime);
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    glare
Line:        176
Source: 
>   function spotprice() public view returns(uint256) {
>     if(glaretoken.totalSupply() == 0) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>       return(0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    glare
Line:        205
Source: 
>   function mintGlareToken(address account, uint256 amount) internal {
>     glaretoken.mint(account, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    glare
Line:        184
Source: 
>   function getTokenBuyResult() public view returns(uint256) {
>     uint256 _sold = glaretoken.totalSupply();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _ethnew = address(this).balance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    glare
Line:        208
Source: 
>   function burnGlareToken(address account, uint256 amount) internal {
>     glaretoken.burn(account, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    glare
Line:        192
Source: 
>     uint256 _ethold = address(this).balance;
>     uint256 _sold = glaretoken.totalSupply();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _snew = _sold.sub(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    glare
Line:        170
Source: 
>     accountCD[msg.sender][index].closed = true;
>     glaretoken.transfer(msg.sender, tokensdue);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    glare
Line:        180
Source: 
>     else {
>       return(address(this).balance.mul(2 * 10**18).div(glaretoken.totalSupply()));
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    glare
Line:        149
Source: 
>     accountCDStruct memory newcd;
>     newcd.tokenAmount = amount;
>     ^^^^^
>     newcd.contractDurration = durration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        22
Source: 
>   address public owner;
>   address public newOwner;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    glare
Line:        70
Source: 
> 
>   IERC20 public glaretoken; //GLX token interface
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    glare
Line:        84
Source: 
>   //CD VARIABLES
>   uint256 public tokenTime; //Total number of GLX days
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public cdGLXMin;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    glare
Line:        137
Source: 
>     burnGlareToken(account, amount);
>     account.transfer(eth);
>     ^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    glare
Line:        146
Source: 
>     require(glaretoken.transferFrom(msg.sender, address(this), amount));
>     tokenTime = amount.mul(durration).div(10**13).add(tokenTime);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    glare
Line:        153
Source: 
> 
>     accountCD[msg.sender].push(newcd);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    glare
Line:        170
Source: 
>     accountCD[msg.sender][index].closed = true;
>     glaretoken.transfer(msg.sender, tokensdue);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
