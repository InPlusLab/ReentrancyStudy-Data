Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        25
Source: 
>     
>     uint64 trade_increment = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        111
Source: 
>     
>     function balanceOf(address tokenOwner) public view returns (uint balance){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(latched_contract).balanceOf(tokenOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        115
Source: 
>     
>     function totalSupply() public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(latched_contract).totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        123
Source: 
>     
> 	function getFee() public view returns (uint){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return fee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        137
Source: 
> 	
> 	function getSellReturn(uint amount) public view returns (uint){	// ether for selling amount tokens
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    // computing fees for selling is difficult and expensive, so I'm not doing it.  Not worth it.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        142
Source: 
> 	
> 	function getBuyCost(uint amount) public view returns (uint){		// ether cost for buying amount tokens
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return ((amount*getBuyPrice())/10000) + fee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        146
Source: 
> 	
> 	function buy(uint tokens)public payable{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		placeBuyOrder(tokens, getBuyPrice());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        199
Source: 
> 	
> 	function sell(uint tokens)public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    placeSellOrder(tokens, getSellPrice());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        252
Source: 
>     
>     function canBuy(uint amount) public pure returns (bool possible){			// returns true if this amount of token can be bought - does not account for Ethereum account balance
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        256
Source: 
>     
>     function canSell(uint amount) public pure returns (bool possible){			// returns true if this amount of token can be sold - does not account for token account balance
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        260
Source: 
> 	
> 	function get_tradable() public view returns (uint){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(latched_contract).totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        264
Source: 
> 	
> 	function setFee(uint new_fee) public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20TokenLatch
Line:        269
Source: 
> 	
> 	function destroy() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        112
Source: 
>     function balanceOf(address tokenOwner) public view returns (uint balance){
>         return ERC20(latched_contract).balanceOf(tokenOwner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        116
Source: 
>     function totalSupply() public view returns (uint){
>         return ERC20(latched_contract).totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        155
Source: 
> 		// handle fee and any extra funds
> 		msg.sender.transfer(msg.value-cost);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(fee);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        156
Source: 
> 		msg.sender.transfer(msg.value-cost);
> 		owner.transfer(fee);
>   ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        170
Source: 
> 		            sell_order_qty[i]-=left;
> 		            sell_order_owners[i].transfer((sell_order_price[i]*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            transfer(msg.sender, left);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        174
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((price10000-sell_order_price[i])*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        204
Source: 
> 	function placeSellOrder(uint tokens, uint64 price10000) public payable{
> 	    require(ERC20(latched_contract).allowance(msg.sender, address(this))>=tokens);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        207
Source: 
> 		// handle fee and any extra funds
> 		ERC20(latched_contract).transferFrom(msg.sender,address(this),tokens);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        224
Source: 
> 		            transfer(buy_order_owners[i],left);
> 		            msg.sender.transfer((sell_price*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        227
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((buy_order_price[i]-sell_price)*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        261
Source: 
> 	function get_tradable() public view returns (uint){
>         return ERC20(latched_contract).totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        272
Source: 
> 	    require(address(this).balance<0.1 ether);
> 	    require(ERC20(latched_contract).balanceOf(address(this))==0);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    selfdestruct(msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        120
Source: 
>     function transfer(address target, uint qty) private{
>         ERC20(latched_contract).transfer(target, qty);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        182
Source: 
>     		        left-=qty;
>     	            sell_order_owners[i].transfer((sell_order_price[i]*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            transfer(msg.sender, qty);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        186
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((price10000-sell_order_price[i])*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        237
Source: 
> 		            transfer(buy_order_owners[i],qty);
>     	            msg.sender.transfer((sell_price*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        240
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((buy_order_price[i]-sell_price)*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        111
Source: 
>     
>     function balanceOf(address tokenOwner) public view returns (uint balance){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(latched_contract).balanceOf(tokenOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        146
Source: 
> 	
> 	function buy(uint tokens)public payable{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		placeBuyOrder(tokens, getBuyPrice());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        199
Source: 
> 	
> 	function sell(uint tokens)public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    placeSellOrder(tokens, getSellPrice());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        264
Source: 
> 	
> 	function setFee(uint new_fee) public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        137
Source: 
> 	
> 	function getSellReturn(uint amount) public view returns (uint){	// ether for selling amount tokens
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    // computing fees for selling is difficult and expensive, so I'm not doing it.  Not worth it.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        142
Source: 
> 	
> 	function getBuyCost(uint amount) public view returns (uint){		// ether cost for buying amount tokens
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return ((amount*getBuyPrice())/10000) + fee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        252
Source: 
>     
>     function canBuy(uint amount) public pure returns (bool possible){			// returns true if this amount of token can be bought - does not account for Ethereum account balance
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        256
Source: 
>     
>     function canSell(uint amount) public pure returns (bool possible){			// returns true if this amount of token can be sold - does not account for token account balance
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        139
Source: 
> 	    // computing fees for selling is difficult and expensive, so I'm not doing it.  Not worth it.
> 		return (getSellPrice()*amount)/10000;
>           ^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        143
Source: 
> 	function getBuyCost(uint amount) public view returns (uint){		// ether cost for buying amount tokens
> 	    return ((amount*getBuyPrice())/10000) + fee;
>               ^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        151
Source: 
> 	function placeBuyOrder(uint tokens, uint64 price10000) public payable{
> 	    uint cost = fee + ((tokens*price10000)/10000);
>                          ^^^^^^^^^^^^^^^^^
> 	    require(msg.value>=cost);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        174
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((price10000-sell_order_price[i])*left)/10000);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        186
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((price10000-sell_order_price[i])*qty)/10000);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        224
Source: 
> 		            transfer(buy_order_owners[i],left);
> 		            msg.sender.transfer((sell_price*left)/10000);
>                                    ^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        227
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((buy_order_price[i]-sell_price)*left)/10000);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        237
Source: 
> 		            transfer(buy_order_owners[i],qty);
>     	            msg.sender.transfer((sell_price*qty)/10000);
>                                       ^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20TokenLatch
Line:        240
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((buy_order_price[i]-sell_price)*qty)/10000);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC20TokenLatch
Line:        204
Source: 
> 	function placeSellOrder(uint tokens, uint64 price10000) public payable{
> 	    require(ERC20(latched_contract).allowance(msg.sender, address(this))>=tokens);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC20TokenLatch
Line:        207
Source: 
> 		// handle fee and any extra funds
> 		ERC20(latched_contract).transferFrom(msg.sender,address(this),tokens);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        155
Source: 
> 		// handle fee and any extra funds
> 		msg.sender.transfer(msg.value-cost);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(fee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        156
Source: 
> 		msg.sender.transfer(msg.value-cost);
> 		owner.transfer(fee);
>   ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        170
Source: 
> 		            sell_order_qty[i]-=left;
> 		            sell_order_owners[i].transfer((sell_order_price[i]*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            transfer(msg.sender, left);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        174
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((price10000-sell_order_price[i])*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        182
Source: 
>     		        left-=qty;
>     	            sell_order_owners[i].transfer((sell_order_price[i]*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            transfer(msg.sender, qty);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        186
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((price10000-sell_order_price[i])*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        224
Source: 
> 		            transfer(buy_order_owners[i],left);
> 		            msg.sender.transfer((sell_price*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        227
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((buy_order_price[i]-sell_price)*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        237
Source: 
> 		            transfer(buy_order_owners[i],qty);
>     	            msg.sender.transfer((sell_price*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        240
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((buy_order_price[i]-sell_price)*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        25
Source: 
>     
>     uint64 trade_increment = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        31
Source: 
>     
>     address payable public latched_contract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        33
Source: 
>     
>     mapping(uint32 => address payable) public buy_order_owners;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint32 => uint256)   public  buy_order_qty;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        34
Source: 
>     mapping(uint32 => address payable) public buy_order_owners;
>     mapping(uint32 => uint256)   public  buy_order_qty;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint32 => uint64)   public  buy_order_price;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        35
Source: 
>     mapping(uint32 => uint256)   public  buy_order_qty;
>     mapping(uint32 => uint64)   public  buy_order_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 public num_buy_orders = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        36
Source: 
>     mapping(uint32 => uint64)   public  buy_order_price;
>     uint32 public num_buy_orders = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 public max_buy_price_idx;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        37
Source: 
>     uint32 public num_buy_orders = 0;
>     uint32 public max_buy_price_idx;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        39
Source: 
>     
>     mapping(uint32 => address payable) public sell_order_owners;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint32 => uint256)   public  sell_order_qty;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        40
Source: 
>     mapping(uint32 => address payable) public sell_order_owners;
>     mapping(uint32 => uint256)   public  sell_order_qty;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint32 => uint64)   public  sell_order_price;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        41
Source: 
>     mapping(uint32 => uint256)   public  sell_order_qty;
>     mapping(uint32 => uint64)   public  sell_order_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 public num_sell_orders = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        42
Source: 
>     mapping(uint32 => uint64)   public  sell_order_price;
>     uint32 public num_sell_orders = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 public min_sell_price_idx;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        43
Source: 
>     uint32 public num_sell_orders = 0;
>     uint32 public min_sell_price_idx;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        210
Source: 
> 		// get info needed for trading
> 	    uint64 sell_price = price10000;
>      ^^^^^^^^^^^^^^^^^
> 	    uint left = tokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        260
Source: 
> 	
> 	function get_tradable() public view returns (uint){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(latched_contract).totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20TokenLatch
Line:        25
Source: 
>     
>     uint64 trade_increment = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        155
Source: 
> 		// handle fee and any extra funds
> 		msg.sender.transfer(msg.value-cost);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        156
Source: 
> 		msg.sender.transfer(msg.value-cost);
> 		owner.transfer(fee);
>   ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        170
Source: 
> 		            sell_order_qty[i]-=left;
> 		            sell_order_owners[i].transfer((sell_order_price[i]*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            transfer(msg.sender, left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        174
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((price10000-sell_order_price[i])*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        182
Source: 
>     		        left-=qty;
>     	            sell_order_owners[i].transfer((sell_order_price[i]*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            transfer(msg.sender, qty);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        186
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((price10000-sell_order_price[i])*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        224
Source: 
> 		            transfer(buy_order_owners[i],left);
> 		            msg.sender.transfer((sell_price*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        227
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((buy_order_price[i]-sell_price)*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        237
Source: 
> 		            transfer(buy_order_owners[i],qty);
>     	            msg.sender.transfer((sell_price*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        240
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((buy_order_price[i]-sell_price)*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        155
Source: 
> 		// handle fee and any extra funds
> 		msg.sender.transfer(msg.value-cost);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        156
Source: 
> 		msg.sender.transfer(msg.value-cost);
> 		owner.transfer(fee);
>   ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        170
Source: 
> 		            sell_order_qty[i]-=left;
> 		            sell_order_owners[i].transfer((sell_order_price[i]*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            transfer(msg.sender, left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        174
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((price10000-sell_order_price[i])*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        182
Source: 
>     		        left-=qty;
>     	            sell_order_owners[i].transfer((sell_order_price[i]*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            transfer(msg.sender, qty);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        186
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((price10000-sell_order_price[i])*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        224
Source: 
> 		            transfer(buy_order_owners[i],left);
> 		            msg.sender.transfer((sell_price*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        227
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((buy_order_price[i]-sell_price)*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        237
Source: 
> 		            transfer(buy_order_owners[i],qty);
>     	            msg.sender.transfer((sell_price*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        240
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((buy_order_price[i]-sell_price)*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        155
Source: 
> 		// handle fee and any extra funds
> 		msg.sender.transfer(msg.value-cost);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        156
Source: 
> 		msg.sender.transfer(msg.value-cost);
> 		owner.transfer(fee);
>   ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        170
Source: 
> 		            sell_order_qty[i]-=left;
> 		            sell_order_owners[i].transfer((sell_order_price[i]*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            transfer(msg.sender, left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        174
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((price10000-sell_order_price[i])*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        182
Source: 
>     		        left-=qty;
>     	            sell_order_owners[i].transfer((sell_order_price[i]*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            transfer(msg.sender, qty);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        186
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((price10000-sell_order_price[i])*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        224
Source: 
> 		            transfer(buy_order_owners[i],left);
> 		            msg.sender.transfer((sell_price*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        227
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((buy_order_price[i]-sell_price)*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        237
Source: 
> 		            transfer(buy_order_owners[i],qty);
>     	            msg.sender.transfer((sell_price*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        240
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((buy_order_price[i]-sell_price)*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        204
Source: 
> 	function placeSellOrder(uint tokens, uint64 price10000) public payable{
> 	    require(ERC20(latched_contract).allowance(msg.sender, address(this))>=tokens);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        272
Source: 
> 	    require(address(this).balance<0.1 ether);
> 	    require(ERC20(latched_contract).balanceOf(address(this))==0);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    selfdestruct(msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        112
Source: 
>     function balanceOf(address tokenOwner) public view returns (uint balance){
>         return ERC20(latched_contract).balanceOf(tokenOwner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        116
Source: 
>     function totalSupply() public view returns (uint){
>         return ERC20(latched_contract).totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        120
Source: 
>     function transfer(address target, uint qty) private{
>         ERC20(latched_contract).transfer(target, qty);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        207
Source: 
> 		// handle fee and any extra funds
> 		ERC20(latched_contract).transferFrom(msg.sender,address(this),tokens);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        261
Source: 
> 	function get_tradable() public view returns (uint){
>         return ERC20(latched_contract).totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        37
Source: 
>     uint32 public num_buy_orders = 0;
>     uint32 public max_buy_price_idx;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20TokenLatch
Line:        43
Source: 
>     uint32 public num_sell_orders = 0;
>     uint32 public min_sell_price_idx;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        155
Source: 
> 		// handle fee and any extra funds
> 		msg.sender.transfer(msg.value-cost);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(fee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        156
Source: 
> 		msg.sender.transfer(msg.value-cost);
> 		owner.transfer(fee);
>   ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        170
Source: 
> 		            sell_order_qty[i]-=left;
> 		            sell_order_owners[i].transfer((sell_order_price[i]*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            transfer(msg.sender, left);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        174
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((price10000-sell_order_price[i])*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        182
Source: 
>     		        left-=qty;
>     	            sell_order_owners[i].transfer((sell_order_price[i]*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            transfer(msg.sender, qty);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        186
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((price10000-sell_order_price[i])*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        224
Source: 
> 		            transfer(buy_order_owners[i],left);
> 		            msg.sender.transfer((sell_price*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        227
Source: 
> 		            // send the owner any extra funds
> 		            owner.transfer(((buy_order_price[i]-sell_price)*left)/10000);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        237
Source: 
> 		            transfer(buy_order_owners[i],qty);
>     	            msg.sender.transfer((sell_price*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        240
Source: 
>     	            // send the owner any extra funds
>     	            owner.transfer(((buy_order_price[i]-sell_price)*qty)/10000);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        46
Source: 
>     function rmBuyOrder(uint32 idx) private {
>         buy_order_owners[idx]=buy_order_owners[num_buy_orders];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buy_order_qty[idx]=buy_order_qty[num_buy_orders];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        47
Source: 
>         buy_order_owners[idx]=buy_order_owners[num_buy_orders];
>         buy_order_qty[idx]=buy_order_qty[num_buy_orders];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buy_order_price[idx]=buy_order_price[num_buy_orders];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        48
Source: 
>         buy_order_qty[idx]=buy_order_qty[num_buy_orders];
>         buy_order_price[idx]=buy_order_price[num_buy_orders];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         num_buy_orders--;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        49
Source: 
>         buy_order_price[idx]=buy_order_price[num_buy_orders];
>         num_buy_orders--;
>         ^^^^^^^^^^^^^^^^
>         if(max_buy_price_idx==idx){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        51
Source: 
>         if(max_buy_price_idx==idx){
>             max_buy_price_idx=0;
>             ^^^^^^^^^^^^^^^^^^^
>             for(uint32 i=1;i<num_buy_orders;i++){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        53
Source: 
>             for(uint32 i=1;i<num_buy_orders;i++){
>                 if(buy_order_price[max_buy_price_idx]<buy_order_price[i])max_buy_price_idx=i;
>                                                                          ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        59
Source: 
>     function rmSellOrder(uint32 idx) private {
>         sell_order_owners[idx]=sell_order_owners[num_sell_orders];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sell_order_qty[idx]=sell_order_qty[num_sell_orders];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        60
Source: 
>         sell_order_owners[idx]=sell_order_owners[num_sell_orders];
>         sell_order_qty[idx]=sell_order_qty[num_sell_orders];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sell_order_price[idx]=sell_order_price[num_sell_orders];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        61
Source: 
>         sell_order_qty[idx]=sell_order_qty[num_sell_orders];
>         sell_order_price[idx]=sell_order_price[num_sell_orders];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         num_sell_orders--;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        62
Source: 
>         sell_order_price[idx]=sell_order_price[num_sell_orders];
>         num_sell_orders--;
>         ^^^^^^^^^^^^^^^^^
>         if(min_sell_price_idx==idx){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        64
Source: 
>         if(min_sell_price_idx==idx){
>             min_sell_price_idx=0;
>             ^^^^^^^^^^^^^^^^^^^^
>             for(uint32 i=1;i<num_sell_orders;i++){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        66
Source: 
>             for(uint32 i=1;i<num_sell_orders;i++){
>                 if(sell_order_price[min_sell_price_idx]>sell_order_price[i])min_sell_price_idx=i;
>                                                                             ^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        72
Source: 
>     function addBuyOrder(address payable adr, uint256 qty, uint64 price) private {
>         buy_order_owners[num_buy_orders] = adr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buy_order_qty[num_buy_orders] = qty;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        73
Source: 
>         buy_order_owners[num_buy_orders] = adr;
>         buy_order_qty[num_buy_orders] = qty;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buy_order_price[num_buy_orders] = price;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        74
Source: 
>         buy_order_qty[num_buy_orders] = qty;
>         buy_order_price[num_buy_orders] = price;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(price>buy_order_price[max_buy_price_idx])max_buy_price_idx = num_buy_orders;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        75
Source: 
>         buy_order_price[num_buy_orders] = price;
>         if(price>buy_order_price[max_buy_price_idx])max_buy_price_idx = num_buy_orders;
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(num_buy_orders==0)max_buy_price_idx = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        76
Source: 
>         if(price>buy_order_price[max_buy_price_idx])max_buy_price_idx = num_buy_orders;
>         if(num_buy_orders==0)max_buy_price_idx = 0;
>                              ^^^^^^^^^^^^^^^^^^^^^
>         num_buy_orders++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        77
Source: 
>         if(num_buy_orders==0)max_buy_price_idx = 0;
>         num_buy_orders++;
>         ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        81
Source: 
>     function addSellOrder(address payable adr, uint256 qty, uint64 price) private {
>         sell_order_owners[num_sell_orders] = adr;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sell_order_qty[num_sell_orders] = qty;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        82
Source: 
>         sell_order_owners[num_sell_orders] = adr;
>         sell_order_qty[num_sell_orders] = qty;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sell_order_price[num_sell_orders] = price;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        83
Source: 
>         sell_order_qty[num_sell_orders] = qty;
>         sell_order_price[num_sell_orders] = price;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(price<sell_order_price[min_sell_price_idx])min_sell_price_idx = num_sell_orders;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        84
Source: 
>         sell_order_price[num_sell_orders] = price;
>         if(price<sell_order_price[min_sell_price_idx])min_sell_price_idx = num_sell_orders;
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(num_sell_orders==0)min_sell_price_idx = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        85
Source: 
>         if(price<sell_order_price[min_sell_price_idx])min_sell_price_idx = num_sell_orders;
>         if(num_sell_orders==0)min_sell_price_idx = 0;
>                               ^^^^^^^^^^^^^^^^^^^^^^
>         num_sell_orders++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        86
Source: 
>         if(num_sell_orders==0)min_sell_price_idx = 0;
>         num_sell_orders++;
>         ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        169
Source: 
> 		            // we can trade all!
> 		            sell_order_qty[i]-=left;
>               ^^^^^^^^^^^^^^^^^^^^^^^
> 		            sell_order_owners[i].transfer((sell_order_price[i]*left)/10000);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20TokenLatch
Line:        222
Source: 
> 		            // we can trade all!
> 		            buy_order_qty[i]-=left;
>               ^^^^^^^^^^^^^^^^^^^^^^
> 		            transfer(buy_order_owners[i],left);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20TokenLatch
Line:        120
Source: 
>     function transfer(address target, uint qty) private{
>         ERC20(latched_contract).transfer(target, qty);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20TokenLatch
Line:        207
Source: 
> 		// handle fee and any extra funds
> 		ERC20(latched_contract).transferFrom(msg.sender,address(this),tokens);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
