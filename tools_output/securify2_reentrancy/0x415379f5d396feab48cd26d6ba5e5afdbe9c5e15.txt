[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20HTLC
Line:        123
Source: 
> 	/// @notice to pause the contract.
> 	function pause() public onlyAdmin whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20HTLC
Line:        128
Source: 
> 	/// @notice to unpause the contract.
> 	function unpause() public onlyAdmin whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20HTLC
Line:        135
Source: 
> 	/// @param _new_admin The new admin address.
> 	function setAdmin(address _new_admin) public onlyAdmin {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_new_admin != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20HTLC
Line:        143
Source: 
> 	/// @param _praContract The new PRA-ERC20 contract address.
> 	function setPraAddress(address _praContract) public onlyAdmin {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		praContractAddr = _praContract;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20HTLC
Line:        161
Source: 
> 	/// @param _receiverAddr PRA DID to swap in.
> 	function htlc(
>  ^^^^^^^^^^^^^^
> 		bytes32 _randomNumberHash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    ERC20HTLC
Line:        16
Source: 
> 
> contract ERC20HTLC {
> ^^^^^^^^^^^^^^^^^^^^
> 	struct Swap {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20HTLC
Line:        161
Source: 
> 	/// @param _receiverAddr PRA DID to swap in.
> 	function htlc(
>  ^^^^^^^^^^^^^^
> 		bytes32 _randomNumberHash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20HTLC
Line:        143
Source: 
> 	/// @param _praContract The new PRA-ERC20 contract address.
> 	function setPraAddress(address _praContract) public onlyAdmin {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		praContractAddr = _praContract;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20HTLC
Line:        291
Source: 
> 	/// @param _swapID The hash of randomNumberHash, swap creator and swap recipient
> 	function queryOpenSwap(bytes32 _swapID)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20HTLC
Line:        317
Source: 
> 	/// @param _swapID The hash of randomNumberHash, swap creator and swap recipient
> 	function isSwapExist(bytes32 _swapID) external view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (swapStates[_swapID] != States.INVALID);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20HTLC
Line:        324
Source: 
> 	/// @param _swapID The hash of randomNumberHash, swap creator and swap recipient
> 	function refundable(bytes32 _swapID) external view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (block.number >= swaps[_swapID].expireHeight && swapStates[_swapID] == States.OPEN);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20HTLC
Line:        331
Source: 
> 	/// @param _swapID The hash of randomNumberHash, swap creator and swap recipient
> 	function claimable(bytes32 _swapID) external view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (block.number < swaps[_swapID].expireHeight && swapStates[_swapID] == States.OPEN);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20HTLC
Line:        339
Source: 
> 	/// @param receiverAddr The PRA address (DID) to swap out
> 	function calSwapID(bytes32 _randomNumberHash, string memory receiverAddr) public pure returns (bytes32) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return sha256(abi.encodePacked(_randomNumberHash, receiverAddr));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC20HTLC
Line:        203
Source: 
> 		require(
> 			ERC20(praContractAddr).transferFrom(msg.sender, address(this), _outAmount),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"failed to transfer client asset to swap contract"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC20HTLC
Line:        247
Source: 
> 		require(
> 			ERC20(praContractAddr).transfer(recipientAddr, outAmount),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"Failed to transfer locked asset to recipient"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC20HTLC
Line:        275
Source: 
> 		require(
> 			ERC20(praContractAddr).transfer(swapSender, outAmount),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"Failed to transfer locked asset back to swap creator"

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20HTLC
Line:        72
Source: 
> 	/// @notice Throws if the swap is not open.
> 	modifier onlyOpenSwaps(bytes32 _swapID) {
>                         ^^^^^^^^^^^^^^^
> 		require(swapStates[_swapID] == States.OPEN, "swap is not opened");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20HTLC
Line:        78
Source: 
> 	/// @notice Throws if the swap is already expired.
> 	modifier onlyAfterExpireHeight(bytes32 _swapID) {
>                                 ^^^^^^^^^^^^^^^
> 		require(block.number >= swaps[_swapID].expireHeight, "swap is not expired");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20HTLC
Line:        84
Source: 
> 	/// @notice Throws if the expireHeight is reached
> 	modifier onlyBeforeExpireHeight(bytes32 _swapID) {
>                                  ^^^^^^^^^^^^^^^
> 		require(block.number < swaps[_swapID].expireHeight, "swap is already expired");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20HTLC
Line:        90
Source: 
> 	/// @notice Throws if the random number is not valid.
> 	modifier onlyWithRandomNumber(bytes32 _swapID, bytes32 _randomNumber) {
>                                ^^^^^^^^^^^^^^^
> 		require(

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20HTLC
Line:        90
Source: 
> 	/// @notice Throws if the random number is not valid.
> 	modifier onlyWithRandomNumber(bytes32 _swapID, bytes32 _randomNumber) {
>                                                 ^^^^^^^^^^^^^^^^^^^^^
> 		require(

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ERC20HTLC
Line:        176
Source: 
> 		require(_recipientAddr != address(0), "_recipientAddr should not be zero");
> 		require(_outAmount >= 10000000, "_outAmount must be more than 0.1");
>                         ^^^^^^^^
> 		require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20HTLC
Line:        203
Source: 
> 		require(
> 			ERC20(praContractAddr).transferFrom(msg.sender, address(this), _outAmount),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"failed to transfer client asset to swap contract"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20HTLC
Line:        247
Source: 
> 		require(
> 			ERC20(praContractAddr).transfer(recipientAddr, outAmount),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"Failed to transfer locked asset to recipient"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20HTLC
Line:        275
Source: 
> 		require(
> 			ERC20(praContractAddr).transfer(swapSender, outAmount),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			"Failed to transfer locked asset back to swap creator"

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20HTLC
Line:        66
Source: 
> 	address public owner;
> 	address public admin;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20HTLC
Line:        198
Source: 
> 
> 		swaps[swapID] = swap;
>   ^^^^^^^^^^^^^^^^^^^^
> 		swapStates[swapID] = States.OPEN;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20HTLC
Line:        199
Source: 
> 		swaps[swapID] = swap;
> 		swapStates[swapID] = States.OPEN;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20HTLC
Line:        236
Source: 
> 		// Complete the swap.
> 		swapStates[_swapID] = States.COMPLETED;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20HTLC
Line:        252
Source: 
> 		// delete closed swap
> 		delete swaps[_swapID];
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20HTLC
Line:        265
Source: 
> 		// Expire the swap.
> 		swapStates[_swapID] = States.EXPIRED;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20HTLC
Line:        280
Source: 
> 		// delete closed swap
> 		delete swaps[_swapID];
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
