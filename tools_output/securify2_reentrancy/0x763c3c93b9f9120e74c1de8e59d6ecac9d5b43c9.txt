pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    pUniEthDaiReimbursement
Line:        207
Source: 
>   
>   function claim() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(!reimbursed[msg.sender], "already reimbursed");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    pUniEthDaiReimbursement
Line:        214
Source: 
> 
>   function saveERC20(address _erc20, uint256 _amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_erc20 != token, "!token");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    pUniEthDaiReimbursement
Line:        214
Source: 
> 
>   function saveERC20(address _erc20, uint256 _amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_erc20 != token, "!token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    pUniEthDaiReimbursement
Line:        210
Source: 
>     require(amounts[msg.sender] > 0, "not claimable");
>     require(ERC20(token).transfer(msg.sender, amounts[msg.sender]));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     reimbursed[msg.sender] = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    pUniEthDaiReimbursement
Line:        13
Source: 
> 
> contract pUniEthDaiReimbursement {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => uint256) public amounts;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    pUniEthDaiReimbursement
Line:        17
Source: 
> 
>   address public constant token = 0xCffA068F1E44D98D3753966eBd58D4CFe3BB5162;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public constant gov = 0x9d074E37d408542FD38be78848e8814AFB38db17;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    pUniEthDaiReimbursement
Line:        18
Source: 
>   address public constant token = 0xCffA068F1E44D98D3753966eBd58D4CFe3BB5162;
>   address public constant gov = 0x9d074E37d408542FD38be78848e8814AFB38db17;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    pUniEthDaiReimbursement
Line:        210
Source: 
>     require(amounts[msg.sender] > 0, "not claimable");
>     require(ERC20(token).transfer(msg.sender, amounts[msg.sender]));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     reimbursed[msg.sender] = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    pUniEthDaiReimbursement
Line:        216
Source: 
>     require(_erc20 != token, "!token");
>     require(ERC20(_erc20).transfer(gov, _amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
