Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CrowdProposalFactory
Line:        157
Source: 
>     */
>     function createCrowdProposal(address[] memory targets,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                  uint[] memory values,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdProposal
Line:        94
Source: 
>         // Create governance proposal and save proposal id
>         govProposalId = IGovernorBravo(governor).propose(targets, values, signatures, calldatas, description);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CrowdProposalProposed(address(this), author, govProposalId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdProposal
Line:        108
Source: 
>         // Transfer staked COMP tokens from the crowd proposal contract back to the author
>         IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdProposal
Line:        108
Source: 
>         // Transfer staked COMP tokens from the crowd proposal contract back to the author
>         IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.6.10;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CrowdProposal
Line:        94
Source: 
>         // Create governance proposal and save proposal id
>         govProposalId = IGovernorBravo(governor).propose(targets, values, signatures, calldatas, description);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CrowdProposalProposed(address(this), author, govProposalId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CrowdProposal
Line:        85
Source: 
>         // Delegate votes to the crowd proposal
>         IComp(comp_).delegate(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CrowdProposal
Line:        108
Source: 
>         // Transfer staked COMP tokens from the crowd proposal contract back to the author
>         IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CrowdProposal
Line:        108
Source: 
>         // Transfer staked COMP tokens from the crowd proposal contract back to the author
>         IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CrowdProposal
Line:        117
Source: 
>         // Support the proposal, vote value = 1
>         IGovernorBravo(governor).castVote(govProposalId, 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CrowdProposalFactory
Line:        166
Source: 
>         // Stake COMP and force proposal to delegate votes to itself
>         IComp(comp).transferFrom(msg.sender, address(proposal), compStakeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CrowdProposal
Line:        39
Source: 
>     /// @notice Governance proposal id
>     uint public govProposalId;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @notice Terminate flag

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdProposal
Line:        94
Source: 
>         // Create governance proposal and save proposal id
>         govProposalId = IGovernorBravo(governor).propose(targets, values, signatures, calldatas, description);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CrowdProposalProposed(address(this), author, govProposalId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CrowdProposal
Line:        108
Source: 
>         // Transfer staked COMP tokens from the crowd proposal contract back to the author
>         IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CrowdProposalFactory
Line:        166
Source: 
>         // Stake COMP and force proposal to delegate votes to itself
>         IComp(comp).transferFrom(msg.sender, address(proposal), compStakeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
