[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ECDSA
Line:        297
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly {
>            ^^^^^^^
>             r := mload(add(signature, 0x20))

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        478
Source: 
>      */
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        483
Source: 
>      */
>     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        424
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        433
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        424
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        433
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LobstersMinter
Line:        677
Source: 
> 
>     lobstersNft.mintMultiple(_account, _mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Claim(_account, _count, _mintCount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LobstersMinter
Line:        702
Source: 
> 
>     lobstersNft.mintMultiple(sender, mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    LobstersMinter
Line:        689
Source: 
>       if (_collection == PUNK_COLLECTION) {
>         require(ICryptoPunks(_collection).punkIndexToAddress(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    LobstersMinter
Line:        691
Source: 
>       } else {
>         require(IERC721(_collection).ownerOf(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    LobstersMinter
Line:        677
Source: 
> 
>     lobstersNft.mintMultiple(_account, _mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Claim(_account, _count, _mintCount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    LobstersMinter
Line:        689
Source: 
>       if (_collection == PUNK_COLLECTION) {
>         require(ICryptoPunks(_collection).punkIndexToAddress(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    LobstersMinter
Line:        691
Source: 
>       } else {
>         require(IERC721(_collection).ownerOf(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    LobstersMinter
Line:        702
Source: 
> 
>     lobstersNft.mintMultiple(sender, mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LobstersMinter
Line:        656
Source: 
> 
>   function verifyClaim(
>             ^^^^^^^^^^^
>     address _account,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LobstersMinter
Line:        665
Source: 
> 
>   function claim(
>             ^^^^^
>     address _account,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LobstersMinter
Line:        652
Source: 
> 
>   function encode(address _account, uint256 _count) public view returns (bytes memory) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return abi.encodePacked(_account, _count);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        225
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        260
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        348
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>        ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        374
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        443
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        469
Source: 
> 
> pragma solidity >=0.6.2 <0.8.0;
>           ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        389
Source: 
> abstract contract Ownable is Context {
>     address private _owner;
>             ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LobstersMinter
Line:        625
Source: 
> 
>   ILobstersNft public lobstersNft;
>             ^^^^^^^^^^^^^^^^^^^^^^
>   bytes32 public merkleRoot;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LobstersMinter
Line:        626
Source: 
>   ILobstersNft public lobstersNft;
>   bytes32 public merkleRoot;
>             ^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LobstersMinter
Line:        628
Source: 
> 
>   mapping(address => uint256) public claimedCount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LobstersMinter
Line:        630
Source: 
> 
>   mapping(address => uint256) public maxClaimAllowedByCollection;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => mapping(uint256 => bool)) public claimedByCollection;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LobstersMinter
Line:        631
Source: 
>   mapping(address => uint256) public maxClaimAllowedByCollection;
>   mapping(address => mapping(uint256 => bool)) public claimedByCollection;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LobstersMinter
Line:        633
Source: 
> 
>   address public constant PUNK_COLLECTION = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LobstersMinter
Line:        626
Source: 
>   ILobstersNft public lobstersNft;
>   bytes32 public merkleRoot;
>             ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LobstersMinter
Line:        633
Source: 
> 
>   address public constant PUNK_COLLECTION = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LobstersMinter
Line:        677
Source: 
> 
>     lobstersNft.mintMultiple(_account, _mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Claim(_account, _count, _mintCount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LobstersMinter
Line:        689
Source: 
>       if (_collection == PUNK_COLLECTION) {
>         require(ICryptoPunks(_collection).punkIndexToAddress(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LobstersMinter
Line:        691
Source: 
>       } else {
>         require(IERC721(_collection).ownerOf(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LobstersMinter
Line:        702
Source: 
> 
>     lobstersNft.mintMultiple(sender, mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LobstersMinter
Line:        677
Source: 
> 
>     lobstersNft.mintMultiple(_account, _mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Claim(_account, _count, _mintCount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LobstersMinter
Line:        689
Source: 
>       if (_collection == PUNK_COLLECTION) {
>         require(ICryptoPunks(_collection).punkIndexToAddress(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LobstersMinter
Line:        691
Source: 
>       } else {
>         require(IERC721(_collection).ownerOf(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LobstersMinter
Line:        702
Source: 
> 
>     lobstersNft.mintMultiple(sender, mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LobstersMinter
Line:        689
Source: 
>       if (_collection == PUNK_COLLECTION) {
>         require(ICryptoPunks(_collection).punkIndexToAddress(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LobstersMinter
Line:        691
Source: 
>       } else {
>         require(IERC721(_collection).ownerOf(_tokenIds[i]) == sender, "TOKEN_NOT_OWNED_BY_SENDER");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LobstersMinter
Line:        677
Source: 
> 
>     lobstersNft.mintMultiple(_account, _mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Claim(_account, _count, _mintCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LobstersMinter
Line:        702
Source: 
> 
>     lobstersNft.mintMultiple(sender, mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ECDSA
Line:        303
Source: 
> 
>         return recover(hash, v, r, s);
>                                 ^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    LobstersMinter
Line:        677
Source: 
> 
>     lobstersNft.mintMultiple(_account, _mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Claim(_account, _count, _mintCount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LobstersMinter
Line:        673
Source: 
> 
>     claimedCount[_account] = claimedCount[_account].add(_mintCount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
