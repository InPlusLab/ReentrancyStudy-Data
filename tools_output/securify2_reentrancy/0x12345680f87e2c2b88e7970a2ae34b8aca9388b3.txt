[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        14
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>            ^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        14
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>                      ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Btspal
Line:        110
Source: 
>     // Take the remainder of the deposit and exit the project
>     function refund() checkInvestor public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balance = investor_balance[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Btspal
Line:        137
Source: 
>     // Reinvest the dividends into the project
>     function reinvest()public checkInvestor payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(investor_bonus[msg.sender], 'Get bonus to reinvest');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Btspal
Line:        215
Source: 
>     // Get information on the contributor
>     function getInvestor() public view returns(uint balance, uint payout, uint payout_time, bool bonus, uint ETH_bonus, uint payout_balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance = investor_balance[msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        13
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     uint256 c = a * b;
>                 ^^^^^
>     assert(a == 0 || c / a == b);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Btspal
Line:        120
Source: 
>             amount = balance-system_comission-charity_payment;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             CHARITY_FOUND.transfer(charity_payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Btspal
Line:        121
Source: 
>             msg.sender.transfer(amount);
>             CHARITY_FOUND.transfer(charity_payment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Btspal
Line:        124
Source: 
>             amount = payout_left;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Btspal
Line:        160
Source: 
>         // 1 percent held on hedging
>         msg.sender.transfer(credit.sub(credit.div(100)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_payout += credit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Btspal
Line:        180
Source: 
>         // transfer developer commission
>         DEVELOPER_WALLET.transfer(msg.value.mul(PROJECT_COMMISSION).div(100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        41
Source: 
>     // public information about the contribution of a specific investor
>     mapping (address => uint) public investor_balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // public information last payment time

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        43
Source: 
>     // public information last payment time
>     mapping (address => uint) public investor_payout_time;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // public information how much the user received money

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        45
Source: 
>     // public information how much the user received money
>     mapping(address => uint) public investor_payout;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // public information how much the user received bonus

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        47
Source: 
>     // public information how much the user received bonus
>     mapping(address => bool) public investor_bonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // public information how much the user received bonus

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        49
Source: 
>     // public information how much the user received bonus
>     mapping(address => uint) public investor_ETH_bonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        81
Source: 
> 
>     uint public total_deposits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public number_contributors;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        82
Source: 
>     uint public total_deposits;
>     uint public number_contributors;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public last_payout;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        83
Source: 
>     uint public number_contributors;
>     uint public last_payout;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public total_payout;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        84
Source: 
>     uint public last_payout;
>     uint public total_payout;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public total_bonus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        85
Source: 
>     uint public total_payout;
>     uint public total_bonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        103
Source: 
>     
>     function get_credit()public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint hourly_rate = (investor_balance[msg.sender].add(investor_ETH_bonus[msg.sender])).mul(HOURLY_PERCENT).div(1000000);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        104
Source: 
>     function get_credit()public view  returns(uint){
>         uint hourly_rate = (investor_balance[msg.sender].add(investor_ETH_bonus[msg.sender])).mul(HOURLY_PERCENT).div(1000000);
>         ^^^^^^^^^^^^^^^^
>         uint debt = block.timestamp.sub(investor_payout_time[msg.sender]).div(PAYOUT_TIME);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        112
Source: 
>         uint balance = investor_balance[msg.sender];
>         uint payout_left = balance.sub(investor_payout[msg.sender]);
>         ^^^^^^^^^^^^^^^^
>         uint amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        114
Source: 
>         uint amount;
>         uint system_comission;
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint charity_payment;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Btspal
Line:        115
Source: 
>         uint system_comission;
>         uint charity_payment;
>         ^^^^^^^^^^^^^^^^^^^^
>         if(investor_bonus[msg.sender] || investor_payout[msg.sender] > 0){

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        53
Source: 
>     // be used for the development of the project
>     uint constant  MINIMAL_DEPOSIT = 0.01 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //bonus 10% for a deposit above 10 ETH

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        55
Source: 
>     //bonus 10% for a deposit above 10 ETH
>     uint constant  LOYALTY_BONUS = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //bonus 2,5 % for a deposit above 10 ETH

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        57
Source: 
>     //bonus 2,5 % for a deposit above 10 ETH
>     uint constant  PUBLIC_BONUS = 25;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Time after which you can request the next payment

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        59
Source: 
>     // Time after which you can request the next payment
>     uint constant  PAYOUT_TIME = 1 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // 0.1% per hour, 2.4 % per day

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        61
Source: 
>     // 0.1% per hour, 2.4 % per day
>     uint constant  HOURLY_PERCENT = 1000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //commission 7%

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        63
Source: 
>     //commission 7%
>     uint constant PROJECT_COMMISSION = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //commission 3%

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        65
Source: 
>     //commission 3%
>     uint constant CHARITY_COMMISSION = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // developer wallet for advertising and server payments

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        67
Source: 
>     // developer wallet for advertising and server payments
>     address payable constant DEVELOPER_WALLET  = 0xA4B37b7cBdA57cF0c8a12EAe77ce51Eb9d067a7C;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Charity Found wallet

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        69
Source: 
>     // Charity Found wallet
>     address payable constant CHARITY_FOUND = 0x1C888e48336778CC279a59f4b7588aa788588265;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The wallet from which the contract will be replenished after the exchange of bitcoin on the exchange

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Btspal
Line:        71
Source: 
>     // The wallet from which the contract will be replenished after the exchange of bitcoin on the exchange
>     address payable constant FOUND = 0x5FCa4a6a4A1A6A2e7435bf8b3E83595bf96e582A;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Btspal
Line:        104
Source: 
>     function get_credit()public view  returns(uint){
>         uint hourly_rate = (investor_balance[msg.sender].add(investor_ETH_bonus[msg.sender])).mul(HOURLY_PERCENT).div(1000000);
>                                                                                                                       ^^^^^^^
>         uint debt = block.timestamp.sub(investor_payout_time[msg.sender]).div(PAYOUT_TIME);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Btspal
Line:        121
Source: 
>             msg.sender.transfer(amount);
>             CHARITY_FOUND.transfer(charity_payment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Btspal
Line:        124
Source: 
>             amount = payout_left;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Btspal
Line:        160
Source: 
>         // 1 percent held on hedging
>         msg.sender.transfer(credit.sub(credit.div(100)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_payout += credit;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Btspal
Line:        180
Source: 
>         // transfer developer commission
>         DEVELOPER_WALLET.transfer(msg.value.mul(PROJECT_COMMISSION).div(100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Btspal
Line:        120
Source: 
>             amount = balance-system_comission-charity_payment;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             CHARITY_FOUND.transfer(charity_payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Btspal
Line:        120
Source: 
>             amount = balance-system_comission-charity_payment;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             CHARITY_FOUND.transfer(charity_payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Btspal
Line:        121
Source: 
>             msg.sender.transfer(amount);
>             CHARITY_FOUND.transfer(charity_payment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Btspal
Line:        124
Source: 
>             amount = payout_left;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Btspal
Line:        180
Source: 
>         // transfer developer commission
>         DEVELOPER_WALLET.transfer(msg.value.mul(PROJECT_COMMISSION).div(100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Btspal
Line:        237
Source: 
>         }else{
>            DEVELOPER_WALLET.transfer(msg.value); 
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Btspal
Line:        120
Source: 
>             amount = balance-system_comission-charity_payment;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             CHARITY_FOUND.transfer(charity_payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Btspal
Line:        121
Source: 
>             msg.sender.transfer(amount);
>             CHARITY_FOUND.transfer(charity_payment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Btspal
Line:        124
Source: 
>             amount = payout_left;
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Btspal
Line:        160
Source: 
>         // 1 percent held on hedging
>         msg.sender.transfer(credit.sub(credit.div(100)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_payout += credit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Btspal
Line:        180
Source: 
>         // transfer developer commission
>         DEVELOPER_WALLET.transfer(msg.value.mul(PROJECT_COMMISSION).div(100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Btspal
Line:        237
Source: 
>         }else{
>            DEVELOPER_WALLET.transfer(msg.value); 
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Btspal
Line:        81
Source: 
> 
>     uint public total_deposits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public number_contributors;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Btspal
Line:        82
Source: 
>     uint public total_deposits;
>     uint public number_contributors;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public last_payout;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Btspal
Line:        83
Source: 
>     uint public number_contributors;
>     uint public last_payout;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public total_payout;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Btspal
Line:        84
Source: 
>     uint public last_payout;
>     uint public total_payout;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public total_bonus;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Btspal
Line:        85
Source: 
>     uint public total_payout;
>     uint public total_bonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Btspal
Line:        160
Source: 
>         // 1 percent held on hedging
>         msg.sender.transfer(credit.sub(credit.div(100)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         total_payout += credit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Btspal
Line:        237
Source: 
>         }else{
>            DEVELOPER_WALLET.transfer(msg.value); 
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Btspal
Line:        161
Source: 
>         msg.sender.transfer(credit.sub(credit.div(100)));
>         total_payout += credit;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         last_payout = block.timestamp;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Btspal
Line:        162
Source: 
>         total_payout += credit;
>         last_payout = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit PayDividends(msg.sender, credit, block.timestamp);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Btspal
Line:        180
Source: 
>         // transfer developer commission
>         DEVELOPER_WALLET.transfer(msg.value.mul(PROJECT_COMMISSION).div(100));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Btspal
Line:        83
Source: 
>     uint public number_contributors;
>     uint public last_payout;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public total_payout;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Btspal
Line:        105
Source: 
>         uint hourly_rate = (investor_balance[msg.sender].add(investor_ETH_bonus[msg.sender])).mul(HOURLY_PERCENT).div(1000000);
>         uint debt = block.timestamp.sub(investor_payout_time[msg.sender]).div(PAYOUT_TIME);
>                     ^^^^^^^^^^^^^^^
>         return(debt.mul(hourly_rate));

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Btspal
Line:        99
Source: 
>     modifier checkPaymentTime(){
>          require(block.timestamp >= investor_payout_time[msg.sender].add(PAYOUT_TIME), "You can request payments at least 1 time per hour");
>                  ^^^^^^^^^^^^^^^
>          _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Btspal
Line:        182
Source: 
>         
>         if(block.timestamp >= investor_payout_time[msg.sender].add(PAYOUT_TIME) && investor_balance[msg.sender] != 0){
>            ^^^^^^^^^^^^^^^
>             receivePayment();

[0m
