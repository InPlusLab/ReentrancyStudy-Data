pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SBX_STAKE
Line:        86
Source: 
>     
>     uint256 public penaltyFee = 5; //5% penlaty fee applicable before lock up time 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalRewards;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SBX_STAKE
Line:        90
Source: 
>     
>     uint256 public firstYearRate = 20;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public secondYearRate = 15;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SBX_STAKE
Line:        91
Source: 
>     uint256 public firstYearRate = 20;
>     uint256 public secondYearRate = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public afterSecondYearRate = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SBX_STAKE
Line:        92
Source: 
>     uint256 public secondYearRate = 15;
>     uint256 public afterSecondYearRate = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SBX_STAKE
Line:        94
Source: 
>     
>     uint256 public firstYearStakingPeriod = 1 weeks;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public secondYearStakingPeriod = 3 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SBX_STAKE
Line:        95
Source: 
>     uint256 public firstYearStakingPeriod = 1 weeks;
>     uint256 public secondYearStakingPeriod = 3 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public afterSecondYearStakingPeriod = 24 hours;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SBX_STAKE
Line:        96
Source: 
>     uint256 public secondYearStakingPeriod = 3 days;
>     uint256 public afterSecondYearStakingPeriod = 24 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SBX_STAKE
Line:        135
Source: 
>     function STAKE(uint256 _amount, address _referrerID) public {
>         require(_referrerID == address(0) || users[_referrerID].Exist, "Invalid Referrer Id");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > 0, "Invalid amount");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        35
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        39
Source: 
>     uint256 c = a * b;
>     assert(c / a == b);
>            ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SBX_STAKE
Line:        265
Source: 
>         
>         if(yearOfContract == 1)
>            ^^^^^^^^^^^^^^^^^^^
>             rate = firstYearRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SBX_STAKE
Line:        268
Source: 
>             
>         else if(yearOfContract == 2)
>                 ^^^^^^^^^^^^^^^^^^^
>             rate = secondYearRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SBX_STAKE
Line:        283
Source: 
>         
>         if(yearOfContract == 1)
>            ^^^^^^^^^^^^^^^^^^^
>             period = firstYearStakingPeriod;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SBX_STAKE
Line:        286
Source: 
>             
>         else if(yearOfContract == 2)
>                 ^^^^^^^^^^^^^^^^^^^
>             period = secondYearStakingPeriod;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        21
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SBX_STAKE
Line:        134
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE(uint256 _amount, address _referrerID) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_referrerID == address(0) || users[_referrerID].Exist, "Invalid Referrer Id");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SBX_STAKE
Line:        184
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimReward() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pendingReward(msg.sender) > 0, "nothing pending to claim");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SBX_STAKE
Line:        233
Source: 
>     // ------------------------------------------------------------------------
>     function yourActiveStake(address _user) public view returns(uint256 _activeStake){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].activeDeposit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SBX_STAKE
Line:        240
Source: 
>     // ------------------------------------------------------------------------
>     function yourTotalStakesTillToday(address _user) public view returns(uint256 _totalStakes){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalDeposits;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SBX_STAKE
Line:        254
Source: 
>     // ------------------------------------------------------------------------
>     function totalStakeRewardsClaimedTillToday(address _user) public view returns(uint256 _totalEarned){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalGained;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SBX_STAKE
Line:        297
Source: 
>     // ------------------------------------------------------------------------
>     function stakingTimeLeft(address _user) public view returns(uint256 _secsLeft){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(users[_user].activeDeposit > 0){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        21
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SBX_STAKE
Line:        134
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE(uint256 _amount, address _referrerID) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_referrerID == address(0) || users[_referrerID].Exist, "Invalid Referrer Id");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SBX_STAKE
Line:        210
Source: 
>     // ------------------------------------------------------------------------
>     function pendingReward(address _caller) public view returns(uint256 _pendingReward){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _totalStakedTime = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SBX_STAKE
Line:        233
Source: 
>     // ------------------------------------------------------------------------
>     function yourActiveStake(address _user) public view returns(uint256 _activeStake){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].activeDeposit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SBX_STAKE
Line:        240
Source: 
>     // ------------------------------------------------------------------------
>     function yourTotalStakesTillToday(address _user) public view returns(uint256 _totalStakes){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalDeposits;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SBX_STAKE
Line:        247
Source: 
>     // ------------------------------------------------------------------------
>     function StakedOn(address _user) public view returns(uint256 _unixLastStakedTime){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].startTime;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SBX_STAKE
Line:        254
Source: 
>     // ------------------------------------------------------------------------
>     function totalStakeRewardsClaimedTillToday(address _user) public view returns(uint256 _totalEarned){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalGained;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        38
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        62
Source: 
>   function ceil(uint a, uint m) internal pure returns (uint r) {
>     return (a + m - 1) / m * m;
>            ^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SBX_STAKE
Line:        188
Source: 
>         // transfer the reward to the claimer
>         require(ERC20Interface(SBX).transfer(msg.sender, pendingReward(msg.sender))); 
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        82
Source: 
> 
> contract SBX_STAKE is Owned{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        134
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE(uint256 _amount, address _referrerID) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_referrerID == address(0) || users[_referrerID].Exist, "Invalid Referrer Id");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        156
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimStakedTokens() external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].activeDeposit > 0, "no running stake");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        159
Source: 
>         
>         uint256 _penaltyFee = 0;
>         ^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        184
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimReward() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pendingReward(msg.sender) > 0, "nothing pending to claim");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        211
Source: 
>     function pendingReward(address _caller) public view returns(uint256 _pendingReward){
>         uint256 _totalStakedTime = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 expiryDate = (latestStakingPeriod()).add(users[_caller].startTime);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        223
Source: 
>             
>         uint256 _reward_token_second = ((latestStakingRate()).mul(10 ** 21)).div(365 days); // added extra 10^21
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SBX_STAKE
Line:        247
Source: 
>     // ------------------------------------------------------------------------
>     function StakedOn(address _user) public view returns(uint256 _unixLastStakedTime){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].startTime;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SBX_STAKE
Line:        100
Source: 
>     
>     address constant SBX = 0xDaF8a0E12fc3b109A17ED5CbB943A8f3f86081f7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SBX_STAKE
Line:        113
Source: 
>     
>     mapping(address => DepositedToken) users;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SBX_STAKE
Line:        145
Source: 
>         // transfer tokens from user to the contract balance
>         require(ERC20Interface(SBX).transferFrom(msg.sender, address(this), _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SBX_STAKE
Line:        168
Source: 
>         // transfer staked tokens - apply 5% penalty and send back staked tokens
>         require(ERC20Interface(SBX).transfer(msg.sender, toTransfer));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SBX_STAKE
Line:        188
Source: 
>         // transfer the reward to the claimer
>         require(ERC20Interface(SBX).transfer(msg.sender, pendingReward(msg.sender))); 
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SBX_STAKE
Line:        87
Source: 
>     uint256 public penaltyFee = 5; //5% penlaty fee applicable before lock up time 
>     uint256 public totalRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalStakes;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SBX_STAKE
Line:        88
Source: 
>     uint256 public totalRewards;
>     uint256 public totalStakes;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SBX_STAKE
Line:        193
Source: 
>         // add claimed reward to global stats
>         totalRewards = totalRewards.add(pendingReward(msg.sender));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SBX_STAKE
Line:        196
Source: 
>         // add the reward to total claimed rewards
>         users[msg.sender].totalGained = users[msg.sender].totalGained.add(pendingReward(msg.sender));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // update lastClaim amount

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SBX_STAKE
Line:        198
Source: 
>         // update lastClaim amount
>         users[msg.sender].lastClaimedDate = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // reset previous rewards

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SBX_STAKE
Line:        200
Source: 
>         // reset previous rewards
>         users[msg.sender].pendingGains = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SBX_STAKE
Line:        351
Source: 
>     function _updateReferralReward(uint256 _amount, address _referrerID) private{
>         users[_referrerID].pendingGains +=  _onePercent(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SBX_STAKE
Line:        262
Source: 
>     function latestStakingRate() public view returns(uint256 APY){
>         uint256 yearOfContract = (((block.timestamp).sub(contractStartDate)).div(365 days)).add(1);
>                                     ^^^^^^^^^^^^^^^
>         uint256 rate;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SBX_STAKE
Line:        280
Source: 
>     function latestStakingPeriod() public view returns(uint256 Period){
>         uint256 yearOfContract = (((block.timestamp).sub(contractStartDate)).div(365 days)).add(1);
>                                     ^^^^^^^^^^^^^^^
>         uint256 period;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    SBX_STAKE
Line:        126
Source: 
>     constructor() public{
>         contractStartDate = block.timestamp;
>                             ^^^^^^^^^^^^^^^
>     }

[0m
