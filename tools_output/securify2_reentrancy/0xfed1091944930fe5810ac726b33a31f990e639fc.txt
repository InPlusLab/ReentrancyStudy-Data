[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MultiSign
Line:        29
Source: 
>     
>     address public ThirdParty = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public Foundation = address(0x031DE0f3C1D4e525baBa97829eccb3d3D66E9bdb);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MultiSign
Line:        30
Source: 
>     address public ThirdParty = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);
>     address public Foundation = address(0x031DE0f3C1D4e525baBa97829eccb3d3D66E9bdb);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public ProposalID = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSign
Line:        48
Source: 
>     
>     function lookProposal(uint256 id) public view returns (uint256 _id, address _to, bool _close, address _tokenContractAddress, uint256 _amount, uint256 _approvalByThirdParty, uint256 _approvalByFoundation) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Proposal memory p = Proposals[id];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSign
Line:        54
Source: 
>     // only  Foundation or ThirdParty can proposal
>     function proposal (address _to, address _tokenContractAddress, uint256 _amount) public returns (uint256 id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == Foundation || msg.sender == ThirdParty);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSign
Line:        62
Source: 
>     // only  Foundation or ThirdParty can approval
>     function approval (uint256 id) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == Foundation || msg.sender == ThirdParty);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSign
Line:        84
Source: 
>     // only  Foundation or ThirdParty can refuse
>     function refuse (uint256 id) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == Foundation || msg.sender == ThirdParty);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    MultiSign
Line:        26
Source: 
> 
> contract MultiSign {
> ^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSign
Line:        48
Source: 
>     
>     function lookProposal(uint256 id) public view returns (uint256 _id, address _to, bool _close, address _tokenContractAddress, uint256 _amount, uint256 _approvalByThirdParty, uint256 _approvalByFoundation) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Proposal memory p = Proposals[id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSign
Line:        54
Source: 
>     // only  Foundation or ThirdParty can proposal
>     function proposal (address _to, address _tokenContractAddress, uint256 _amount) public returns (uint256 id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == Foundation || msg.sender == ThirdParty);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSign
Line:        78
Source: 
>             Proposals[id] = p;
>             require(ERC20(p.tokenContractAddress).transfer(p.to, p.amount.mul(1e18)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSign
Line:        29
Source: 
>     
>     address public ThirdParty = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public Foundation = address(0x031DE0f3C1D4e525baBa97829eccb3d3D66E9bdb);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSign
Line:        30
Source: 
>     address public ThirdParty = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);
>     address public Foundation = address(0x031DE0f3C1D4e525baBa97829eccb3d3D66E9bdb);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public ProposalID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSign
Line:        31
Source: 
>     address public Foundation = address(0x031DE0f3C1D4e525baBa97829eccb3d3D66E9bdb);
>     uint256 public ProposalID = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => Proposal) public Proposals;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSign
Line:        32
Source: 
>     uint256 public ProposalID = 0;
>     mapping(uint => Proposal) public Proposals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSign
Line:        78
Source: 
>             Proposals[id] = p;
>             require(ERC20(p.tokenContractAddress).transfer(p.to, p.amount.mul(1e18)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
