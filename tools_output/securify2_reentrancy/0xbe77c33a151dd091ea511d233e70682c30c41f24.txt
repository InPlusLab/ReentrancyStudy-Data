Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    EthWay
Line:        113
Source: 
>             
>             require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount), "Deposit already exists");
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > cycles.length - 1 ? cycles.length - 1 : users[_addr].cycle], "Bad amount");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthWay
Line:        113
Source: 
>             
>             require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount), "Deposit already exists");
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > cycles.length - 1 ? cycles.length - 1 : users[_addr].cycle], "Bad amount");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthWay
Line:        140
Source: 
> 
>         admin_fee.transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthWay
Line:        227
Source: 
>     function withdraw() external {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthWay
Line:        287
Source: 
> 
>         payable(msg.sender).transfer(to_payout);	
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthWay
Line:        301
Source: 
>     function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {
>         max_payout = this.maxPayoutOf(users[_addr].deposit_amount);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EthWay
Line:        221
Source: 
> 
>     function deposit(address _upline) payable external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setUpline(msg.sender, _upline);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EthWay
Line:        296
Source: 
>     
>     function maxPayoutOf(uint256 _amount) pure external returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _amount * 365 / 100;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EthWay
Line:        315
Source: 
>     */
>     function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EthWay
Line:        319
Source: 
> 
>     function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EthWay
Line:        208
Source: 
> 
>             uint256 win = draw_amount * pool_bonuses[i] / 100;
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EthWay
Line:        304
Source: 
>         if(users[_addr].deposit_payouts < max_payout) {
>             payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 100) - users[_addr].deposit_payouts;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EthWay
Line:        140
Source: 
> 
>         admin_fee.transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EthWay
Line:        287
Source: 
> 
>         payable(msg.sender).transfer(to_payout);	
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        27
Source: 
>     address payable public root;
>     address payable public admin_fee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        32
Source: 
>     uint256[] public cycles;
>     uint8[] public ref_bonuses;                     // 1 => 1%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        34
Source: 
> 
>     uint8[] public pool_bonuses;                    // 1 => 1%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint40 public pool_last_draw = uint40(block.timestamp);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        35
Source: 
>     uint8[] public pool_bonuses;                    // 1 => 1%
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_cycle;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        36
Source: 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     uint256 public pool_cycle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        37
Source: 
>     uint256 public pool_cycle;
>     uint256 public pool_balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        38
Source: 
>     uint256 public pool_balance;
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint8 => address) public pool_top;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        39
Source: 
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;
>     mapping(uint8 => address) public pool_top;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        41
Source: 
> 
>     uint256 public total_users = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_deposited;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        42
Source: 
>     uint256 public total_users = 1;
>     uint256 public total_deposited;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_withdraw;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        43
Source: 
>     uint256 public total_deposited;
>     uint256 public total_withdraw;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        203
Source: 
> 
>         uint256 draw_amount = pool_balance / 10;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        227
Source: 
>     function withdraw() external {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>          ^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        227
Source: 
>     function withdraw() external {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                             ^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        245
Source: 
>         if(users[msg.sender].payouts < max_payout && users[msg.sender].direct_bonus > 0) {
>             uint256 direct_bonus = users[msg.sender].direct_bonus;
>             ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        258
Source: 
>         if(users[msg.sender].payouts < max_payout && users[msg.sender].pool_bonus > 0) {
>             uint256 pool_bonus = users[msg.sender].pool_bonus;
>             ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EthWay
Line:        271
Source: 
>         if(users[msg.sender].payouts < max_payout && users[msg.sender].match_bonus > 0) {
>             uint256 match_bonus = users[msg.sender].match_bonus;
>             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EthWay
Line:        287
Source: 
> 
>         payable(msg.sender).transfer(to_payout);	
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EthWay
Line:        140
Source: 
> 
>         admin_fee.transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EthWay
Line:        140
Source: 
> 
>         admin_fee.transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EthWay
Line:        287
Source: 
> 
>         payable(msg.sender).transfer(to_payout);	
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EthWay
Line:        113
Source: 
>             
>             require(users[_addr].payouts >= this.maxPayoutOf(users[_addr].deposit_amount), "Deposit already exists");
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_amount >= users[_addr].deposit_amount && _amount <= cycles[users[_addr].cycle > cycles.length - 1 ? cycles.length - 1 : users[_addr].cycle], "Bad amount");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EthWay
Line:        227
Source: 
>     function withdraw() external {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EthWay
Line:        301
Source: 
>     function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {
>         max_payout = this.maxPayoutOf(users[_addr].deposit_amount);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EthWay
Line:        331
Source: 
> 
>             addrs[i] = pool_top[i];
>             ^^^^^
>             deps[i] = pool_users_refs_deposits_sum[pool_cycle][pool_top[i]];

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EthWay
Line:        36
Source: 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     uint256 public pool_cycle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_balance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EthWay
Line:        37
Source: 
>     uint256 public pool_cycle;
>     uint256 public pool_balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EthWay
Line:        42
Source: 
>     uint256 public total_users = 1;
>     uint256 public total_deposited;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_withdraw;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EthWay
Line:        43
Source: 
>     uint256 public total_deposited;
>     uint256 public total_withdraw;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EthWay
Line:        140
Source: 
> 
>         admin_fee.transfer(_amount / 10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        111
Source: 
>         if(users[_addr].deposit_time > 0) {
>             users[_addr].cycle++;
>             ^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        118
Source: 
>         
>         users[_addr].payouts = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_amount = _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        119
Source: 
>         users[_addr].payouts = 0;
>         users[_addr].deposit_amount = _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_payouts = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        120
Source: 
>         users[_addr].deposit_amount = _amount;
>         users[_addr].deposit_payouts = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_time = uint40(block.timestamp);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        121
Source: 
>         users[_addr].deposit_payouts = 0;
>         users[_addr].deposit_time = uint40(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].total_deposits += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        122
Source: 
>         users[_addr].deposit_time = uint40(block.timestamp);
>         users[_addr].total_deposits += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        124
Source: 
> 
>         total_deposited += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        129
Source: 
>         if(users[_addr].upline != address(0)) {
>             users[users[_addr].upline].direct_bonus += _amount / 10;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        200
Source: 
>     function _drawPool() private {
>         pool_last_draw = uint40(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pool_cycle++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        201
Source: 
>         pool_last_draw = uint40(block.timestamp);
>         pool_cycle++;
>         ^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        217
Source: 
>         for(uint8 i = 0; i < pool_bonuses.length; i++) {
>             pool_top[i] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        210
Source: 
> 
>             users[pool_top[i]].pool_bonus += win;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             pool_balance -= win;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        211
Source: 
>             users[pool_top[i]].pool_bonus += win;
>             pool_balance -= win;
>             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        144
Source: 
>     function _pollDeposits(address _addr, uint256 _amount) private {
>         pool_balance += _amount / 20;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        150
Source: 
>         
>         pool_users_refs_deposits_sum[pool_cycle][upline] += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        156
Source: 
>             if(pool_top[i] == address(0)) {
>                 pool_top[i] = upline;
>                 ^^^^^^^^^^^^^^^^^^^^
>                 break;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        164
Source: 
>                         for(uint8 k = j; k <= pool_bonuses.length; k++) {
>                             pool_top[k] = pool_top[k + 1];
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        171
Source: 
>                 for(uint8 j = uint8(pool_bonuses.length - 1); j > i; j--) {
>                     pool_top[j] = pool_top[j - 1];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        174
Source: 
> 
>                 pool_top[i] = upline;
>                 ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        90
Source: 
>         if(users[_addr].upline == address(0) && _upline != _addr && _addr != root && (users[_upline].deposit_time > 0 || _upline == root)) {
>             users[_addr].upline = _upline;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_upline].referrals++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        91
Source: 
>             users[_addr].upline = _upline;
>             users[_upline].referrals++;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        95
Source: 
> 
>             total_users++;
>             ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthWay
Line:        100
Source: 
> 
>                 users[_upline].total_structure++;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EthWay
Line:        200
Source: 
>     function _drawPool() private {
>         pool_last_draw = uint40(block.timestamp);
>                                 ^^^^^^^^^^^^^^^
>         pool_cycle++;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EthWay
Line:        304
Source: 
>         if(users[_addr].deposit_payouts < max_payout) {
>             payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 100) - users[_addr].deposit_payouts;
>                                                       ^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EthWay
Line:        35
Source: 
>     uint8[] public pool_bonuses;                    // 1 => 1%
>     uint40 public pool_last_draw = uint40(block.timestamp);
>                                           ^^^^^^^^^^^^^^^
>     uint256 public pool_cycle;

[0m
