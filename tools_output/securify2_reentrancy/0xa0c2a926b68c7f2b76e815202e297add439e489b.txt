pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DividendManager
Line:        301
Source: 
> 
>     uint256 public RECYCLE_TIME = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        232
Source: 
>     function isOwner() public view returns (bool) {
>         return msg.sender == _owner;
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        73
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DividendManager
Line:        381
Source: 
>         Dividend storage dividend = dividends[_dividendIndex];
>         require(dividend.claimed[msg.sender] == false);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dividend.recycled == false);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DividendManager
Line:        382
Source: 
>         require(dividend.claimed[msg.sender] == false);
>         require(dividend.recycled == false);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = dividendToken.balanceOfAt(msg.sender, dividend.blockNumber);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DividendManager
Line:        396
Source: 
>         }
>         if (dividendsClaimed[msg.sender] == _dividendIndex) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             dividendsClaimed[msg.sender] = _dividendIndex + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DividendManager
Line:        422
Source: 
>         Dividend storage dividend = dividends[_dividendIndex];
>         require(dividend.recycled == false);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dividend.timestamp < now.sub(RECYCLE_TIME));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        216
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        242
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        251
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        242
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        251
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        242
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        251
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        334
Source: 
> 
>     function depositDividend() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _depositDividend(msg.value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        368
Source: 
> 
>     function provisionDividendAll() public view returns (uint provisionAmount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         provisionAmount = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        389
Source: 
> 
>     function claimDividend(uint256 _dividendIndex) validDividendIndex(_dividendIndex) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint claim = _claimDividend(_dividendIndex);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        401
Source: 
> 
>     function claimDividendAll() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dividendsClaimed[msg.sender] < dividends.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        420
Source: 
> 
>     function recycleDividend(uint256 _dividendIndex) onlyOwner validDividendIndex(_dividendIndex) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Dividend storage dividend = dividends[_dividendIndex];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CanReclaimToken
Line:        279
Source: 
>   function reclaimToken(IERC20 token) external onlyOwner {
>     uint256 balance = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transfer(owner(), balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CanReclaimToken
Line:        280
Source: 
>     uint256 balance = token.balanceOf(address(this));
>     token.transfer(owner(), balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        340
Source: 
>         require(value > 0);
>         uint256 currentSupply = dividendToken.totalSupplyAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 dividendIndex = dividends.length;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        364
Source: 
>         }
>         uint256 balance = dividendToken.balanceOfAt(msg.sender, dividend.blockNumber);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         provisionAmount = balance.mul(dividend.amount).div(dividend.totalSupply);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        383
Source: 
>         require(dividend.recycled == false);
>         uint256 balance = dividendToken.balanceOfAt(msg.sender, dividend.blockNumber);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claim = balance.mul(dividend.amount).div(dividend.totalSupply);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        393
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        416
Source: 
>         if (claimSum > 0) {
>             msg.sender.transfer(claimSum);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        425
Source: 
>         dividends[_dividendIndex].recycled = true;
>         uint256 currentSupply = dividendToken.totalSupplyAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainingAmount = dividend.amount.sub(dividend.claimedAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        251
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CanReclaimToken
Line:        278
Source: 
>    */
>   function reclaimToken(IERC20 token) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 balance = token.balanceOf(address(this));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DividendManager
Line:        393
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DividendManager
Line:        416
Source: 
>         if (claimSum > 0) {
>             msg.sender.transfer(claimSum);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DividendManager
Line:        301
Source: 
> 
>     uint256 public RECYCLE_TIME = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DividendManager
Line:        315
Source: 
> 
>     mapping(address => uint256) dividendsClaimed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DividendManager
Line:        317
Source: 
> 
>     modifier validDividendIndex(uint256 _dividendIndex) {
>                                 ^^^^^^^^^^^^^^^^^^^^^^
>         require(_dividendIndex < dividends.length);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DividendManager
Line:        393
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DividendManager
Line:        416
Source: 
>         if (claimSum > 0) {
>             msg.sender.transfer(claimSum);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DividendManager
Line:        393
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DividendManager
Line:        416
Source: 
>         if (claimSum > 0) {
>             msg.sender.transfer(claimSum);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DividendManager
Line:        364
Source: 
>         }
>         uint256 balance = dividendToken.balanceOfAt(msg.sender, dividend.blockNumber);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         provisionAmount = balance.mul(dividend.amount).div(dividend.totalSupply);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DividendManager
Line:        383
Source: 
>         require(dividend.recycled == false);
>         uint256 balance = dividendToken.balanceOfAt(msg.sender, dividend.blockNumber);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claim = balance.mul(dividend.amount).div(dividend.totalSupply);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CanReclaimToken
Line:        279
Source: 
>   function reclaimToken(IERC20 token) external onlyOwner {
>     uint256 balance = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transfer(owner(), balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CanReclaimToken
Line:        280
Source: 
>     uint256 balance = token.balanceOf(address(this));
>     token.transfer(owner(), balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CanReclaimToken
Line:        279
Source: 
>   function reclaimToken(IERC20 token) external onlyOwner {
>     uint256 balance = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transfer(owner(), balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CanReclaimToken
Line:        280
Source: 
>     uint256 balance = token.balanceOf(address(this));
>     token.transfer(owner(), balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DividendManager
Line:        340
Source: 
>         require(value > 0);
>         uint256 currentSupply = dividendToken.totalSupplyAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 dividendIndex = dividends.length;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DividendManager
Line:        425
Source: 
>         dividends[_dividendIndex].recycled = true;
>         uint256 currentSupply = dividendToken.totalSupplyAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainingAmount = dividend.amount.sub(dividend.claimedAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DividendManager
Line:        393
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DividendManager
Line:        343
Source: 
>         uint256 blockNumber = block.number - 1;
>         dividends.push(
>         ^^^^^^^^^^^^^^^
>             Dividend(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CanReclaimToken
Line:        280
Source: 
>     uint256 balance = token.balanceOf(address(this));
>     token.transfer(owner(), balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
