Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DUNKBuying
Line:        63
Source: 
> 
>      uint256 public softcap=1500000;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      uint256 public hardcap=4000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DUNKBuying
Line:        64
Source: 
>      uint256 public softcap=1500000;
>      uint256 public hardcap=4000000;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      uint256 public tokensold;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DUNKBuying
Line:        67
Source: 
>      uint256 public starttime;
>     bool public buying = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DUNKBuying
Line:        86
Source: 
>     
>     function changeOwner(address payable _newOwner) public onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DUNKBuying
Line:        110
Source: 
>     
>     function buy(uint256 _amount) public payable toBuy returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > 0 , "Amount can not be zero.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DUNKBuying
Line:        117
Source: 
>     }
>     function claim()public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_balances[msg.sender]>0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DUNKBuying
Line:        125
Source: 
>     
>     function sellback(uint256 _amount)public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp>starttime.add(6 days),"you cannot sell under the selling time");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DUNKBuying
Line:        86
Source: 
>     
>     function changeOwner(address payable _newOwner) public onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DUNKBuying
Line:        104
Source: 
>     
>     function getLatestPrice(uint256 amount) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,int price,,,) = priceFeed.latestRoundData();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DUNKBuying
Line:        110
Source: 
>     
>     function buy(uint256 _amount) public payable toBuy returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > 0 , "Amount can not be zero.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DUNKBuying
Line:        125
Source: 
>     
>     function sellback(uint256 _amount)public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp>starttime.add(6 days),"you cannot sell under the selling time");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        147
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     uint256 c = a * b;
>                 ^^^^^
>     assert(a == 0 || c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DUNKBuying
Line:        120
Source: 
>         require(block.timestamp>starttime.add(6 days),"you cannot sell under the selling time");
>         dunk.transferFrom(owner, msg.sender, _balances[msg.sender]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender]=0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DUNKBuying
Line:        105
Source: 
>     function getLatestPrice(uint256 amount) public view returns (uint256) {
>         (,int price,,,) = priceFeed.latestRoundData();
>           ^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MU_DANK
Line:        11
Source: 
> 
> interface MU_DANK {
> ^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address _owner) view external  returns (uint256 balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DUNKBuying
Line:        59
Source: 
>      
>     mapping(address=>uint256)public _balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DUNKBuying
Line:        105
Source: 
>     function getLatestPrice(uint256 amount) public view returns (uint256) {
>         (,int price,,,) = priceFeed.latestRoundData();
>           ^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DUNKBuying
Line:        57
Source: 
>     AggregatorV3Interface internal priceFeed;
>     MU_DANK dunk;
>     ^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DUNKBuying
Line:        63
Source: 
> 
>      uint256 public softcap=1500000;
>                             ^^^^^^^
>      uint256 public hardcap=4000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DUNKBuying
Line:        64
Source: 
>      uint256 public softcap=1500000;
>      uint256 public hardcap=4000000;
>                             ^^^^^^^
>      uint256 public tokensold;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DUNKBuying
Line:        129
Source: 
>         dunk.transferFrom(msg.sender, owner, _amount*1e18);
>         msg.sender.transfer(_balances[msg.sender].mul(10));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DUNKBuying
Line:        136
Source: 
>         require(_amount <= getContractBalance(),"not enough balance in the contract.");
>         owner.transfer(_amount);       
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DUNKBuying
Line:        129
Source: 
>         dunk.transferFrom(msg.sender, owner, _amount*1e18);
>         msg.sender.transfer(_balances[msg.sender].mul(10));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DUNKBuying
Line:        136
Source: 
>         require(_amount <= getContractBalance(),"not enough balance in the contract.");
>         owner.transfer(_amount);       
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DUNKBuying
Line:        129
Source: 
>         dunk.transferFrom(msg.sender, owner, _amount*1e18);
>         msg.sender.transfer(_balances[msg.sender].mul(10));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DUNKBuying
Line:        136
Source: 
>         require(_amount <= getContractBalance(),"not enough balance in the contract.");
>         owner.transfer(_amount);       
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DUNKBuying
Line:        105
Source: 
>     function getLatestPrice(uint256 amount) public view returns (uint256) {
>         (,int price,,,) = priceFeed.latestRoundData();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DUNKBuying
Line:        120
Source: 
>         require(block.timestamp>starttime.add(6 days),"you cannot sell under the selling time");
>         dunk.transferFrom(owner, msg.sender, _balances[msg.sender]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender]=0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DUNKBuying
Line:        128
Source: 
>         require(tokensold<softcap,"sale hits the hardcap so you cannot sellback it");
>         dunk.transferFrom(msg.sender, owner, _amount*1e18);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(_balances[msg.sender].mul(10));

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DUNKBuying
Line:        65
Source: 
>      uint256 public hardcap=4000000;
>      uint256 public tokensold;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
>      uint256 public starttime;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DUNKBuying
Line:        129
Source: 
>         dunk.transferFrom(msg.sender, owner, _amount*1e18);
>         msg.sender.transfer(_balances[msg.sender].mul(10));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DUNKBuying
Line:        114
Source: 
>         _balances[msg.sender]=_balances[msg.sender].add(_amount*1e18);
>         tokensold=tokensold.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DUNKBuying
Line:        120
Source: 
>         require(block.timestamp>starttime.add(6 days),"you cannot sell under the selling time");
>         dunk.transferFrom(owner, msg.sender, _balances[msg.sender]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender]=0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DUNKBuying
Line:        128
Source: 
>         require(tokensold<softcap,"sale hits the hardcap so you cannot sellback it");
>         dunk.transferFrom(msg.sender, owner, _amount*1e18);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(_balances[msg.sender].mul(10));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DUNKBuying
Line:        64
Source: 
>      uint256 public softcap=1500000;
>      uint256 public hardcap=4000000;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      uint256 public tokensold;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DUNKBuying
Line:        83
Source: 
>         priceFeed = AggregatorV3Interface(0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46);
>         starttime=block.timestamp;
>                   ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DUNKBuying
Line:        119
Source: 
>         require(_balances[msg.sender]>0);
>         require(block.timestamp>starttime.add(6 days),"you cannot sell under the selling time");
>                 ^^^^^^^^^^^^^^^
>         dunk.transferFrom(owner, msg.sender, _balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DUNKBuying
Line:        126
Source: 
>     function sellback(uint256 _amount)public returns(bool){
>         require(block.timestamp>starttime.add(6 days),"you cannot sell under the selling time");
>                 ^^^^^^^^^^^^^^^
>         require(tokensold<softcap,"sale hits the hardcap so you cannot sellback it");

[0m
