Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        73
Source: 
>     modifier onlyOwner() {
>         require(owner() == _msgSender(), "Ownable: caller is not the owner");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        217
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) return 0;
>             ^^^^^^
>         uint256 c = a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        219
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        73
Source: 
>     modifier onlyOwner() {
>         require(owner() == _msgSender(), "Ownable: caller is not the owner");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    TimelockManagerReversible
Line:        600
Source: 
>         require(
>             timelocks[recipient].remainingAmount == 0,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Recipient has remaining tokens"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        73
Source: 
>     modifier onlyOwner() {
>         require(owner() == _msgSender(), "Ownable: caller is not the owner");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    TimelockManagerReversible
Line:        648
Source: 
>         require(
>             recipients.length == amounts.length &&
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 recipients.length == releaseStarts.length &&

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    TimelockManagerReversible
Line:        649
Source: 
>             recipients.length == amounts.length &&
>                 recipients.length == releaseStarts.length &&
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 recipients.length == releaseEnds.length,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    TimelockManagerReversible
Line:        650
Source: 
>                 recipients.length == releaseStarts.length &&
>                 recipients.length == releaseEnds.length,
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Parameters are of unequal length"

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        93
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        573
Source: 
>         require(
>             api3Token.transfer(destination, reclaimedTokens),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "API3 token transfer failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        615
Source: 
>         require(
>             api3Token.transferFrom(source, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "API3 token transferFrom failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        678
Source: 
>         require(
>             api3Token.transfer(recipient, withdrawable),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "API3 token transfer failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        558
Source: 
>     /// @param destination Destination of the excess tokens vested to the addresss
>     function stopVesting(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address recipient, 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        588
Source: 
>     /// @param releaseEnd End of release time
>     function transferAndLock(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address source,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        636
Source: 
>     /// @param releaseEnds Array of ends of release times
>     function transferAndLockMultiple(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address source,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        687
Source: 
>     /// @return withdrawable Amount of tokens withdrawable by the recipient
>     function getWithdrawable(address recipient)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimelockManagerReversible
Line:        726
Source: 
>     /// @return releaseEnd Release end time
>     function getTimelock(address recipient)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimelockManagerReversible
Line:        750
Source: 
>     /// @return remainingAmount Remaining amount of tokens to be withdrawn
>     function getRemainingAmount(address recipient)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        218
Source: 
>         if (a == 0) return 0;
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimelockManagerReversible
Line:        615
Source: 
>         require(
>             api3Token.transferFrom(source, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "API3 token transferFrom failed"

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        34
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        103
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        319
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TimelockManagerReversible
Line:        760
Source: 
>     /// @dev Reverts if the recipient does not have remaining tokens
>     modifier onlyIfRecipientHasRemainingTokens(address recipient) {
>                                                ^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        573
Source: 
>         require(
>             api3Token.transfer(destination, reclaimedTokens),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "API3 token transfer failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        615
Source: 
>         require(
>             api3Token.transferFrom(source, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "API3 token transferFrom failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimelockManagerReversible
Line:        678
Source: 
>         require(
>             api3Token.transfer(recipient, withdrawable),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "API3 token transfer failed"

[0m
